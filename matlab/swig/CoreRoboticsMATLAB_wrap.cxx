/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMATLAB
#define SWIG_name_d      "CoreRobotics"
#define SWIG_name        CoreRobotics

#define SWIG_op_prefix        "op_"
#define SWIG_pkg_name        "CoreRobotics"
#define SwigVar_mxArray mxArray*


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Workaround, Octave's mex.h lacks uint64_t */
#include <stdint.h>
/* MATLAB's C-API */
#include <mex.h>
/* MISC C libraries */
#include <math.h>
#include <string.h>
#include <stdarg.h>
#include <stdio.h>
#include <limits.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Last error */
static int SWIG_lasterror_code = 0;
static char SWIG_lasterror_msg[65536];
SWIGRUNTIME void SWIG_Error(int code, const char *format, ...) {
  SWIG_lasterror_code = code;
  va_list arg;
  va_start(arg, format);
  vsnprintf(SWIG_lasterror_msg, sizeof(SWIG_lasterror_msg), format, arg);
  va_end(arg);
}

SWIGRUNTIME const char* SWIG_ErrorType(int code) {
  switch (code) {
  case SWIG_MemoryError:
    return "SWIG:MemoryError";
  case SWIG_IOError:
    return "SWIG:IOError";
  case SWIG_RuntimeError:
    return "SWIG:RuntimeError";
  case SWIG_IndexError:
    return "SWIG:IndexError";
  case SWIG_TypeError:
    return "SWIG:TypeError";
  case SWIG_DivisionByZero:
    return "SWIG:DivisionByZero";
  case SWIG_OverflowError:
    return "SWIG:OverflowError";
  case SWIG_SyntaxError:
    return "SWIG:SyntaxError";
  case SWIG_ValueError:
    return "SWIG:ValueError";
  case SWIG_SystemError:
    return "SWIG:SystemError";
  case SWIG_AttributeError:
    return "SWIG:AttributeError";
  }
  return "SWIG:UnknownError";
}

SWIGRUNTIME int SWIG_check_num_args(const char *func_name, int num_args, int max_args, int min_args, int varargs) {
  if (num_args > max_args && !varargs) {
    SWIG_Error(SWIG_RuntimeError, "function %s takes at most %i arguments", func_name, max_args);
  } else if (num_args < min_args) {
    SWIG_Error(SWIG_RuntimeError, "function %s requires at least %i arguments", func_name, min_args);
  } else {
    return 1;
  }
  return 0;
}

#define SWIG_fail                                       goto fail

#define SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)  SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Matlab_NewPointerObj(ptr, type, flags)
#define swig_owntype                                    int

#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_GetModule(clientdata)                      SWIG_Matlab_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Matlab_SetModule(pointer);
#define SWIG_MODULE_CLIENTDATA_TYPE void*

#define Matlab_Error_Occurred() 0
#define SWIG_Matlab_AddErrorMsg(msg) {;}

SWIGRUNTIME swig_module_info *SWIG_Matlab_GetModule(void *clientdata);
SWIGRUNTIME void SWIG_Matlab_SetModule(swig_module_info *pointer);

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      0

/* Pointer to C/C++ object, including type information and reference counters */
typedef struct SwigPtr {
  void *ptr;
  swig_type_info *type;
  int own;
  void *self;
  struct SwigPtr* next;
} SwigPtr;
static swig_module_info *saved_swig_module = 0;

/* Add new pointer object to the memory allocator
   Returns the location of the new element by reference and a return flag by value.
 */
int SWIG_Matlab_NewPointer(SwigPtr** swig_ptr, void *ptr, swig_type_info *type, int own) {
  /* Check input arguments */
  if (!swig_ptr || !type) return 1;

  /* Allocate memory */
  SwigPtr *obj=(SwigPtr *)malloc(sizeof(SwigPtr));
  if (!obj) return 1;

  /* Initialize object */
  obj->ptr = ptr;
  obj->type = type;
  obj->own = own;
  obj->self = obj;
  obj->next = 0;

  /* Return memory reference and successful return */
  *swig_ptr = obj;
  return 0;
}

/* Free pointer object
   Returns a void* with the object to be freed (if any)
 */
void* SWIG_Matlab_DeletePointer(SwigPtr* p) {
  /* Quick return if null pointer? */
  if (p==0) return 0;

  /* Clear and free */
  void* ret = p->own ? p->ptr : 0;
  p->ptr=0;
  p->type=0;
  p->own=0;
  p->self=0;
  p->next=0;
  free(p);
  return ret;
}

/* This should probably be moved somewhere else */
#ifdef __cplusplus
extern "C"
#endif /* cplusplus */
void SWIG_Matlab_ExitFcn(void) {
  /* Unused at the moment */
}

SWIGRUNTIME int
SWIG_Matlab_CallInterp(int nlhs, mxArray *plhs[], int nrhs,
                       mxArray *prhs[], const char *functionName) {
#ifdef HAVE_OCTAVE
  return mexCallMATLAB(nlhs, plhs, nrhs, prhs, functionName);
#else
  mxArray* ex = mexCallMATLABWithTrap(nlhs, plhs, nrhs, prhs, functionName);
  if (ex) {
    mxDestroyArray(ex);
    return 1;
  } else {
    return 0;
  }
#endif
}

SWIGRUNTIME mxArray*
SWIG_Matlab_CallInterpEx(int nlhs, mxArray *plhs[], int nrhs,
                       mxArray *prhs[], const char *functionName) {
#ifdef HAVE_OCTAVE
  int flag = mexCallMATLAB(nlhs, plhs, nrhs, prhs, functionName);
  if (flag) {
    mexErrMsgIdAndTxt("SWIG:CallInterpEx","Not implemented for Octave");
  }
  return 0;
#else
  return mexCallMATLABWithTrap(nlhs, plhs, nrhs, prhs, functionName);
#endif
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Matlab_ConvertPacked(mxArray* SWIGUNUSEDPARM(pm), void* SWIGUNUSEDPARM(ptr), size_t SWIGUNUSEDPARM(sz), swig_type_info* SWIGUNUSEDPARM(ty)) {
  mexErrMsgIdAndTxt("SWIG:ConvertPacked","Not implemented");
  return SWIG_ERROR;
}

/* Runtime API implementation */
SWIGRUNTIME mxArray* SWIG_Matlab_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  /* Ownership? */
  int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;

  /* Allocate a pointer object */
  SwigPtr* swig_ptr = 0;
  if (SWIG_Matlab_NewPointer(&swig_ptr, ptr, type, own)) {
    mexErrMsgIdAndTxt("SWIG:NewPointerObj","Cannot allocate pointer");
  }

  /* Create a SwigRef instance */
  mxArray* pm = 0;
  int ex = SWIG_Matlab_CallInterp(1, &pm, 0, 0, "SwigRef");
  if (ex) mexErrMsgIdAndTxt("SWIG:NewPointerObj", "Cannot create SwigRef instance");

  /* Set pointer property */
  mxArray *pm_ptr = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
  *(uint64_T *)mxGetData(pm_ptr) = (uint64_T)swig_ptr;
  if(!pm_ptr) mexErrMsgIdAndTxt("SWIG:NewPointerObj", "mxCreateNumericMatrix failed");

  mxArray *rhs[2] = {pm, pm_ptr};
  mexCallMATLAB(0, 0, 2, rhs, "SwigSet");
  mxDestroyArray(pm_ptr);

  /* Create a proxy class of the desired type */
  if (type->clientdata) {
    const char* matlab_classname = (const char *)type->clientdata;
    mxArray* pm_test = 0;
    ex = SWIG_Matlab_CallInterp(1, &pm_test, 1, &pm, matlab_classname);
    if (ex) {
      mexWarnMsgIdAndTxt("SWIG:NewPointerObj",
                         "NewPointerObj problem. creating SwigRef as opposed to %s", matlab_classname);
    } else {
      mxDestroyArray(pm);
      pm = pm_test;
    }
  }

  return pm;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE mxArray*
SWIG_Matlab_NewPackedObj(void* SWIGUNUSEDPARM(ptr), size_t SWIGUNUSEDPARM(sz), swig_type_info* SWIGUNUSEDPARM(type)) {
  mexErrMsgIdAndTxt("SWIG:NewPackedOb","Not implemented");
  return 0;
}

SWIGRUNTIME int SWIG_Matlab_isOwned(mxArray* pm) {
/* Get index, represented as a uint64_T scalar */
  mxArray *pm_ptr;
  mexCallMATLAB(1, &pm_ptr, 1, &pm, "SwigGet");
  if(!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 ||
     mxGetClassID(pm_ptr) != mxUINT64_CLASS || mxIsComplex(pm_ptr)) {
    if(pm_ptr) mxDestroyArray(pm_ptr);
    return SWIG_ERROR;
  }
  SwigPtr* p = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
  mxDestroyArray(pm_ptr);

  return p ? p->own : 0;
}

SWIGRUNTIME SwigPtr* SWIG_Matlab_getSwigPtr(mxArray* pm) {
/* Get index, represented as a uint64_T scalar */
  mxArray *pm_ptr;
  mexCallMATLAB(1, &pm_ptr, 1, &pm, "SwigGet");
  if(!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 ||
     mxGetClassID(pm_ptr) != mxUINT64_CLASS || mxIsComplex(pm_ptr)) {
    if(pm_ptr) mxDestroyArray(pm_ptr);
    return 0;
  }
  SwigPtr* p = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
  mxDestroyArray(pm_ptr);

  /* Consistency check */
  if (p->self != p) return 0;

  /* Get pointer object */
  return p;
}

SWIGRUNTIME int SWIG_Matlab_ConvertPtrAndOwn(mxArray* pm, void **ptr, swig_type_info *type, int flags, int *own) {
  /* Get index, represented as a uint64_T scalar */
  mxArray *pm_ptr;
  mexCallMATLAB(1, &pm_ptr, 1, &pm, "SwigGet");
  if(!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 ||
     mxGetClassID(pm_ptr) != mxUINT64_CLASS || mxIsComplex(pm_ptr)){
    if(pm_ptr) mxDestroyArray(pm_ptr);
    return SWIG_ERROR;
  }
  SwigPtr* swig_ptr = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
  mxDestroyArray(pm_ptr);

  /* Get pointer object */
  if (!swig_ptr) return SWIG_ERROR;

  swig_cast_info *tc;
  int same_type = 0;
  SwigPtr* p=swig_ptr;
  while (p) {
    /* Loop over types */
    swig_type_info *p_type = p->type;

    /* No type cast needed */
    if (p_type==type || !type) {
      same_type = 1;
      break;
    }

    /* Check if type conversion is possible */
    tc = SWIG_TypeCheck(p_type->name, type);
    if (tc) break;

    /* Check next type */
    p = p->next;
  }

  /* Conversion not possible */
  if (!same_type && !tc) return SWIG_ERROR;

  /* Get data */
  if (ptr) *ptr = p->ptr;
  if (own) *own = p->own;

  /* Set ownership marker to false? */
  if(flags & SWIG_POINTER_DISOWN){
    SWIG_Matlab_DeletePointer(swig_ptr);
  }

  /* No type cast needed */
  if (same_type || !ptr) {
    return SWIG_OK;
  }

  /* Do type-cast */
  int newmemory = 0;
  *ptr = SWIG_TypeCast(tc, *ptr, &newmemory);
  if (newmemory == SWIG_CAST_NEW_MEMORY) {
    if (own) {
      *own = *own | SWIG_CAST_NEW_MEMORY;
    } else {
      /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
      mexErrMsgIdAndTxt("SWIG:ConvertPointerObj","SWIG error in converting pointer for type %s. Bad typemap?",type->name);
      return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

SWIGRUNTIME swig_module_info *SWIG_Matlab_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  if (!saved_swig_module) {
    /* First call for this module, fetch pointer from MATLAB */
    mxArray* mem = 0;
    int flag = mexCallMATLAB(1, &mem, 0, 0, "SwigMem");
    if (flag || !mem) mexErrMsgIdAndTxt("SWIG:GetModule", "Cannot call SwigMem");
    /* On first call, mem is an empty matrix */
    if (mxGetNumberOfElements(mem)!= 0) {
      if (!mxIsStruct(mem)) {
        mexErrMsgIdAndTxt("SWIG:GetModule", "Corrupted memory");
      }
      mxArray *module = mxGetField(mem, 0,
        "swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
      if (module && mxGetNumberOfElements(module) == 1 && mxGetClassID(module) == mxUINT64_CLASS && !mxIsComplex(module)) {
        /* Cast memory as a pointer */
        saved_swig_module = (swig_module_info*)(*(uint64_T*)mxGetData(module));
      }
    }
    mxDestroyArray(mem);
  }
  return saved_swig_module;
}

SWIGRUNTIME void SWIG_Matlab_SetModule(swig_module_info *pointer) {
  mxArray* mem = 0;
  const char *fields[1] = {"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME};
  int flag = mexCallMATLAB(1, &mem, 0, 0, "SwigMem");
  if (flag || !mem) mexErrMsgIdAndTxt("SWIG:SetModule", "Cannot call SwigMem");
  /* Under normal circumstances, swigMem is an empty matrix */
  /* but is not required to be for a valid call to SWIG_Matlab_SetModule() */
  if (mxGetNumberOfElements(mem) == 0) {
    mxDestroyArray(mem);
    mem = mxCreateStructMatrix(1,1,1,fields);
    if(!mem) mexErrMsgIdAndTxt("SWIG:SetModule","mxCreateStructMatrix failed");
    mxArray *module = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
    if(!module) mexErrMsgIdAndTxt("SWIG:SetModule","mxCreateNumericMatrix failed");
    *(uint64_T *)mxGetData(module) = (uint64_T)pointer;
    mxSetField(mem, 0, fields[0], module);
  } else {
    int nfields = 0;
    int fieldNum = 0;
    /* Add to existing mem if not the same */
    if (!mxIsStruct(mem)) {
      mexErrMsgIdAndTxt("SWIG:SetModule", "Corrupted memory");
    }
    nfields = mxGetNumberOfFields(mem);
    /* Check if same type table */
    int ii;
    for (ii=0; ii<nfields; ++ii){
      if(strcmp(mxGetFieldNameByNumber(mem, ii), fields[0]) == 0) {
        mxDestroyArray(mem);
        return;
      }
    }
    fieldNum = mxAddField(mem, fields[0]);
    if (fieldNum < 0) mexErrMsgIdAndTxt("SWIG:SetModule", "Error adding field to SwigMem");
    mxArray *module = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
    if(!module) mexErrMsgIdAndTxt("SWIG:SetModule","mxCreateNumericMatrix failed");
    *(uint64_T *)mxGetData(module) = (uint64_T)pointer;
    mxSetFieldByNumber(mem, 0, fieldNum, module);
  }
  /* Set variable in SwigMem */
  flag = mexCallMATLAB(0, 0, 1, &mem, "SwigMem");
  mxDestroyArray(mem);
  if (flag) {
    mexErrMsgIdAndTxt("SWIG:SetModule", "Could not set variable in SwigMem.\n");
  }
  saved_swig_module = pointer;
}

/* HACK HACK */
#define SWIG_Matlab_SetConstant(dummy1,dummy2,pm) (pm)

#ifdef __cplusplus
#include <streambuf>
#include <iostream>
namespace swig {
  // Stream buffer to allow redirecting output to MATLAB
  class SWIG_Matlab_streambuf : public std::streambuf {
  public:
    SWIG_Matlab_streambuf() {}
  protected:
    virtual int_type overflow(int_type ch) {
      if(ch != traits_type::eof()) {
        mexPrintf("%c", static_cast<char>(ch));
      }
      return ch;
    }
    virtual std::streamsize xsputn(const char* s, std::streamsize num) {
      // Pass straight to mexPrintf without buffering
      mexPrintf("%.*s", static_cast<int>(num), s);
      return num;
    }
  };

  // Instantiation
  static SWIG_Matlab_streambuf SWIG_Matlab_buf;
} // namespace swig
#endif /* cplusplus */



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t swig_types[0]
#define SWIGTYPE_p_Eigen__MatrixT_double_6_6_t swig_types[1]
#define SWIGTYPE_p_Eigen__MatrixXd swig_types[2]
#define SWIGTYPE_p_Eigen__VectorXd swig_types[3]
#define SWIGTYPE_p_Eigen__VectorXi swig_types[4]
#define SWIGTYPE_p_allocator_type swig_types[5]
#define SWIGTYPE_p_boost__interprocess__allocatorT_double_boost__interprocess__managed_shared_memory__segment_manager_t swig_types[6]
#define SWIGTYPE_p_boost__interprocess__vectorT_double_cr__ShmemAllocator_t swig_types[7]
#define SWIGTYPE_p_char swig_types[8]
#define SWIGTYPE_p_cr__CRParamNoiseGaussian swig_types[9]
#define SWIGTYPE_p_cr__CRParamNoiseGeneric swig_types[10]
#define SWIGTYPE_p_cr__CRParamNoiseMixture swig_types[11]
#define SWIGTYPE_p_cr__CRParamNoiseUniform swig_types[12]
#define SWIGTYPE_p_cr__CRWaypoint swig_types[13]
#define SWIGTYPE_p_cr__Clock swig_types[14]
#define SWIGTYPE_p_cr__Conversion swig_types[15]
#define SWIGTYPE_p_cr__Frame swig_types[16]
#define SWIGTYPE_p_cr__FrameDh swig_types[17]
#define SWIGTYPE_p_cr__FrameEuler swig_types[18]
#define SWIGTYPE_p_cr__HardLimits swig_types[19]
#define SWIGTYPE_p_cr__Integration swig_types[20]
#define SWIGTYPE_p_cr__InverseKinematics swig_types[21]
#define SWIGTYPE_p_cr__Matrix swig_types[22]
#define SWIGTYPE_p_cr__NoiseGaussian swig_types[23]
#define SWIGTYPE_p_cr__NoiseMixture swig_types[24]
#define SWIGTYPE_p_cr__NoiseModel swig_types[25]
#define SWIGTYPE_p_cr__NoiseUniform swig_types[26]
#define SWIGTYPE_p_cr__NullSpace swig_types[27]
#define SWIGTYPE_p_cr__RigidBody swig_types[28]
#define SWIGTYPE_p_cr__SensorLinear swig_types[29]
#define SWIGTYPE_p_cr__SharedMemory swig_types[30]
#define SWIGTYPE_p_cr__TrajectoryGenerator swig_types[31]
#define SWIGTYPE_p_cr__world__Manipulator swig_types[32]
#define SWIGTYPE_p_difference_type swig_types[33]
#define SWIGTYPE_p_double swig_types[34]
#define SWIGTYPE_p_f_Eigen__VectorXd__double swig_types[35]
#define SWIGTYPE_p_f_double__Eigen__VectorXd swig_types[36]
#define SWIGTYPE_p_size_type swig_types[37]
#define SWIGTYPE_p_std__allocatorT_Eigen__MatrixXd_t swig_types[38]
#define SWIGTYPE_p_std__allocatorT_Eigen__VectorXd_t swig_types[39]
#define SWIGTYPE_p_std__shared_ptrT_cr__world__Manipulator_t swig_types[40]
#define SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t swig_types[41]
#define SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t swig_types[42]
#define SWIGTYPE_p_std__vectorT_cr__NoiseModel_p_std__allocatorT_cr__NoiseModel_p_t_t swig_types[43]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[44]
#define SWIGTYPE_p_swig__MatlabSwigIterator swig_types[45]
#define SWIGTYPE_p_value_type swig_types[46]
static swig_type_info *swig_types[48];
static swig_module_info swig_module = {swig_types, 47, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


#define SWIGVERSION 0x030011 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


  #include <Eigen/Core>
  #include <vector>


#include "CoreRobotics.hpp"
#include "matlabHelpers.hpp"


#include <iostream>


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>

  
namespace swig {
  struct stop_iteration {
  };

  struct MatlabSwigIterator {
  private:
    mxArray* _seq;

  protected:
    MatlabSwigIterator(mxArray* seq) : _seq(seq)
    {
      (void)_seq;
    }
      
  public:
    virtual ~MatlabSwigIterator() {}

    virtual mxArray* value() const = 0;

    virtual MatlabSwigIterator *incr(size_t n = 1) = 0;

    virtual MatlabSwigIterator *decr(size_t n = 1)
    {
      throw stop_iteration();
    }

    virtual ptrdiff_t distance(const MatlabSwigIterator &x) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const MatlabSwigIterator &x) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    virtual MatlabSwigIterator *copy() const = 0;

    mxArray* next()
    {
      mxArray* obj = value();
      incr();
      return obj;
    }

    mxArray* previous()
    {
      decr();
      return value();
    }

    MatlabSwigIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const MatlabSwigIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const MatlabSwigIterator& x) const
    {
      return ! operator==(x);
    }

    MatlabSwigIterator* operator ++ () {
      incr();
      return this;
    }

    MatlabSwigIterator* operator -- () {
      decr();
      return this;
    }
      
    MatlabSwigIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    MatlabSwigIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const MatlabSwigIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::MatlabSwigIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


  SWIGINTERN int SWIG_AsVal_unsigned_SS_long (mxArray* pm, unsigned long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (unsigned long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (unsigned long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (unsigned long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (unsigned long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (unsigned long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (unsigned long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (unsigned long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (unsigned long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (unsigned long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


  SWIGINTERN int SWIG_AsVal_unsigned_SS_long_SS_long (mxArray* pm, unsigned long long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (unsigned long long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (unsigned long long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (unsigned long long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (unsigned long long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (unsigned long long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (unsigned long long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (unsigned long long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (unsigned long long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (unsigned long long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


SWIGINTERNINLINE int
SWIG_AsVal_size_t (mxArray* obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  SWIGINTERNINLINE mxArray* SWIG_From_long    (long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxINT64_CLASS,mxREAL);
      *((int64_T*)mxGetData(out)) = (int64_T)value;
      return out;
    }


  SWIGINTERNINLINE mxArray* SWIG_From_long_SS_long    (long long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxINT64_CLASS,mxREAL);
      *((int64_T*)mxGetData(out)) = (int64_T)value;
      return out;
    }


SWIGINTERNINLINE mxArray*
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE mxArray*
  SWIG_From_bool  (bool value)
{
  return mxCreateLogicalScalar(value);
}


  SWIGINTERN int SWIG_AsVal_long (mxArray* pm, long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


  SWIGINTERN int SWIG_AsVal_long_SS_long (mxArray* pm, long long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (long long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (long long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (long long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (long long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (long long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (long long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (long long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (long long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (long long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (mxArray* obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


SWIGINTERNINLINE mxArray*
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type>
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
// Traits that provides the from method
  template <class Type> struct traits_from_ptr {
    static mxArray* from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static mxArray* from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static mxArray* from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static mxArray* from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline mxArray* from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline mxArray* from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

    // Traits that provides the asval/as/check method
  template <class Type>
  struct traits_asptr {   
    static int asptr(mxArray* pm, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(pm, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(mxArray* pm, Type **vptr) {
    return traits_asptr<Type>::asptr(pm, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(mxArray* pm, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(pm, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(pm, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(mxArray* pm, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(pm,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(pm, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(mxArray* pm, Type *val) {
    return traits_asval<Type>::asval(pm, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(mxArray* pm, bool throw_error) {
      Type v;
      int res = asval(pm, &v);
      if (mxGetClassID(pm) == mxUNKNOWN_CLASS || !SWIG_IsOK(res)) {
	if (!Matlab_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(mxArray* pm, bool throw_error) {
      Type *v = 0;      
      int res = traits_asptr<Type>::asptr(pm, &v);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!Matlab_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
        memset(static_cast<void *>(v_def),0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(mxArray* pm, bool throw_error) {
      Type *v = 0;      
      int res = traits_asptr<Type>::asptr(pm, &v);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!Matlab_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(mxArray* pm, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(pm, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(mxArray* obj) {
      int res = asval(obj, (Type *)(0));
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(mxArray* obj) {
      int res = asptr(obj, (Type **)(0));
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(mxArray* obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {













}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }

    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      sb = self->begin();
      std::advance(sb,ii);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class MatlabSwigIterator_T :  public MatlabSwigIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef MatlabSwigIterator_T<out_iterator> self_type;

    MatlabSwigIterator_T(out_iterator curr, mxArray* seq)
      : MatlabSwigIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const MatlabSwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const MatlabSwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef mxArray* result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class MatlabSwigIteratorOpen_T :  public MatlabSwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef MatlabSwigIterator_T<out_iterator>  base;
    typedef MatlabSwigIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    MatlabSwigIteratorOpen_T(out_iterator curr, mxArray* seq)
      : MatlabSwigIterator_T<OutIterator>(curr, seq)
    {
    }
    
    mxArray* value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    MatlabSwigIterator *copy() const
    {
      return new self_type(*this);
    }

    MatlabSwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    MatlabSwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class MatlabSwigIteratorClosed_T :  public MatlabSwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef MatlabSwigIterator_T<out_iterator>  base;    
    typedef MatlabSwigIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    MatlabSwigIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, mxArray* seq)
      : MatlabSwigIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    mxArray* value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    MatlabSwigIterator *copy() const
    {
      return new self_type(*this);
    }

    MatlabSwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    MatlabSwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline MatlabSwigIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, mxArray* seq = 0 /* KT mxArray()*/)
  {
    return new MatlabSwigIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline MatlabSwigIterator*
  make_output_iterator(const OutIter& current, mxArray* seq = 0 /* KT mxArray()*/)
  {
    return new MatlabSwigIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
    struct MatlabSequence_Ref // * matlab can't support these, because of how assignment works
  {
    MatlabSequence_Ref(mxArray* const seq, int index)
      : _seq(seq), _index(index)
    {
    }

    operator T () const
    {
      //      swig::SwigVar_PyObject item = MatlabSequence_GetItem(_seq, _index);
      mxArray* item; // * todo
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!Matlab_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Matlab_AddErrorMsg(msg);
	SWIG_Matlab_AddErrorMsg(e.what());
	throw;
      }
    }

    MatlabSequence_Ref& operator=(const T& v)
    {
      //      MatlabSequence_SetItem(_seq, _index, swig::from<T>(v));
      // * todo
      return *this;
    }

  private:
    mxArray* _seq;
    int _index;
  };

  template <class T>
  struct MatlabSequence_ArrowProxy
  {
    MatlabSequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct MatlabSequence_InputIterator
  {
    typedef MatlabSequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    MatlabSequence_InputIterator()
    {
    }

    MatlabSequence_InputIterator(mxArray* const seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    MatlabSequence_ArrowProxy<T>
    operator->() const {
      return MatlabSequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    mxArray* _seq;
    difference_type _index;
  };

  template <class T>
  struct MatlabSequence_Cont
  {
    typedef MatlabSequence_Ref<T> reference;
    typedef const MatlabSequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef MatlabSequence_InputIterator<T, reference> iterator;
    typedef MatlabSequence_InputIterator<T, const_reference> const_iterator;

    MatlabSequence_Cont(mxArray* const seq) : _seq(seq)
    {
      // * assert that we have map type etc.
      /*
      if (!MatlabSequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
      */
    }

    ~MatlabSequence_Cont()
    {
    }

    size_type size() const
    {
      //      return static_cast<size_type>(MatlabSequence_Size(_seq));
      return 0; // * todo
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	//	swig::SwigVar_PyObject item = MatlabSequence_GetItem(_seq, i);
	mxArray* item; // * todo
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    mxArray* _seq;
  };

}


  namespace swig {
    template <>  struct traits< Eigen::MatrixXd > {
      typedef pointer_category category;
      static const char* type_name() { return"Eigen::MatrixXd"; }
    };
  }


namespace swig {
  template <class Matlabseq, class Seq>
  inline void
  assign(const Matlabseq& matlabseq, Seq* seq) {
#ifdef SWIG_STD_NOASSIGN_STL
    typedef typename Matlabseq::value_type value_type;
    typename Matlabseq::const_iterator it = matlabseq.begin();
    for (;it != matlabseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
#else
    seq->assign(matlabseq.begin(), matlabseq.end());
#endif
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename sequence::iterator iterator;

    static int asptr(mxArray* obj, sequence **seq) {
      if (obj && mxGetClassID(obj)==mxCELL_CLASS &&
              mxGetNumberOfDimensions(obj)==2 &&
              mxGetM(obj)==1 && mxGetN(obj)>0 ) {
        // Convert to cell array.
        if (seq) {
          *seq = new sequence();
          int N = mxGetN(obj);
          for (int i=0; i<N; ++i) {
            (*seq)->push_back(swig::as<value_type>(mxGetCell(obj, i)));
          }
          return SWIG_NEWOBJ;
        }
      } else {
	     sequence *p;
       if (SWIG_ConvertPtr(obj,(void**)&p,
                            swig::type_info<sequence>(),0) == SWIG_OK) {
	      if (seq) *seq = p;
	        return SWIG_OLDOBJ;
	      }
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static mxArray* from(const sequence& seq) {







      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
        mxArray* c = mxCreateCellMatrix(1,size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  mxSetCell(c, i, swig::from<value_type>(*it));
	}
	return c;
      } else {
	SWIG_Error(SWIG_RuntimeError, "swig overflow error: sequence size not valid in matlab");
	return 0;
      }
      return 0;
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(mxArray* obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static mxArray* from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Eigen::MatrixXd, std::allocator< Eigen::MatrixXd > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Eigen::MatrixXd" "," "std::allocator< Eigen::MatrixXd >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< Eigen::MatrixXd >::value_type std_vector_Sl_Eigen_MatrixXd_Sg__pop(std::vector< Eigen::MatrixXd > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Eigen::MatrixXd,std::allocator< Eigen::MatrixXd > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< Eigen::MatrixXd >::value_type std_vector_Sl_Eigen_MatrixXd_Sg__brace(std::vector< Eigen::MatrixXd > *self,std::vector< Eigen::MatrixXd >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Eigen_MatrixXd_Sg__setbrace(std::vector< Eigen::MatrixXd > *self,std::vector< Eigen::MatrixXd >::value_type x,std::vector< Eigen::MatrixXd >::difference_type i){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_Eigen_MatrixXd_Sg__append(std::vector< Eigen::MatrixXd > *self,std::vector< Eigen::MatrixXd >::value_type x){
      self->push_back(x);
    }

  SWIGINTERNINLINE mxArray* SWIG_From_unsigned_SS_long    (unsigned long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxUINT64_CLASS,mxREAL);
      *((uint64_T*)mxGetData(out)) = (uint64_T)value;
      return out;
    }


  SWIGINTERNINLINE mxArray* SWIG_From_unsigned_SS_long_SS_long    (unsigned long long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxUINT64_CLASS,mxREAL);
      *((uint64_T*)mxGetData(out)) = (uint64_T)value;
      return out;
    }


SWIGINTERNINLINE mxArray*
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< Eigen::MatrixXd >::iterator std_vector_Sl_Eigen_MatrixXd_Sg__erase__SWIG_0(std::vector< Eigen::MatrixXd > *self,std::vector< Eigen::MatrixXd >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Eigen::MatrixXd >::iterator std_vector_Sl_Eigen_MatrixXd_Sg__erase__SWIG_1(std::vector< Eigen::MatrixXd > *self,std::vector< Eigen::MatrixXd >::iterator first,std::vector< Eigen::MatrixXd >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Eigen::MatrixXd >::iterator std_vector_Sl_Eigen_MatrixXd_Sg__insert__SWIG_0(std::vector< Eigen::MatrixXd > *self,std::vector< Eigen::MatrixXd >::iterator pos,std::vector< Eigen::MatrixXd >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Eigen_MatrixXd_Sg__insert__SWIG_1(std::vector< Eigen::MatrixXd > *self,std::vector< Eigen::MatrixXd >::iterator pos,std::vector< Eigen::MatrixXd >::size_type n,std::vector< Eigen::MatrixXd >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< Eigen::VectorXd > {
      typedef pointer_category category;
      static const char* type_name() { return"Eigen::VectorXd"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Eigen::VectorXd, std::allocator< Eigen::VectorXd > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Eigen::VectorXd" "," "std::allocator< Eigen::VectorXd >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< Eigen::VectorXd >::value_type std_vector_Sl_Eigen_VectorXd_Sg__pop(std::vector< Eigen::VectorXd > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Eigen::VectorXd,std::allocator< Eigen::VectorXd > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< Eigen::VectorXd >::value_type std_vector_Sl_Eigen_VectorXd_Sg__brace(std::vector< Eigen::VectorXd > *self,std::vector< Eigen::VectorXd >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Eigen_VectorXd_Sg__setbrace(std::vector< Eigen::VectorXd > *self,std::vector< Eigen::VectorXd >::value_type x,std::vector< Eigen::VectorXd >::difference_type i){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_Eigen_VectorXd_Sg__append(std::vector< Eigen::VectorXd > *self,std::vector< Eigen::VectorXd >::value_type x){
      self->push_back(x);
    }
SWIGINTERN std::vector< Eigen::VectorXd >::iterator std_vector_Sl_Eigen_VectorXd_Sg__erase__SWIG_0(std::vector< Eigen::VectorXd > *self,std::vector< Eigen::VectorXd >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< Eigen::VectorXd >::iterator std_vector_Sl_Eigen_VectorXd_Sg__erase__SWIG_1(std::vector< Eigen::VectorXd > *self,std::vector< Eigen::VectorXd >::iterator first,std::vector< Eigen::VectorXd >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< Eigen::VectorXd >::iterator std_vector_Sl_Eigen_VectorXd_Sg__insert__SWIG_0(std::vector< Eigen::VectorXd > *self,std::vector< Eigen::VectorXd >::iterator pos,std::vector< Eigen::VectorXd >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_Eigen_VectorXd_Sg__insert__SWIG_1(std::vector< Eigen::VectorXd > *self,std::vector< Eigen::VectorXd >::iterator pos,std::vector< Eigen::VectorXd >::size_type n,std::vector< Eigen::VectorXd >::value_type const &x){ self->insert(pos, n, x); }

  SWIGINTERNINLINE mxArray* SWIG_From_double    (double value)
    {    
      return mxCreateDoubleScalar(value);
    }


  SWIGINTERN int SWIG_AsVal_double (mxArray* pm, double* val)
    {
      if(!mxIsDouble(pm) || mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      if (val) *val = mxGetScalar(pm);
      return SWIG_OK;
    }


  template <typename T> mxClassID MxType() {return mxUNKNOWN_CLASS;};

  template <class Derived>
  bool ConvertFromMatlabToEigenMatrix(Eigen::MatrixBase<Derived>* out, const mxArray* in)
  {
    size_t rows = 0;
    size_t cols = 0;

    // Do a bunch of validation and type checking
    if (!mxIsNumeric(in)) {
      mexPrintf("input is not a matlab numeric array");
      return false;
    } // check data type
    else if (mxGetClassID(in) != MxType<typename Derived::Scalar>()) {
      mexPrintf("Type mismatch between Matlab and Eigen objects.");
      return false;
    }
    // check dimensions
    else if (mxGetNumberOfDimensions(in) > 2) {
      mexPrintf("Eigen only supports 1D or 2D arrays, but I got a Matlab array with more than 2 dimensions");
      return false;
    }
    else if (mxGetNumberOfDimensions(in) == 1) {
      rows = mxGetNumberOfElements(in);
      cols = 1;
      if ((Derived::RowsAtCompileTime != Eigen::Dynamic) && (Derived::RowsAtCompileTime != rows)) {
        mexPrintf("Row dimension mismatch between Matlab and Eigen objects (1D).");
        return false;
      }
      else if ((Derived::ColsAtCompileTime != Eigen::Dynamic) && (Derived::ColsAtCompileTime != 1)) {
        mexPrintf("Column dimension mismatch between Matlab and Eigen objects (1D).");
        return false;
      }
    }
    else if (mxGetNumberOfDimensions(in) == 2) {
      rows = mxGetM(in);
      cols = mxGetN(in);
      if ((Derived::RowsAtCompileTime != Eigen::Dynamic) && (Derived::RowsAtCompileTime != rows)) {
        mexPrintf("Row dimension mismatch between Matlab and Eigen objects (2D).");
        return false;
      }
      else if ((Derived::ColsAtCompileTime != Eigen::Dynamic) && (Derived::ColsAtCompileTime != cols)) {
        mexPrintf("Column dimension mismatch between Matlab and Eigen objects (2D).");
        return false;
      }
    }

    // Extract the data
    out->derived().setZero(rows, cols);
    typename Derived::Scalar* data = static_cast<typename Derived::Scalar*>(mxGetData(in));
    for (size_t i=0; i < rows; i++) {
      for (size_t j=0; j < cols; j++) {
        out->coeffRef(i,j) = data[i + rows*j];
      }
    }

    return true;
  };

  // Copy values from an Eigen matrix into an *existing* Matlab matrix
  template<class Derived>
  bool CopyFromEigenToMatlabMatrix(mxArray* out, Eigen::MatrixBase<Derived>* in) {
    size_t rows;
    size_t cols;

    // check object type
    if (!mxIsNumeric(out)) {
      mexPrintf("Argout matrix must be a numeric matlab matrix");
      return false;
    }
    // check scalar type
    else if (mxGetClassID(out) != MxType<typename Derived::Scalar>()) {
      mexPrintf("Argout matrix data type does not match the scalar type of the Eigen matrix");
      return false;
    }
    else if (mxGetNumberOfDimensions(out) > 2) {
      mexPrintf("I can't handle Matlab matrices with more than 2 dimensions");
      return false;
    }
    rows = mxGetM(out);
    cols = mxGetN(out);

    if ((Derived::RowsAtCompileTime != Eigen::Dynamic) && (Derived::RowsAtCompileTime != rows))
    {
      mexPrintf("Row dimension mismatch between Matlab and Eigen objects");
      return false;
    }
    else if ((Derived::ColsAtCompileTime != Eigen::Dynamic) && (Derived::ColsAtCompileTime != cols))
    {
      mexPrintf("Column dimension mismatch between Matlab and Eigen objects");
      return false;
    }

    typename Derived::Scalar* data = static_cast<typename Derived::Scalar*>(mxGetData(out));

    for (size_t i=0; i < rows; i++) {
      for (size_t j= 0; j < cols; j++) {
        data[i + j * rows] = in->coeff(i,j);
      }
    }

    return true;
  };

  template<class Derived>
  bool ConvertFromEigenToMatlabMatrix(mxArray** out, Eigen::MatrixBase<Derived>* in) {
    size_t rows = in->rows();
    size_t cols = in->cols();

    if (MxType<typename Derived::Scalar>() == mxUNKNOWN_CLASS) {
      mexPrintf("I don't know how to convert this scalar type to a Matlab matrix");
      return false;
    }

    *out = mxCreateNumericMatrix(rows, cols, MxType<typename Derived::Scalar>(), mxREAL);

    typename Derived::Scalar* data = static_cast<typename Derived::Scalar*>(mxGetData(*out));

    for (size_t i=0; i < rows; i++) {
      for (size_t j=0; j < cols; j++) {
        data[i + j * rows] = in->coeff(i,j);
      }
    }

    return true;
  }

  template<> mxClassID MxType<double>() {return mxDOUBLE_CLASS;};
  template<> mxClassID MxType<int>() {return mxINT32_CLASS;};


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (mxArray* obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (mxArray* obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE mxArray*
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_bool (mxArray* pm, bool *val)
{
   if(!mxIsLogicalScalar(pm)) return SWIG_TypeError;
   if (val) *val = mxIsLogicalScalarTrue(pm);
   return SWIG_OK;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(mxArray* pm, char** cptr, size_t* psize, int *alloc)
{
  if(!mxIsChar(pm) || (mxGetNumberOfElements(pm) != 0 && mxGetM(pm)!=1)) return SWIG_TypeError;
  size_t len=mxGetN(pm);
  static char buf[256];
  int flag = mxGetString(pm,buf,(mwSize)sizeof(buf));
  if(flag) return SWIG_TypeError;

  if (alloc) {
    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), buf, sizeof(char)*(len + 1)));
    *alloc = SWIG_NEWOBJ;
  } else if (cptr)
    *cptr = buf;
  if (psize)
    *psize = len + 1;
  return SWIG_OK;
}




int _wrap_delete_MatlabSwigIterator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MatlabSwigIterator",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatlabSwigIterator" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_value(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_value",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_value" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  try {
    result = (mxArray *)((swig::MatlabSwigIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_incr__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_incr",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_incr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::MatlabSwigIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_incr__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_incr",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_incr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  try {
    result = (swig::MatlabSwigIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_incr(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatlabSwigIterator_incr__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatlabSwigIterator_incr__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MatlabSwigIterator_incr'."
    "  Possible C/C++ prototypes are:\n"
    "    swig::MatlabSwigIterator::incr(size_t)\n"
    "    swig::MatlabSwigIterator::incr()\n");
  return 1;
}


int _wrap_MatlabSwigIterator_decr__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_decr",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_decr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::MatlabSwigIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_decr__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_decr",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_decr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  try {
    result = (swig::MatlabSwigIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_decr(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatlabSwigIterator_decr__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatlabSwigIterator_decr__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MatlabSwigIterator_decr'."
    "  Possible C/C++ prototypes are:\n"
    "    swig::MatlabSwigIterator::decr(size_t)\n"
    "    swig::MatlabSwigIterator::decr()\n");
  return 1;
}


int _wrap_MatlabSwigIterator_distance(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  ptrdiff_t result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_distance",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_distance" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_distance" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_distance" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  try {
    result = ((swig::MatlabSwigIterator const *)arg1)->distance((swig::MatlabSwigIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    mexErrMsgIdAndTxt("SWIG:RuntimeError", "C++ side threw an exception of type " "std::invalid_argument"); SWIG_fail;
  }
  
  _out = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_equal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_equal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_equal" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_equal" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_equal" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  try {
    result = (bool)((swig::MatlabSwigIterator const *)arg1)->equal((swig::MatlabSwigIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    mexErrMsgIdAndTxt("SWIG:RuntimeError", "C++ side threw an exception of type " "std::invalid_argument"); SWIG_fail;
  }
  
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_copy(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_copy",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_copy" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  result = (swig::MatlabSwigIterator *)((swig::MatlabSwigIterator const *)arg1)->copy();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_next(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_next",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_next" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  try {
    result = (mxArray *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_previous(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_previous",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_previous" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  try {
    result = (mxArray *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_advance(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_advance",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_advance" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::MatlabSwigIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_eq(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_eq",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_eq" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_eq" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_eq" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  result = (bool)((swig::MatlabSwigIterator const *)arg1)->operator ==((swig::MatlabSwigIterator const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_ne(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_ne",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_ne" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_ne" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_ne" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  result = (bool)((swig::MatlabSwigIterator const *)arg1)->operator !=((swig::MatlabSwigIterator const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_TODOincr(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_TODOincr",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_TODOincr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  result = (swig::MatlabSwigIterator *)(arg1)->operator ++();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_TODOdecr(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_TODOdecr",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_TODOdecr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  result = (swig::MatlabSwigIterator *)(arg1)->operator --();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_plus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_plus" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_plus" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::MatlabSwigIterator *)((swig::MatlabSwigIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_minus__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_minus" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_minus" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::MatlabSwigIterator *)((swig::MatlabSwigIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_minus__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  ptrdiff_t result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_minus" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_minus" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_minus" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  result = ((swig::MatlabSwigIterator const *)arg1)->operator -((swig::MatlabSwigIterator const &)*arg2);
  _out = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_minus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatlabSwigIterator_minus__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatlabSwigIterator_minus__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MatlabSwigIterator_minus'."
    "  Possible C/C++ prototypes are:\n"
    "    swig::MatlabSwigIterator::operator -(ptrdiff_t) const\n"
    "    swig::MatlabSwigIterator::operator -(swig::MatlabSwigIterator const &) const\n");
  return 1;
}


int _wrap_vectorMatrixXd_pop(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::MatrixXd >::value_type result;
  
  if (!SWIG_check_num_args("vectorMatrixXd_pop",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_pop" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  try {
    result = std_vector_Sl_Eigen_MatrixXd_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = SWIG_NewPointerObj((new std::vector< Eigen::MatrixXd >::value_type(static_cast< const std::vector< Eigen::MatrixXd >::value_type& >(result))), SWIGTYPE_p_Eigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_brace(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  std::vector< Eigen::MatrixXd >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::vector< Eigen::MatrixXd >::value_type result;
  
  if (!SWIG_check_num_args("vectorMatrixXd_brace",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_brace" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorMatrixXd_brace" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Eigen::MatrixXd >::difference_type >(val2);
  try {
    result = std_vector_Sl_Eigen_MatrixXd_Sg__brace(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = SWIG_NewPointerObj((new std::vector< Eigen::MatrixXd >::value_type(static_cast< const std::vector< Eigen::MatrixXd >::value_type& >(result))), SWIGTYPE_p_Eigen__MatrixXd, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_setbrace(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  std::vector< Eigen::MatrixXd >::value_type arg2 ;
  std::vector< Eigen::MatrixXd >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorMatrixXd_setbrace",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_setbrace" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Eigen__MatrixXd,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorMatrixXd_setbrace" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::value_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorMatrixXd_setbrace" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::value_type""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector< Eigen::MatrixXd >::value_type * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorMatrixXd_setbrace" "', argument " "3"" of type '" "std::vector< Eigen::MatrixXd >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Eigen::MatrixXd >::difference_type >(val3);
  try {
    std_vector_Sl_Eigen_MatrixXd_Sg__setbrace(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_append(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  std::vector< Eigen::MatrixXd >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorMatrixXd_append",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_append" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Eigen__MatrixXd,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorMatrixXd_append" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::value_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorMatrixXd_append" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::value_type""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector< Eigen::MatrixXd >::value_type * >(argp2));
    }
  }
  std_vector_Sl_Eigen_MatrixXd_Sg__append(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_vectorMatrixXd__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  std::vector< Eigen::MatrixXd > *result = 0 ;
  
  if (!SWIG_check_num_args("new_vectorMatrixXd",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (std::vector< Eigen::MatrixXd > *)new std::vector< Eigen::MatrixXd >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_vectorMatrixXd__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< Eigen::MatrixXd > *result = 0 ;
  
  if (!SWIG_check_num_args("new_vectorMatrixXd",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::vector< Eigen::MatrixXd,std::allocator< Eigen::MatrixXd > > *ptr = (std::vector< Eigen::MatrixXd,std::allocator< Eigen::MatrixXd > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorMatrixXd" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorMatrixXd" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Eigen::MatrixXd > *)new std::vector< Eigen::MatrixXd >((std::vector< Eigen::MatrixXd > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_vectorMatrixXd_empty(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("vectorMatrixXd_empty",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_empty" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  result = (bool)((std::vector< Eigen::MatrixXd > const *)arg1)->empty();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_size(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::MatrixXd >::size_type result;
  
  if (!SWIG_check_num_args("vectorMatrixXd_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_size" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  result = ((std::vector< Eigen::MatrixXd > const *)arg1)->size();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_swap(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  std::vector< Eigen::MatrixXd > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorMatrixXd_swap",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_swap" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorMatrixXd_swap" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorMatrixXd_swap" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp2);
  (arg1)->swap(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_begin(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::MatrixXd >::iterator result;
  
  if (!SWIG_check_num_args("vectorMatrixXd_begin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_begin" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  result = (arg1)->begin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Eigen::MatrixXd >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_end(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::MatrixXd >::iterator result;
  
  if (!SWIG_check_num_args("vectorMatrixXd_end",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_end" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  result = (arg1)->end();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Eigen::MatrixXd >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_rbegin(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::MatrixXd >::reverse_iterator result;
  
  if (!SWIG_check_num_args("vectorMatrixXd_rbegin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_rbegin" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  result = (arg1)->rbegin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Eigen::MatrixXd >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_rend(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::MatrixXd >::reverse_iterator result;
  
  if (!SWIG_check_num_args("vectorMatrixXd_rend",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_rend" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  result = (arg1)->rend();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Eigen::MatrixXd >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_clear(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorMatrixXd_clear",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_clear" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  (arg1)->clear();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_get_allocator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< std::allocator< Eigen::MatrixXd > > result;
  
  if (!SWIG_check_num_args("vectorMatrixXd_get_allocator",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_get_allocator" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  result = ((std::vector< Eigen::MatrixXd > const *)arg1)->get_allocator();
  _out = SWIG_NewPointerObj((new std::vector< Eigen::MatrixXd >::allocator_type(static_cast< const std::vector< Eigen::MatrixXd >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_Eigen__MatrixXd_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_vectorMatrixXd__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::MatrixXd > *result = 0 ;
  
  if (!SWIG_check_num_args("new_vectorMatrixXd",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorMatrixXd" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Eigen::MatrixXd >::size_type >(val1);
  result = (std::vector< Eigen::MatrixXd > *)new std::vector< Eigen::MatrixXd >(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_pop_back(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorMatrixXd_pop_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_pop_back" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  (arg1)->pop_back();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  std::vector< Eigen::MatrixXd >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorMatrixXd_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_resize" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorMatrixXd_resize" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Eigen::MatrixXd >::size_type >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_erase__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  std::vector< Eigen::MatrixXd >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  mxArray * _out;
  std::vector< Eigen::MatrixXd >::iterator result;
  
  if (!SWIG_check_num_args("vectorMatrixXd_erase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_erase" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorMatrixXd_erase" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< Eigen::MatrixXd >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::MatrixXd >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorMatrixXd_erase" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::iterator""'");
    }
  }
  result = std_vector_Sl_Eigen_MatrixXd_Sg__erase__SWIG_0(arg1,arg2);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Eigen::MatrixXd >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_erase__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  std::vector< Eigen::MatrixXd >::iterator arg2 ;
  std::vector< Eigen::MatrixXd >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  swig::MatlabSwigIterator *iter3 = 0 ;
  int res3 ;
  mxArray * _out;
  std::vector< Eigen::MatrixXd >::iterator result;
  
  if (!SWIG_check_num_args("vectorMatrixXd_erase",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_erase" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorMatrixXd_erase" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< Eigen::MatrixXd >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::MatrixXd >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorMatrixXd_erase" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter3), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorMatrixXd_erase" "', argument " "3"" of type '" "std::vector< Eigen::MatrixXd >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< Eigen::MatrixXd >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::MatrixXd >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorMatrixXd_erase" "', argument " "3"" of type '" "std::vector< Eigen::MatrixXd >::iterator""'");
    }
  }
  result = std_vector_Sl_Eigen_MatrixXd_Sg__erase__SWIG_1(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Eigen::MatrixXd >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_erase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< Eigen::MatrixXd,std::allocator< Eigen::MatrixXd > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::MatrixXd >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectorMatrixXd_erase__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< Eigen::MatrixXd,std::allocator< Eigen::MatrixXd > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::MatrixXd >::iterator > *>(iter) != 0));
      if (_v) {
        swig::MatlabSwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::MatrixXd >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectorMatrixXd_erase__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'vectorMatrixXd_erase'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Eigen::MatrixXd >::erase(std::vector< Eigen::MatrixXd >::iterator)\n"
    "    std::vector< Eigen::MatrixXd >::erase(std::vector< Eigen::MatrixXd >::iterator,std::vector< Eigen::MatrixXd >::iterator)\n");
  return 1;
}


int _wrap_new_vectorMatrixXd__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd >::size_type arg1 ;
  std::vector< Eigen::MatrixXd >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  std::vector< Eigen::MatrixXd > *result = 0 ;
  
  if (!SWIG_check_num_args("new_vectorMatrixXd",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorMatrixXd" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Eigen::MatrixXd >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Eigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorMatrixXd" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorMatrixXd" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Eigen::MatrixXd >::value_type * >(argp2);
  result = (std::vector< Eigen::MatrixXd > *)new std::vector< Eigen::MatrixXd >(arg1,(std::vector< Eigen::MatrixXd >::value_type const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_vectorMatrixXd(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_vectorMatrixXd__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectorMatrixXd__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< Eigen::MatrixXd,std::allocator< Eigen::MatrixXd > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectorMatrixXd__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Eigen__MatrixXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vectorMatrixXd__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_vectorMatrixXd'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Eigen::MatrixXd >::vector()\n"
    "    std::vector< Eigen::MatrixXd >::vector(std::vector< Eigen::MatrixXd > const &)\n"
    "    std::vector< Eigen::MatrixXd >::vector(std::vector< Eigen::MatrixXd >::size_type)\n"
    "    std::vector< Eigen::MatrixXd >::vector(std::vector< Eigen::MatrixXd >::size_type,std::vector< Eigen::MatrixXd >::value_type const &)\n");
  return 1;
}


int _wrap_vectorMatrixXd_push_back(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  std::vector< Eigen::MatrixXd >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorMatrixXd_push_back",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_push_back" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Eigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorMatrixXd_push_back" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorMatrixXd_push_back" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Eigen::MatrixXd >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Eigen::MatrixXd >::value_type const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_front(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::MatrixXd >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("vectorMatrixXd_front",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_front" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  result = (std::vector< Eigen::MatrixXd >::value_type *) &((std::vector< Eigen::MatrixXd > const *)arg1)->front();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__MatrixXd, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_back(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::MatrixXd >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("vectorMatrixXd_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_back" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  result = (std::vector< Eigen::MatrixXd >::value_type *) &((std::vector< Eigen::MatrixXd > const *)arg1)->back();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__MatrixXd, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_assign(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  std::vector< Eigen::MatrixXd >::size_type arg2 ;
  std::vector< Eigen::MatrixXd >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorMatrixXd_assign",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_assign" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorMatrixXd_assign" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Eigen::MatrixXd >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Eigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorMatrixXd_assign" "', argument " "3"" of type '" "std::vector< Eigen::MatrixXd >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorMatrixXd_assign" "', argument " "3"" of type '" "std::vector< Eigen::MatrixXd >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Eigen::MatrixXd >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Eigen::MatrixXd >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  std::vector< Eigen::MatrixXd >::size_type arg2 ;
  std::vector< Eigen::MatrixXd >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorMatrixXd_resize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_resize" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorMatrixXd_resize" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Eigen::MatrixXd >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Eigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorMatrixXd_resize" "', argument " "3"" of type '" "std::vector< Eigen::MatrixXd >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorMatrixXd_resize" "', argument " "3"" of type '" "std::vector< Eigen::MatrixXd >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Eigen::MatrixXd >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Eigen::MatrixXd >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< Eigen::MatrixXd,std::allocator< Eigen::MatrixXd > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorMatrixXd_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< Eigen::MatrixXd,std::allocator< Eigen::MatrixXd > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Eigen__MatrixXd, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorMatrixXd_resize__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'vectorMatrixXd_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Eigen::MatrixXd >::resize(std::vector< Eigen::MatrixXd >::size_type)\n"
    "    std::vector< Eigen::MatrixXd >::resize(std::vector< Eigen::MatrixXd >::size_type,std::vector< Eigen::MatrixXd >::value_type const &)\n");
  return 1;
}


int _wrap_vectorMatrixXd_insert__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  std::vector< Eigen::MatrixXd >::iterator arg2 ;
  std::vector< Eigen::MatrixXd >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  std::vector< Eigen::MatrixXd >::iterator result;
  
  if (!SWIG_check_num_args("vectorMatrixXd_insert",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_insert" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorMatrixXd_insert" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< Eigen::MatrixXd >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::MatrixXd >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorMatrixXd_insert" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Eigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorMatrixXd_insert" "', argument " "3"" of type '" "std::vector< Eigen::MatrixXd >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorMatrixXd_insert" "', argument " "3"" of type '" "std::vector< Eigen::MatrixXd >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Eigen::MatrixXd >::value_type * >(argp3);
  result = std_vector_Sl_Eigen_MatrixXd_Sg__insert__SWIG_0(arg1,arg2,(Eigen::MatrixXd const &)*arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Eigen::MatrixXd >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_insert__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  std::vector< Eigen::MatrixXd >::iterator arg2 ;
  std::vector< Eigen::MatrixXd >::size_type arg3 ;
  std::vector< Eigen::MatrixXd >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorMatrixXd_insert",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_insert" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorMatrixXd_insert" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< Eigen::MatrixXd >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::MatrixXd >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorMatrixXd_insert" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorMatrixXd_insert" "', argument " "3"" of type '" "std::vector< Eigen::MatrixXd >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Eigen::MatrixXd >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_Eigen__MatrixXd,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorMatrixXd_insert" "', argument " "4"" of type '" "std::vector< Eigen::MatrixXd >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorMatrixXd_insert" "', argument " "4"" of type '" "std::vector< Eigen::MatrixXd >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Eigen::MatrixXd >::value_type * >(argp4);
  std_vector_Sl_Eigen_MatrixXd_Sg__insert__SWIG_1(arg1,arg2,arg3,(Eigen::MatrixXd const &)*arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_insert(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< Eigen::MatrixXd,std::allocator< Eigen::MatrixXd > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::MatrixXd >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Eigen__MatrixXd, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorMatrixXd_insert__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< Eigen::MatrixXd,std::allocator< Eigen::MatrixXd > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::MatrixXd >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Eigen__MatrixXd, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorMatrixXd_insert__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'vectorMatrixXd_insert'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Eigen::MatrixXd >::insert(std::vector< Eigen::MatrixXd >::iterator,std::vector< Eigen::MatrixXd >::value_type const &)\n"
    "    std::vector< Eigen::MatrixXd >::insert(std::vector< Eigen::MatrixXd >::iterator,std::vector< Eigen::MatrixXd >::size_type,std::vector< Eigen::MatrixXd >::value_type const &)\n");
  return 1;
}


int _wrap_vectorMatrixXd_reserve(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  std::vector< Eigen::MatrixXd >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorMatrixXd_reserve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_reserve" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorMatrixXd_reserve" "', argument " "2"" of type '" "std::vector< Eigen::MatrixXd >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Eigen::MatrixXd >::size_type >(val2);
  (arg1)->reserve(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorMatrixXd_capacity(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::MatrixXd >::size_type result;
  
  if (!SWIG_check_num_args("vectorMatrixXd_capacity",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorMatrixXd_capacity" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  result = ((std::vector< Eigen::MatrixXd > const *)arg1)->capacity();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_vectorMatrixXd(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::MatrixXd > *arg1 = (std::vector< Eigen::MatrixXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_vectorMatrixXd",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorMatrixXd" "', argument " "1"" of type '" "std::vector< Eigen::MatrixXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::MatrixXd > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_pop(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::VectorXd >::value_type result;
  
  if (!SWIG_check_num_args("vectorVectorXd_pop",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_pop" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  try {
    result = std_vector_Sl_Eigen_VectorXd_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = SWIG_NewPointerObj((new std::vector< Eigen::VectorXd >::value_type(static_cast< const std::vector< Eigen::VectorXd >::value_type& >(result))), SWIGTYPE_p_Eigen__VectorXd, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_brace(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  std::vector< Eigen::VectorXd >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::vector< Eigen::VectorXd >::value_type result;
  
  if (!SWIG_check_num_args("vectorVectorXd_brace",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_brace" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorVectorXd_brace" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Eigen::VectorXd >::difference_type >(val2);
  try {
    result = std_vector_Sl_Eigen_VectorXd_Sg__brace(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = SWIG_NewPointerObj((new std::vector< Eigen::VectorXd >::value_type(static_cast< const std::vector< Eigen::VectorXd >::value_type& >(result))), SWIGTYPE_p_Eigen__VectorXd, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_setbrace(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  std::vector< Eigen::VectorXd >::value_type arg2 ;
  std::vector< Eigen::VectorXd >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorVectorXd_setbrace",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_setbrace" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Eigen__VectorXd,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorVectorXd_setbrace" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::value_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorVectorXd_setbrace" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::value_type""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector< Eigen::VectorXd >::value_type * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorVectorXd_setbrace" "', argument " "3"" of type '" "std::vector< Eigen::VectorXd >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Eigen::VectorXd >::difference_type >(val3);
  try {
    std_vector_Sl_Eigen_VectorXd_Sg__setbrace(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_append(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  std::vector< Eigen::VectorXd >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorVectorXd_append",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_append" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Eigen__VectorXd,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorVectorXd_append" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::value_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorVectorXd_append" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::value_type""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector< Eigen::VectorXd >::value_type * >(argp2));
    }
  }
  std_vector_Sl_Eigen_VectorXd_Sg__append(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_vectorVectorXd__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  std::vector< Eigen::VectorXd > *result = 0 ;
  
  if (!SWIG_check_num_args("new_vectorVectorXd",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (std::vector< Eigen::VectorXd > *)new std::vector< Eigen::VectorXd >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_vectorVectorXd__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< Eigen::VectorXd > *result = 0 ;
  
  if (!SWIG_check_num_args("new_vectorVectorXd",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::vector< Eigen::VectorXd,std::allocator< Eigen::VectorXd > > *ptr = (std::vector< Eigen::VectorXd,std::allocator< Eigen::VectorXd > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorVectorXd" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorVectorXd" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Eigen::VectorXd > *)new std::vector< Eigen::VectorXd >((std::vector< Eigen::VectorXd > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_vectorVectorXd_empty(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("vectorVectorXd_empty",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_empty" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  result = (bool)((std::vector< Eigen::VectorXd > const *)arg1)->empty();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_size(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::VectorXd >::size_type result;
  
  if (!SWIG_check_num_args("vectorVectorXd_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_size" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  result = ((std::vector< Eigen::VectorXd > const *)arg1)->size();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_swap(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  std::vector< Eigen::VectorXd > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorVectorXd_swap",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_swap" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorVectorXd_swap" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorVectorXd_swap" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp2);
  (arg1)->swap(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_begin(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::VectorXd >::iterator result;
  
  if (!SWIG_check_num_args("vectorVectorXd_begin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_begin" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  result = (arg1)->begin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Eigen::VectorXd >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_end(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::VectorXd >::iterator result;
  
  if (!SWIG_check_num_args("vectorVectorXd_end",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_end" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  result = (arg1)->end();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Eigen::VectorXd >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_rbegin(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::VectorXd >::reverse_iterator result;
  
  if (!SWIG_check_num_args("vectorVectorXd_rbegin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_rbegin" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  result = (arg1)->rbegin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Eigen::VectorXd >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_rend(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::VectorXd >::reverse_iterator result;
  
  if (!SWIG_check_num_args("vectorVectorXd_rend",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_rend" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  result = (arg1)->rend();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Eigen::VectorXd >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_clear(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorVectorXd_clear",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_clear" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  (arg1)->clear();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_get_allocator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< std::allocator< Eigen::VectorXd > > result;
  
  if (!SWIG_check_num_args("vectorVectorXd_get_allocator",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_get_allocator" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  result = ((std::vector< Eigen::VectorXd > const *)arg1)->get_allocator();
  _out = SWIG_NewPointerObj((new std::vector< Eigen::VectorXd >::allocator_type(static_cast< const std::vector< Eigen::VectorXd >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_Eigen__VectorXd_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_vectorVectorXd__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::VectorXd > *result = 0 ;
  
  if (!SWIG_check_num_args("new_vectorVectorXd",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorVectorXd" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Eigen::VectorXd >::size_type >(val1);
  result = (std::vector< Eigen::VectorXd > *)new std::vector< Eigen::VectorXd >(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_pop_back(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorVectorXd_pop_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_pop_back" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  (arg1)->pop_back();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  std::vector< Eigen::VectorXd >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorVectorXd_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_resize" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorVectorXd_resize" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Eigen::VectorXd >::size_type >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_erase__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  std::vector< Eigen::VectorXd >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  mxArray * _out;
  std::vector< Eigen::VectorXd >::iterator result;
  
  if (!SWIG_check_num_args("vectorVectorXd_erase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_erase" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorVectorXd_erase" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< Eigen::VectorXd >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::VectorXd >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorVectorXd_erase" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::iterator""'");
    }
  }
  result = std_vector_Sl_Eigen_VectorXd_Sg__erase__SWIG_0(arg1,arg2);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Eigen::VectorXd >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_erase__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  std::vector< Eigen::VectorXd >::iterator arg2 ;
  std::vector< Eigen::VectorXd >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  swig::MatlabSwigIterator *iter3 = 0 ;
  int res3 ;
  mxArray * _out;
  std::vector< Eigen::VectorXd >::iterator result;
  
  if (!SWIG_check_num_args("vectorVectorXd_erase",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_erase" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorVectorXd_erase" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< Eigen::VectorXd >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::VectorXd >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorVectorXd_erase" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter3), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorVectorXd_erase" "', argument " "3"" of type '" "std::vector< Eigen::VectorXd >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< Eigen::VectorXd >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::VectorXd >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorVectorXd_erase" "', argument " "3"" of type '" "std::vector< Eigen::VectorXd >::iterator""'");
    }
  }
  result = std_vector_Sl_Eigen_VectorXd_Sg__erase__SWIG_1(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Eigen::VectorXd >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_erase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< Eigen::VectorXd,std::allocator< Eigen::VectorXd > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::VectorXd >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectorVectorXd_erase__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< Eigen::VectorXd,std::allocator< Eigen::VectorXd > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::VectorXd >::iterator > *>(iter) != 0));
      if (_v) {
        swig::MatlabSwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::VectorXd >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectorVectorXd_erase__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'vectorVectorXd_erase'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Eigen::VectorXd >::erase(std::vector< Eigen::VectorXd >::iterator)\n"
    "    std::vector< Eigen::VectorXd >::erase(std::vector< Eigen::VectorXd >::iterator,std::vector< Eigen::VectorXd >::iterator)\n");
  return 1;
}


int _wrap_new_vectorVectorXd__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd >::size_type arg1 ;
  std::vector< Eigen::VectorXd >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  std::vector< Eigen::VectorXd > *result = 0 ;
  
  if (!SWIG_check_num_args("new_vectorVectorXd",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorVectorXd" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Eigen::VectorXd >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Eigen__VectorXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorVectorXd" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorVectorXd" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Eigen::VectorXd >::value_type * >(argp2);
  result = (std::vector< Eigen::VectorXd > *)new std::vector< Eigen::VectorXd >(arg1,(std::vector< Eigen::VectorXd >::value_type const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_vectorVectorXd(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_vectorVectorXd__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectorVectorXd__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< Eigen::VectorXd,std::allocator< Eigen::VectorXd > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectorVectorXd__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Eigen__VectorXd, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vectorVectorXd__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_vectorVectorXd'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Eigen::VectorXd >::vector()\n"
    "    std::vector< Eigen::VectorXd >::vector(std::vector< Eigen::VectorXd > const &)\n"
    "    std::vector< Eigen::VectorXd >::vector(std::vector< Eigen::VectorXd >::size_type)\n"
    "    std::vector< Eigen::VectorXd >::vector(std::vector< Eigen::VectorXd >::size_type,std::vector< Eigen::VectorXd >::value_type const &)\n");
  return 1;
}


int _wrap_vectorVectorXd_push_back(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  std::vector< Eigen::VectorXd >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorVectorXd_push_back",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_push_back" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Eigen__VectorXd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorVectorXd_push_back" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorVectorXd_push_back" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Eigen::VectorXd >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Eigen::VectorXd >::value_type const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_front(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::VectorXd >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("vectorVectorXd_front",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_front" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  result = (std::vector< Eigen::VectorXd >::value_type *) &((std::vector< Eigen::VectorXd > const *)arg1)->front();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__VectorXd, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_back(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::VectorXd >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("vectorVectorXd_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_back" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  result = (std::vector< Eigen::VectorXd >::value_type *) &((std::vector< Eigen::VectorXd > const *)arg1)->back();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Eigen__VectorXd, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_assign(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  std::vector< Eigen::VectorXd >::size_type arg2 ;
  std::vector< Eigen::VectorXd >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorVectorXd_assign",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_assign" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorVectorXd_assign" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Eigen::VectorXd >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Eigen__VectorXd,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorVectorXd_assign" "', argument " "3"" of type '" "std::vector< Eigen::VectorXd >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorVectorXd_assign" "', argument " "3"" of type '" "std::vector< Eigen::VectorXd >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Eigen::VectorXd >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Eigen::VectorXd >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  std::vector< Eigen::VectorXd >::size_type arg2 ;
  std::vector< Eigen::VectorXd >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorVectorXd_resize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_resize" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorVectorXd_resize" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Eigen::VectorXd >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Eigen__VectorXd,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorVectorXd_resize" "', argument " "3"" of type '" "std::vector< Eigen::VectorXd >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorVectorXd_resize" "', argument " "3"" of type '" "std::vector< Eigen::VectorXd >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Eigen::VectorXd >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Eigen::VectorXd >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< Eigen::VectorXd,std::allocator< Eigen::VectorXd > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorVectorXd_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< Eigen::VectorXd,std::allocator< Eigen::VectorXd > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Eigen__VectorXd, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorVectorXd_resize__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'vectorVectorXd_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Eigen::VectorXd >::resize(std::vector< Eigen::VectorXd >::size_type)\n"
    "    std::vector< Eigen::VectorXd >::resize(std::vector< Eigen::VectorXd >::size_type,std::vector< Eigen::VectorXd >::value_type const &)\n");
  return 1;
}


int _wrap_vectorVectorXd_insert__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  std::vector< Eigen::VectorXd >::iterator arg2 ;
  std::vector< Eigen::VectorXd >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  std::vector< Eigen::VectorXd >::iterator result;
  
  if (!SWIG_check_num_args("vectorVectorXd_insert",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_insert" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorVectorXd_insert" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< Eigen::VectorXd >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::VectorXd >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorVectorXd_insert" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Eigen__VectorXd,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorVectorXd_insert" "', argument " "3"" of type '" "std::vector< Eigen::VectorXd >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorVectorXd_insert" "', argument " "3"" of type '" "std::vector< Eigen::VectorXd >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Eigen::VectorXd >::value_type * >(argp3);
  result = std_vector_Sl_Eigen_VectorXd_Sg__insert__SWIG_0(arg1,arg2,(Eigen::VectorXd const &)*arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Eigen::VectorXd >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_insert__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  std::vector< Eigen::VectorXd >::iterator arg2 ;
  std::vector< Eigen::VectorXd >::size_type arg3 ;
  std::vector< Eigen::VectorXd >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorVectorXd_insert",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_insert" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorVectorXd_insert" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< Eigen::VectorXd >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::VectorXd >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorVectorXd_insert" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorVectorXd_insert" "', argument " "3"" of type '" "std::vector< Eigen::VectorXd >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Eigen::VectorXd >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_Eigen__VectorXd,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorVectorXd_insert" "', argument " "4"" of type '" "std::vector< Eigen::VectorXd >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorVectorXd_insert" "', argument " "4"" of type '" "std::vector< Eigen::VectorXd >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Eigen::VectorXd >::value_type * >(argp4);
  std_vector_Sl_Eigen_VectorXd_Sg__insert__SWIG_1(arg1,arg2,arg3,(Eigen::VectorXd const &)*arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_insert(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< Eigen::VectorXd,std::allocator< Eigen::VectorXd > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::VectorXd >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Eigen__VectorXd, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorVectorXd_insert__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< Eigen::VectorXd,std::allocator< Eigen::VectorXd > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< Eigen::VectorXd >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Eigen__VectorXd, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorVectorXd_insert__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'vectorVectorXd_insert'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Eigen::VectorXd >::insert(std::vector< Eigen::VectorXd >::iterator,std::vector< Eigen::VectorXd >::value_type const &)\n"
    "    std::vector< Eigen::VectorXd >::insert(std::vector< Eigen::VectorXd >::iterator,std::vector< Eigen::VectorXd >::size_type,std::vector< Eigen::VectorXd >::value_type const &)\n");
  return 1;
}


int _wrap_vectorVectorXd_reserve(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  std::vector< Eigen::VectorXd >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("vectorVectorXd_reserve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_reserve" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorVectorXd_reserve" "', argument " "2"" of type '" "std::vector< Eigen::VectorXd >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Eigen::VectorXd >::size_type >(val2);
  (arg1)->reserve(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_vectorVectorXd_capacity(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< Eigen::VectorXd >::size_type result;
  
  if (!SWIG_check_num_args("vectorVectorXd_capacity",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorVectorXd_capacity" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  result = ((std::vector< Eigen::VectorXd > const *)arg1)->capacity();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_vectorVectorXd(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< Eigen::VectorXd > *arg1 = (std::vector< Eigen::VectorXd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_vectorVectorXd",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorVectorXd" "', argument " "1"" of type '" "std::vector< Eigen::VectorXd > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Eigen::VectorXd > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Clock(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::Clock *result = 0 ;
  
  if (!SWIG_check_num_args("new_Clock",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::Clock *)new cr::Clock();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__Clock, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Clock(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Clock *arg1 = (cr::Clock *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Clock",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Clock, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Clock" "', argument " "1"" of type '" "cr::Clock *""'"); 
  }
  arg1 = reinterpret_cast< cr::Clock * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Clock_startTimer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Clock *arg1 = (cr::Clock *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Clock_startTimer",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Clock, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clock_startTimer" "', argument " "1"" of type '" "cr::Clock *""'"); 
  }
  arg1 = reinterpret_cast< cr::Clock * >(argp1);
  (arg1)->startTimer();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Clock_getElapsedTime(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Clock *arg1 = (cr::Clock *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Clock_getElapsedTime",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Clock, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clock_getElapsedTime" "', argument " "1"" of type '" "cr::Clock *""'"); 
  }
  arg1 = reinterpret_cast< cr::Clock * >(argp1);
  result = (double)(arg1)->getElapsedTime();
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Clock_sleep(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Clock *arg1 = (cr::Clock *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Clock_sleep",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Clock, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clock_sleep" "', argument " "1"" of type '" "cr::Clock *""'"); 
  }
  arg1 = reinterpret_cast< cr::Clock * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Clock_sleep" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->sleep(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Conversion_deg2rad(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Conversion_deg2rad",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Conversion_deg2rad" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)cr::Conversion::deg2rad(arg1);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Conversion_rad2deg(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Conversion_rad2deg",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Conversion_rad2deg" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)cr::Conversion::rad2deg(arg1);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Conversion_wrapToPi__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Conversion_wrapToPi",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Conversion_wrapToPi" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)cr::Conversion::wrapToPi(arg1);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Conversion_wrapToPi__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Eigen::VectorXd arg1 ;
  Eigen::VectorXd temp1 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("Conversion_wrapToPi",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp1, argv[0]))
    SWIG_fail;
    arg1 = temp1;
  }
  result = cr::Conversion::wrapToPi(arg1);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Conversion_wrapToPi(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Conversion_wrapToPi__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = mxIsNumeric(argv[0]);
    }
    if (_v) {
      return _wrap_Conversion_wrapToPi__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Conversion_wrapToPi'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::Conversion::wrapToPi(double)\n"
    "    cr::Conversion::wrapToPi(Eigen::VectorXd)\n");
  return 1;
}


int _wrap_new_Conversion(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::Conversion *result = 0 ;
  
  if (!SWIG_check_num_args("new_Conversion",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::Conversion *)new cr::Conversion();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__Conversion, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Conversion(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Conversion *arg1 = (cr::Conversion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Conversion",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Conversion, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Conversion" "', argument " "1"" of type '" "cr::Conversion *""'"); 
  }
  arg1 = reinterpret_cast< cr::Conversion * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Integration(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::Integration *result = 0 ;
  
  if (!SWIG_check_num_args("new_Integration",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::Integration *)new cr::Integration();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__Integration, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Integration(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Integration *arg1 = (cr::Integration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Integration",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Integration, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Integration" "', argument " "1"" of type '" "cr::Integration *""'"); 
  }
  arg1 = reinterpret_cast< cr::Integration * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix_reducedVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Eigen::VectorXd arg1 ;
  Eigen::VectorXi arg2 ;
  Eigen::VectorXd temp1 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("Matrix_reducedVector",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp1, argv[0]))
    SWIG_fail;
    arg1 = temp1;
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Eigen__VectorXi,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix_reducedVector" "', argument " "2"" of type '" "Eigen::VectorXi""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix_reducedVector" "', argument " "2"" of type '" "Eigen::VectorXi""'");
    } else {
      arg2 = *(reinterpret_cast< Eigen::VectorXi * >(argp2));
    }
  }
  result = cr::Matrix::reducedVector(arg1,arg2);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix_reducedMatrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Eigen::MatrixXd arg1 ;
  Eigen::VectorXi arg2 ;
  Eigen::VectorXi arg3 ;
  Eigen::MatrixXd temp1 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  Eigen::MatrixXd result;
  
  if (!SWIG_check_num_args("Matrix_reducedMatrix",argc,3,3,0)) {
    SWIG_fail;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp1, argv[0]))
    SWIG_fail;
    arg1 = temp1;
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Eigen__VectorXi,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix_reducedMatrix" "', argument " "2"" of type '" "Eigen::VectorXi""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix_reducedMatrix" "', argument " "2"" of type '" "Eigen::VectorXi""'");
    } else {
      arg2 = *(reinterpret_cast< Eigen::VectorXi * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Eigen__VectorXi,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Matrix_reducedMatrix" "', argument " "3"" of type '" "Eigen::VectorXi""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix_reducedMatrix" "', argument " "3"" of type '" "Eigen::VectorXi""'");
    } else {
      arg3 = *(reinterpret_cast< Eigen::VectorXi * >(argp3));
    }
  }
  result = cr::Matrix::reducedMatrix(arg1,arg2,arg3);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::MatrixXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix_svd(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Eigen::MatrixXd arg1 ;
  double arg2 ;
  Eigen::MatrixXd *arg3 = 0 ;
  Eigen::VectorXd *arg4 = 0 ;
  Eigen::MatrixXd *arg5 = 0 ;
  Eigen::MatrixXd temp1 ;
  double val2 ;
  int ecode2 = 0 ;
  Eigen::MatrixXd temp3 ;
  Eigen::VectorXd temp4 ;
  Eigen::MatrixXd temp5 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("Matrix_svd",argc,5,5,0)) {
    SWIG_fail;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp1, argv[0]))
    SWIG_fail;
    arg1 = temp1;
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_svd" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp3, argv[2]))
    SWIG_fail;
    
    arg3 = &temp3;
  }
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp4, argv[3]))
    SWIG_fail;
    
    arg4 = &temp4;
  }
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp5, argv[4]))
    SWIG_fail;
    
    arg5 = &temp5;
  }
  result = (cr::Result)cr::Matrix::svd(arg1,arg2,*arg3,*arg4,*arg5);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::MatrixXd >(argv[2], arg3))
    SWIG_fail;
  }
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::VectorXd >(argv[3], arg4))
    SWIG_fail;
  }
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::MatrixXd >(argv[4], arg5))
    SWIG_fail;
  }
  return 0;
fail:
  return 1;
}


int _wrap_Matrix_svdInverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Eigen::MatrixXd arg1 ;
  double arg2 ;
  Eigen::MatrixXd *arg3 = 0 ;
  Eigen::MatrixXd temp1 ;
  double val2 ;
  int ecode2 = 0 ;
  Eigen::MatrixXd temp3 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("Matrix_svdInverse",argc,3,3,0)) {
    SWIG_fail;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp1, argv[0]))
    SWIG_fail;
    arg1 = temp1;
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_svdInverse" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp3, argv[2]))
    SWIG_fail;
    
    arg3 = &temp3;
  }
  result = (cr::Result)cr::Matrix::svdInverse(arg1,arg2,*arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::MatrixXd >(argv[2], arg3))
    SWIG_fail;
  }
  return 0;
fail:
  return 1;
}


int _wrap_Matrix_rotAboutX(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  Eigen::Matrix3d result;
  
  if (!SWIG_check_num_args("Matrix_rotAboutX",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix_rotAboutX" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = cr::Matrix::rotAboutX(arg1);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::Matrix3d >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix_rotAboutY(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  Eigen::Matrix3d result;
  
  if (!SWIG_check_num_args("Matrix_rotAboutY",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix_rotAboutY" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = cr::Matrix::rotAboutY(arg1);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::Matrix3d >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix_rotAboutZ(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  Eigen::Matrix3d result;
  
  if (!SWIG_check_num_args("Matrix_rotAboutZ",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix_rotAboutZ" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = cr::Matrix::rotAboutZ(arg1);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::Matrix3d >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix_normL1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Eigen::VectorXd arg1 ;
  Eigen::VectorXd temp1 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Matrix_normL1",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp1, argv[0]))
    SWIG_fail;
    arg1 = temp1;
  }
  result = (double)cr::Matrix::normL1(arg1);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix_normL2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Eigen::VectorXd arg1 ;
  Eigen::VectorXd temp1 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Matrix_normL2",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp1, argv[0]))
    SWIG_fail;
    arg1 = temp1;
  }
  result = (double)cr::Matrix::normL2(arg1);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix_normLinf(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Eigen::VectorXd arg1 ;
  Eigen::VectorXd temp1 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Matrix_normLinf",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp1, argv[0]))
    SWIG_fail;
    arg1 = temp1;
  }
  result = (double)cr::Matrix::normLinf(arg1);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::Matrix *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::Matrix *)new cr::Matrix();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__Matrix, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Matrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Matrix *arg1 = (cr::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Matrix",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Matrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matrix" "', argument " "1"" of type '" "cr::Matrix *""'"); 
  }
  arg1 = reinterpret_cast< cr::Matrix * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Frame__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::Frame *result = 0 ;
  
  if (!SWIG_check_num_args("new_Frame",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::Frame *)new cr::Frame();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__Frame, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Frame__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Eigen::Matrix3d arg1 ;
  Eigen::Vector3d arg2 ;
  Eigen::Matrix3d temp1 ;
  Eigen::Vector3d temp2 ;
  mxArray * _out;
  cr::Frame *result = 0 ;
  
  if (!SWIG_check_num_args("new_Frame",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Matrix3d >(&temp1, argv[0]))
    SWIG_fail;
    arg1 = temp1;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Vector3d >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  result = (cr::Frame *)new cr::Frame(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__Frame, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Frame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Frame__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 2) {
    int _v;
    {
      _v = mxIsNumeric(argv[0]);
    }
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        return _wrap_new_Frame__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Frame'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::Frame::Frame()\n"
    "    cr::Frame::Frame(Eigen::Matrix3d,Eigen::Vector3d)\n");
  return 1;
}


int _wrap_Frame_setFreeValue(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("Frame_setFreeValue",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frame_setFreeValue" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Frame_setFreeValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (cr::Result)(arg1)->setFreeValue(arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Frame_getFreeValue(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Frame_getFreeValue",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frame_getFreeValue" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  result = (double)(arg1)->getFreeValue();
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Frame_setRotation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  Eigen::Matrix3d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Matrix3d temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Frame_setRotation",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frame_setRotation" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Matrix3d >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  (arg1)->setRotation(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Frame_setTranslation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  Eigen::Vector3d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Vector3d temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Frame_setTranslation",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frame_setTranslation" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Vector3d >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  (arg1)->setTranslation(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Frame_setRotationAndTranslation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  Eigen::Matrix3d arg2 ;
  Eigen::Vector3d arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Matrix3d temp2 ;
  Eigen::Vector3d temp3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Frame_setRotationAndTranslation",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frame_setRotationAndTranslation" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Matrix3d >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Vector3d >(&temp3, argv[2]))
    SWIG_fail;
    arg3 = temp3;
  }
  (arg1)->setRotationAndTranslation(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Frame_getRotationAndTranslation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  Eigen::Matrix3d *arg2 = 0 ;
  Eigen::Vector3d *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Matrix3d temp2 ;
  Eigen::Vector3d temp3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Frame_getRotationAndTranslation",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frame_getRotationAndTranslation" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Matrix3d >(&temp2, argv[1]))
    SWIG_fail;
    
    arg2 = &temp2;
  }
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Vector3d >(&temp3, argv[2]))
    SWIG_fail;
    
    arg3 = &temp3;
  }
  (arg1)->getRotationAndTranslation(*arg2,*arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::Matrix3d >(argv[1], arg2))
    SWIG_fail;
  }
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::Vector3d >(argv[2], arg3))
    SWIG_fail;
  }
  return 0;
fail:
  return 1;
}


int _wrap_Frame_getTransformToParent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::Matrix4d result;
  
  if (!SWIG_check_num_args("Frame_getTransformToParent",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frame_getTransformToParent" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  result = (arg1)->getTransformToParent();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::Matrix4d >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Frame_getTransformToChild(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::Matrix4d result;
  
  if (!SWIG_check_num_args("Frame_getTransformToChild",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frame_getTransformToChild" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  result = (arg1)->getTransformToChild();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::Matrix4d >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Frame_transformToParent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  Eigen::Vector3d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Vector3d temp2 ;
  mxArray * _out;
  Eigen::Vector3d result;
  
  if (!SWIG_check_num_args("Frame_transformToParent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frame_transformToParent" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Vector3d >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  result = (arg1)->transformToParent(arg2);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::Vector3d >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Frame_transformToChild(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  Eigen::Vector3d arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Vector3d temp2 ;
  mxArray * _out;
  Eigen::Vector3d result;
  
  if (!SWIG_check_num_args("Frame_transformToChild",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frame_transformToChild" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Vector3d >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  result = (arg1)->transformToChild(arg2);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::Vector3d >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Frame_isDriven(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Frame_isDriven",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frame_isDriven" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  result = (bool)(arg1)->isDriven();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Frame_getTranslation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::Vector3d result;
  
  if (!SWIG_check_num_args("Frame_getTranslation",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frame_getTranslation" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  result = (arg1)->getTranslation();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::Vector3d >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Frame_getRotation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::Matrix3d result;
  
  if (!SWIG_check_num_args("Frame_getRotation",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frame_getRotation" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  result = (arg1)->getRotation();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::Matrix3d >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Frame_getOrientation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  cr::EulerMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  Eigen::Vector3d result;
  
  if (!SWIG_check_num_args("Frame_getOrientation",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frame_getOrientation" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Frame_getOrientation" "', argument " "2"" of type '" "cr::EulerMode""'");
  } 
  arg2 = static_cast< cr::EulerMode >(val2);
  result = (arg1)->getOrientation(arg2);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::Vector3d >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Frame_getPose__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  cr::EulerMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  Eigen::Matrix< double,6,1 > result;
  
  if (!SWIG_check_num_args("Frame_getPose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frame_getPose" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Frame_getPose" "', argument " "2"" of type '" "cr::EulerMode""'");
  } 
  arg2 = static_cast< cr::EulerMode >(val2);
  result = (arg1)->getPose(arg2);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::Matrix<double,6,1> >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Frame_getPose__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  cr::EulerMode arg2 ;
  Eigen::Matrix< bool,6,1 > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("Frame_getPose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Frame_getPose" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Frame_getPose" "', argument " "2"" of type '" "cr::EulerMode""'");
  } 
  arg2 = static_cast< cr::EulerMode >(val2);
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Frame_getPose" "', argument " "3"" of type '" "Eigen::Matrix< bool,6,1 >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Frame_getPose" "', argument " "3"" of type '" "Eigen::Matrix< bool,6,1 >""'");
    } else {
      arg3 = *(reinterpret_cast< Eigen::Matrix< bool,6,1 > * >(argp3));
    }
  }
  result = (arg1)->getPose(arg2,arg3);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Frame_getPose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__Frame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Frame_getPose__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__Frame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Frame_getPose__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Frame_getPose'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::Frame::getPose(cr::EulerMode)\n"
    "    cr::Frame::getPose(cr::EulerMode,Eigen::Matrix< bool,6,1 >)\n");
  return 1;
}


int _wrap_delete_Frame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Frame",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Frame" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FrameEuler__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  cr::EulerMode arg7 ;
  cr::EulerFreeVariable arg8 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  mxArray * _out;
  cr::FrameEuler *result = 0 ;
  
  if (!SWIG_check_num_args("new_FrameEuler",argc,8,8,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FrameEuler" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FrameEuler" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FrameEuler" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FrameEuler" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_FrameEuler" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_FrameEuler" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_int(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_FrameEuler" "', argument " "7"" of type '" "cr::EulerMode""'");
  } 
  arg7 = static_cast< cr::EulerMode >(val7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_FrameEuler" "', argument " "8"" of type '" "cr::EulerFreeVariable""'");
  } 
  arg8 = static_cast< cr::EulerFreeVariable >(val8);
  result = (cr::FrameEuler *)new cr::FrameEuler(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__FrameEuler, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FrameEuler__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::FrameEuler *result = 0 ;
  
  if (!SWIG_check_num_args("new_FrameEuler",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::FrameEuler *)new cr::FrameEuler();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__FrameEuler, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FrameEuler(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_FrameEuler__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 8) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_FrameEuler__SWIG_0(resc,resv,argc,argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_FrameEuler'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::FrameEuler::FrameEuler(double,double,double,double,double,double,cr::EulerMode,cr::EulerFreeVariable)\n"
    "    cr::FrameEuler::FrameEuler()\n");
  return 1;
}


int _wrap_FrameEuler_setFreeValue(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameEuler *arg1 = (cr::FrameEuler *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("FrameEuler_setFreeValue",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameEuler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameEuler_setFreeValue" "', argument " "1"" of type '" "cr::FrameEuler *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameEuler * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameEuler_setFreeValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (cr::Result)(arg1)->setFreeValue(arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameEuler_getFreeValue(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameEuler *arg1 = (cr::FrameEuler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("FrameEuler_getFreeValue",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameEuler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameEuler_getFreeValue" "', argument " "1"" of type '" "cr::FrameEuler *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameEuler * >(argp1);
  result = (double)(arg1)->getFreeValue();
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameEuler_setFreeVariable(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameEuler *arg1 = (cr::FrameEuler *) 0 ;
  cr::EulerFreeVariable arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FrameEuler_setFreeVariable",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameEuler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameEuler_setFreeVariable" "', argument " "1"" of type '" "cr::FrameEuler *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameEuler * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameEuler_setFreeVariable" "', argument " "2"" of type '" "cr::EulerFreeVariable""'");
  } 
  arg2 = static_cast< cr::EulerFreeVariable >(val2);
  (arg1)->setFreeVariable(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameEuler_getFreeVariable(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameEuler *arg1 = (cr::FrameEuler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  cr::EulerFreeVariable result;
  
  if (!SWIG_check_num_args("FrameEuler_getFreeVariable",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameEuler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameEuler_getFreeVariable" "', argument " "1"" of type '" "cr::FrameEuler *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameEuler * >(argp1);
  result = (cr::EulerFreeVariable)(arg1)->getFreeVariable();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameEuler_setMode(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameEuler *arg1 = (cr::FrameEuler *) 0 ;
  cr::EulerMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FrameEuler_setMode",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameEuler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameEuler_setMode" "', argument " "1"" of type '" "cr::FrameEuler *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameEuler * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameEuler_setMode" "', argument " "2"" of type '" "cr::EulerMode""'");
  } 
  arg2 = static_cast< cr::EulerMode >(val2);
  (arg1)->setMode(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameEuler_getMode(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameEuler *arg1 = (cr::FrameEuler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  cr::EulerMode result;
  
  if (!SWIG_check_num_args("FrameEuler_getMode",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameEuler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameEuler_getMode" "', argument " "1"" of type '" "cr::FrameEuler *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameEuler * >(argp1);
  result = (cr::EulerMode)(arg1)->getMode();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameEuler_setPosition(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameEuler *arg1 = (cr::FrameEuler *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FrameEuler_setPosition",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameEuler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameEuler_setPosition" "', argument " "1"" of type '" "cr::FrameEuler *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameEuler * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameEuler_setPosition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FrameEuler_setPosition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FrameEuler_setPosition" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->setPosition(arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameEuler_getPosition(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameEuler *arg1 = (cr::FrameEuler *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FrameEuler_getPosition",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameEuler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameEuler_getPosition" "', argument " "1"" of type '" "cr::FrameEuler *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameEuler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FrameEuler_getPosition" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameEuler_getPosition" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FrameEuler_getPosition" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameEuler_getPosition" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FrameEuler_getPosition" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameEuler_getPosition" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  (arg1)->getPosition(*arg2,*arg3,*arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameEuler_setOrientation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameEuler *arg1 = (cr::FrameEuler *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FrameEuler_setOrientation",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameEuler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameEuler_setOrientation" "', argument " "1"" of type '" "cr::FrameEuler *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameEuler * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameEuler_setOrientation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FrameEuler_setOrientation" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FrameEuler_setOrientation" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->setOrientation(arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameEuler_getOrientation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameEuler *arg1 = (cr::FrameEuler *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FrameEuler_getOrientation",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameEuler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameEuler_getOrientation" "', argument " "1"" of type '" "cr::FrameEuler *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameEuler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FrameEuler_getOrientation" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameEuler_getOrientation" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FrameEuler_getOrientation" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameEuler_getOrientation" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FrameEuler_getOrientation" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameEuler_getOrientation" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  (arg1)->getOrientation(*arg2,*arg3,*arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameEuler_setPositionAndOrientation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameEuler *arg1 = (cr::FrameEuler *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FrameEuler_setPositionAndOrientation",argc,7,7,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameEuler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameEuler_setPositionAndOrientation" "', argument " "1"" of type '" "cr::FrameEuler *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameEuler * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameEuler_setPositionAndOrientation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FrameEuler_setPositionAndOrientation" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FrameEuler_setPositionAndOrientation" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FrameEuler_setPositionAndOrientation" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FrameEuler_setPositionAndOrientation" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "FrameEuler_setPositionAndOrientation" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->setPositionAndOrientation(arg2,arg3,arg4,arg5,arg6,arg7);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameEuler_getPositionAndOrientation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameEuler *arg1 = (cr::FrameEuler *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FrameEuler_getPositionAndOrientation",argc,7,7,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameEuler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameEuler_getPositionAndOrientation" "', argument " "1"" of type '" "cr::FrameEuler *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameEuler * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FrameEuler_getPositionAndOrientation" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameEuler_getPositionAndOrientation" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FrameEuler_getPositionAndOrientation" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameEuler_getPositionAndOrientation" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FrameEuler_getPositionAndOrientation" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameEuler_getPositionAndOrientation" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FrameEuler_getPositionAndOrientation" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameEuler_getPositionAndOrientation" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "FrameEuler_getPositionAndOrientation" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameEuler_getPositionAndOrientation" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "FrameEuler_getPositionAndOrientation" "', argument " "7"" of type '" "double &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameEuler_getPositionAndOrientation" "', argument " "7"" of type '" "double &""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  (arg1)->getPositionAndOrientation(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameEuler_setRotationAndTranslation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameEuler *arg1 = (cr::FrameEuler *) 0 ;
  Eigen::Matrix3d arg2 ;
  Eigen::Vector3d arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Matrix3d temp2 ;
  Eigen::Vector3d temp3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FrameEuler_setRotationAndTranslation",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameEuler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameEuler_setRotationAndTranslation" "', argument " "1"" of type '" "cr::FrameEuler *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameEuler * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Matrix3d >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Vector3d >(&temp3, argv[2]))
    SWIG_fail;
    arg3 = temp3;
  }
  (arg1)->setRotationAndTranslation(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameEuler_isDriven(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameEuler *arg1 = (cr::FrameEuler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("FrameEuler_isDriven",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameEuler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameEuler_isDriven" "', argument " "1"" of type '" "cr::FrameEuler *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameEuler * >(argp1);
  result = (bool)(arg1)->isDriven();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_FrameEuler(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameEuler *arg1 = (cr::FrameEuler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_FrameEuler",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameEuler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FrameEuler" "', argument " "1"" of type '" "cr::FrameEuler *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameEuler * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FrameDh__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  cr::DhMode arg5 ;
  cr::DhFreeVariable arg6 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  mxArray * _out;
  cr::FrameDh *result = 0 ;
  
  if (!SWIG_check_num_args("new_FrameDh",argc,6,6,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FrameDh" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FrameDh" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FrameDh" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FrameDh" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_FrameDh" "', argument " "5"" of type '" "cr::DhMode""'");
  } 
  arg5 = static_cast< cr::DhMode >(val5);
  ecode6 = SWIG_AsVal_int(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_FrameDh" "', argument " "6"" of type '" "cr::DhFreeVariable""'");
  } 
  arg6 = static_cast< cr::DhFreeVariable >(val6);
  result = (cr::FrameDh *)new cr::FrameDh(arg1,arg2,arg3,arg4,arg5,arg6);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__FrameDh, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FrameDh__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::FrameDh *result = 0 ;
  
  if (!SWIG_check_num_args("new_FrameDh",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::FrameDh *)new cr::FrameDh();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__FrameDh, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FrameDh(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_FrameDh__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_FrameDh__SWIG_0(resc,resv,argc,argv);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_FrameDh'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::FrameDh::FrameDh(double,double,double,double,cr::DhMode,cr::DhFreeVariable)\n"
    "    cr::FrameDh::FrameDh()\n");
  return 1;
}


int _wrap_FrameDh_setFreeValue(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameDh *arg1 = (cr::FrameDh *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("FrameDh_setFreeValue",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameDh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameDh_setFreeValue" "', argument " "1"" of type '" "cr::FrameDh *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameDh * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameDh_setFreeValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (cr::Result)(arg1)->setFreeValue(arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameDh_getFreeValue(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameDh *arg1 = (cr::FrameDh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("FrameDh_getFreeValue",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameDh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameDh_getFreeValue" "', argument " "1"" of type '" "cr::FrameDh *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameDh * >(argp1);
  result = (double)(arg1)->getFreeValue();
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameDh_setFreeVariable(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameDh *arg1 = (cr::FrameDh *) 0 ;
  cr::DhFreeVariable arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FrameDh_setFreeVariable",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameDh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameDh_setFreeVariable" "', argument " "1"" of type '" "cr::FrameDh *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameDh * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameDh_setFreeVariable" "', argument " "2"" of type '" "cr::DhFreeVariable""'");
  } 
  arg2 = static_cast< cr::DhFreeVariable >(val2);
  (arg1)->setFreeVariable(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameDh_getFreeVariable(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameDh *arg1 = (cr::FrameDh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  cr::DhFreeVariable result;
  
  if (!SWIG_check_num_args("FrameDh_getFreeVariable",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameDh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameDh_getFreeVariable" "', argument " "1"" of type '" "cr::FrameDh *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameDh * >(argp1);
  result = (cr::DhFreeVariable)(arg1)->getFreeVariable();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameDh_setMode(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameDh *arg1 = (cr::FrameDh *) 0 ;
  cr::DhMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FrameDh_setMode",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameDh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameDh_setMode" "', argument " "1"" of type '" "cr::FrameDh *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameDh * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameDh_setMode" "', argument " "2"" of type '" "cr::DhMode""'");
  } 
  arg2 = static_cast< cr::DhMode >(val2);
  (arg1)->setMode(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameDh_getMode(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameDh *arg1 = (cr::FrameDh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  cr::DhMode result;
  
  if (!SWIG_check_num_args("FrameDh_getMode",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameDh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameDh_getMode" "', argument " "1"" of type '" "cr::FrameDh *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameDh * >(argp1);
  result = (cr::DhMode)(arg1)->getMode();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameDh_setParameters(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameDh *arg1 = (cr::FrameDh *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FrameDh_setParameters",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameDh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameDh_setParameters" "', argument " "1"" of type '" "cr::FrameDh *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameDh * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameDh_setParameters" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FrameDh_setParameters" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FrameDh_setParameters" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FrameDh_setParameters" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->setParameters(arg2,arg3,arg4,arg5);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameDh_getParameters(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameDh *arg1 = (cr::FrameDh *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FrameDh_getParameters",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameDh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameDh_getParameters" "', argument " "1"" of type '" "cr::FrameDh *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameDh * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FrameDh_getParameters" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameDh_getParameters" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FrameDh_getParameters" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameDh_getParameters" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FrameDh_getParameters" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameDh_getParameters" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FrameDh_getParameters" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameDh_getParameters" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  (arg1)->getParameters(*arg2,*arg3,*arg4,*arg5);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameDh_isDriven(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameDh *arg1 = (cr::FrameDh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("FrameDh_isDriven",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameDh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameDh_isDriven" "', argument " "1"" of type '" "cr::FrameDh *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameDh * >(argp1);
  result = (bool)(arg1)->isDriven();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_FrameDh(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::FrameDh *arg1 = (cr::FrameDh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_FrameDh",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__FrameDh, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FrameDh" "', argument " "1"" of type '" "cr::FrameDh *""'"); 
  }
  arg1 = reinterpret_cast< cr::FrameDh * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RigidBody__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::RigidBody *result = 0 ;
  
  if (!SWIG_check_num_args("new_RigidBody",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::RigidBody *)new cr::RigidBody();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__RigidBody, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RigidBody__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::Frame *arg1 = (cr::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  cr::RigidBody *result = 0 ;
  
  if (!SWIG_check_num_args("new_RigidBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RigidBody" "', argument " "1"" of type '" "cr::Frame *""'"); 
  }
  arg1 = reinterpret_cast< cr::Frame * >(argp1);
  result = (cr::RigidBody *)new cr::RigidBody(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__RigidBody, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RigidBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_RigidBody__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__Frame, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RigidBody__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_RigidBody'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::RigidBody::RigidBody()\n"
    "    cr::RigidBody::RigidBody(cr::Frame *)\n");
  return 1;
}


int _wrap_delete_RigidBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::RigidBody *arg1 = (cr::RigidBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_RigidBody",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__RigidBody, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RigidBody" "', argument " "1"" of type '" "cr::RigidBody *""'"); 
  }
  arg1 = reinterpret_cast< cr::RigidBody * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBody_setFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::RigidBody *arg1 = (cr::RigidBody *) 0 ;
  cr::Frame *arg2 = (cr::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RigidBody_setFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__RigidBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBody_setFrame" "', argument " "1"" of type '" "cr::RigidBody *""'"); 
  }
  arg1 = reinterpret_cast< cr::RigidBody * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RigidBody_setFrame" "', argument " "2"" of type '" "cr::Frame *""'"); 
  }
  arg2 = reinterpret_cast< cr::Frame * >(argp2);
  (arg1)->setFrame(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBody_setCenterOfMass(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::RigidBody *arg1 = (cr::RigidBody *) 0 ;
  Eigen::Vector3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Vector3d temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RigidBody_setCenterOfMass",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__RigidBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBody_setCenterOfMass" "', argument " "1"" of type '" "cr::RigidBody *""'"); 
  }
  arg1 = reinterpret_cast< cr::RigidBody * >(argp1);
  {
    // In: const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Vector3d >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = &temp2;
  }
  (arg1)->setCenterOfMass((Eigen::Vector3d const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  
  return 0;
fail:
  return 1;
}


int _wrap_RigidBody_getCenterOfMass(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::RigidBody *arg1 = (cr::RigidBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::Vector3d result;
  
  if (!SWIG_check_num_args("RigidBody_getCenterOfMass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__RigidBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBody_getCenterOfMass" "', argument " "1"" of type '" "cr::RigidBody *""'"); 
  }
  arg1 = reinterpret_cast< cr::RigidBody * >(argp1);
  result = (arg1)->getCenterOfMass();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::Vector3d >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBody_setInertiaTensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::RigidBody *arg1 = (cr::RigidBody *) 0 ;
  Eigen::Matrix3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Matrix3d temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RigidBody_setInertiaTensor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__RigidBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBody_setInertiaTensor" "', argument " "1"" of type '" "cr::RigidBody *""'"); 
  }
  arg1 = reinterpret_cast< cr::RigidBody * >(argp1);
  {
    // In: const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Matrix3d >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = &temp2;
  }
  (arg1)->setInertiaTensor((Eigen::Matrix3d const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  
  return 0;
fail:
  return 1;
}


int _wrap_RigidBody_getInertiaTensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::RigidBody *arg1 = (cr::RigidBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::Matrix3d result;
  
  if (!SWIG_check_num_args("RigidBody_getInertiaTensor",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__RigidBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBody_getInertiaTensor" "', argument " "1"" of type '" "cr::RigidBody *""'"); 
  }
  arg1 = reinterpret_cast< cr::RigidBody * >(argp1);
  result = (arg1)->getInertiaTensor();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::Matrix3d >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBody_setMass(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::RigidBody *arg1 = (cr::RigidBody *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RigidBody_setMass",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__RigidBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBody_setMass" "', argument " "1"" of type '" "cr::RigidBody *""'"); 
  }
  arg1 = reinterpret_cast< cr::RigidBody * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RigidBody_setMass" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  (arg1)->setMass((double const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBody_getMass(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::RigidBody *arg1 = (cr::RigidBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("RigidBody_getMass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__RigidBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBody_getMass" "', argument " "1"" of type '" "cr::RigidBody *""'"); 
  }
  arg1 = reinterpret_cast< cr::RigidBody * >(argp1);
  result = (double)(arg1)->getMass();
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBody_getMassMatrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::RigidBody *arg1 = (cr::RigidBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::Matrix< double,6,6 > result;
  
  if (!SWIG_check_num_args("RigidBody_getMassMatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__RigidBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBody_getMassMatrix" "', argument " "1"" of type '" "cr::RigidBody *""'"); 
  }
  arg1 = reinterpret_cast< cr::RigidBody * >(argp1);
  result = (arg1)->getMassMatrix();
  _out = SWIG_NewPointerObj((new Eigen::Matrix< double,6,6 >(static_cast< const Eigen::Matrix< double,6,6 >& >(result))), SWIGTYPE_p_Eigen__MatrixT_double_6_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBody_m_frame_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::RigidBody *arg1 = (cr::RigidBody *) 0 ;
  cr::Frame *arg2 = (cr::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RigidBody_m_frame_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__RigidBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBody_m_frame_set" "', argument " "1"" of type '" "cr::RigidBody *""'"); 
  }
  arg1 = reinterpret_cast< cr::RigidBody * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_cr__Frame, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RigidBody_m_frame_set" "', argument " "2"" of type '" "cr::Frame *""'"); 
  }
  arg2 = reinterpret_cast< cr::Frame * >(argp2);
  if (arg1) (arg1)->m_frame = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBody_m_frame_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::RigidBody *arg1 = (cr::RigidBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  cr::Frame *result = 0 ;
  
  if (!SWIG_check_num_args("RigidBody_m_frame_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__RigidBody, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBody_m_frame_get" "', argument " "1"" of type '" "cr::RigidBody *""'"); 
  }
  arg1 = reinterpret_cast< cr::RigidBody * >(argp1);
  result = (cr::Frame *) ((arg1)->m_frame);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Manipulator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::world::Manipulator *result = 0 ;
  
  if (!SWIG_check_num_args("new_Manipulator",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::world::Manipulator *)new cr::world::Manipulator();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__world__Manipulator, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Manipulator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Manipulator",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Manipulator" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_create(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  SwigValueWrapper< std::shared_ptr< cr::world::Manipulator > > result;
  
  if (!SWIG_check_num_args("Manipulator_create",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = cr::world::Manipulator::create();
  _out = SWIG_NewPointerObj((new cr::world::ManipulatorPtr(static_cast< const cr::world::ManipulatorPtr& >(result))), SWIGTYPE_p_std__shared_ptrT_cr__world__Manipulator_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_setConfiguration(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Manipulator_setConfiguration",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_setConfiguration" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  (arg1)->setConfiguration(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_getConfiguration(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("Manipulator_getConfiguration",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_getConfiguration" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  result = (arg1)->getConfiguration();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_getForwardKinematics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::MatrixXd result;
  
  if (!SWIG_check_num_args("Manipulator_getForwardKinematics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_getForwardKinematics" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  result = (arg1)->getForwardKinematics();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::MatrixXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_getNumberOfLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("Manipulator_getNumberOfLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_getNumberOfLinks" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  result = (int)(arg1)->getNumberOfLinks();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_getDegreesOfFreedom(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("Manipulator_getDegreesOfFreedom",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_getDegreesOfFreedom" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  result = (int)(arg1)->getDegreesOfFreedom();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_getToolFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  unsigned int arg2 ;
  cr::Frame *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Manipulator_getToolFrame",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_getToolFrame" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_getToolFrame" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_cr__Frame,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Manipulator_getToolFrame" "', argument " "3"" of type '" "cr::Frame &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Manipulator_getToolFrame" "', argument " "3"" of type '" "cr::Frame &""'"); 
  }
  arg3 = reinterpret_cast< cr::Frame * >(argp3);
  (arg1)->getToolFrame(arg2,*arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_getLinkFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  unsigned int arg2 ;
  cr::Frame *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Manipulator_getLinkFrame",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_getLinkFrame" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_getLinkFrame" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_cr__Frame,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Manipulator_getLinkFrame" "', argument " "3"" of type '" "cr::Frame &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Manipulator_getLinkFrame" "', argument " "3"" of type '" "cr::Frame &""'"); 
  }
  arg3 = reinterpret_cast< cr::Frame * >(argp3);
  (arg1)->getLinkFrame(arg2,*arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_getToolPose__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  unsigned int arg2 ;
  cr::EulerMode arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  Eigen::Matrix< double,6,1 > result;
  
  if (!SWIG_check_num_args("Manipulator_getToolPose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_getToolPose" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_getToolPose" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Manipulator_getToolPose" "', argument " "3"" of type '" "cr::EulerMode""'");
  } 
  arg3 = static_cast< cr::EulerMode >(val3);
  result = (arg1)->getToolPose(arg2,arg3);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::Matrix<double,6,1> >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_getToolPose__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  unsigned int arg2 ;
  cr::EulerMode arg3 ;
  Eigen::Matrix< bool,6,1 > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("Manipulator_getToolPose",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_getToolPose" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_getToolPose" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Manipulator_getToolPose" "', argument " "3"" of type '" "cr::EulerMode""'");
  } 
  arg3 = static_cast< cr::EulerMode >(val3);
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Manipulator_getToolPose" "', argument " "4"" of type '" "Eigen::Matrix< bool,6,1 >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Manipulator_getToolPose" "', argument " "4"" of type '" "Eigen::Matrix< bool,6,1 >""'");
    } else {
      arg4 = *(reinterpret_cast< Eigen::Matrix< bool,6,1 > * >(argp4));
    }
  }
  result = (arg1)->getToolPose(arg2,arg3,arg4);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_getToolPose__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  unsigned int arg2 ;
  cr::EulerMode arg3 ;
  Eigen::Matrix< int,6,1 > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Eigen::Matrix< int,6,1 > temp4 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("Manipulator_getToolPose",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_getToolPose" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_getToolPose" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Manipulator_getToolPose" "', argument " "3"" of type '" "cr::EulerMode""'");
  } 
  arg3 = static_cast< cr::EulerMode >(val3);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Matrix<int,6,1> >(&temp4, argv[3]))
    SWIG_fail;
    arg4 = temp4;
  }
  result = (arg1)->getToolPose(arg2,arg3,arg4);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_getToolPose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__world__Manipulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Manipulator_getToolPose__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__world__Manipulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Manipulator_getToolPose__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__world__Manipulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = mxIsNumeric(argv[3]);
          }
          if (_v) {
            return _wrap_Manipulator_getToolPose__SWIG_2(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Manipulator_getToolPose'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::world::Manipulator::getToolPose(unsigned int,cr::EulerMode)\n"
    "    cr::world::Manipulator::getToolPose(unsigned int,cr::EulerMode,Eigen::Matrix< bool,6,1 >)\n"
    "    cr::world::Manipulator::getToolPose(unsigned int,cr::EulerMode,Eigen::Matrix< int,6,1 >)\n");
  return 1;
}


int _wrap_Manipulator_jacobian__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  unsigned int arg2 ;
  cr::EulerMode arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  Eigen::MatrixXd result;
  
  if (!SWIG_check_num_args("Manipulator_jacobian",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_jacobian" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_jacobian" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Manipulator_jacobian" "', argument " "3"" of type '" "cr::EulerMode""'");
  } 
  arg3 = static_cast< cr::EulerMode >(val3);
  result = (arg1)->jacobian(arg2,arg3);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::MatrixXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_jacobian__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  unsigned int arg2 ;
  cr::EulerMode arg3 ;
  Eigen::Matrix< bool,6,1 > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  Eigen::MatrixXd result;
  
  if (!SWIG_check_num_args("Manipulator_jacobian",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_jacobian" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_jacobian" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Manipulator_jacobian" "', argument " "3"" of type '" "cr::EulerMode""'");
  } 
  arg3 = static_cast< cr::EulerMode >(val3);
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Manipulator_jacobian" "', argument " "4"" of type '" "Eigen::Matrix< bool,6,1 >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Manipulator_jacobian" "', argument " "4"" of type '" "Eigen::Matrix< bool,6,1 >""'");
    } else {
      arg4 = *(reinterpret_cast< Eigen::Matrix< bool,6,1 > * >(argp4));
    }
  }
  result = (arg1)->jacobian(arg2,arg3,arg4);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::MatrixXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_jacobian__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  unsigned int arg2 ;
  cr::EulerMode arg3 ;
  Eigen::Matrix< int,6,1 > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Eigen::Matrix< int,6,1 > temp4 ;
  mxArray * _out;
  Eigen::MatrixXd result;
  
  if (!SWIG_check_num_args("Manipulator_jacobian",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_jacobian" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_jacobian" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Manipulator_jacobian" "', argument " "3"" of type '" "cr::EulerMode""'");
  } 
  arg3 = static_cast< cr::EulerMode >(val3);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Matrix<int,6,1> >(&temp4, argv[3]))
    SWIG_fail;
    arg4 = temp4;
  }
  result = (arg1)->jacobian(arg2,arg3,arg4);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::MatrixXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_jacobian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__world__Manipulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Manipulator_jacobian__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__world__Manipulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Manipulator_jacobian__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__world__Manipulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = mxIsNumeric(argv[3]);
          }
          if (_v) {
            return _wrap_Manipulator_jacobian__SWIG_2(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Manipulator_jacobian'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::world::Manipulator::jacobian(unsigned int,cr::EulerMode)\n"
    "    cr::world::Manipulator::jacobian(unsigned int,cr::EulerMode,Eigen::Matrix< bool,6,1 >)\n"
    "    cr::world::Manipulator::jacobian(unsigned int,cr::EulerMode,Eigen::Matrix< int,6,1 >)\n");
  return 1;
}


int _wrap_Manipulator_hessian__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  unsigned int arg2 ;
  cr::EulerMode arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  Eigen::MatrixXd result;
  
  if (!SWIG_check_num_args("Manipulator_hessian",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_hessian" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_hessian" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Manipulator_hessian" "', argument " "3"" of type '" "cr::EulerMode""'");
  } 
  arg3 = static_cast< cr::EulerMode >(val3);
  result = (arg1)->hessian(arg2,arg3);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::MatrixXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_hessian__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  unsigned int arg2 ;
  cr::EulerMode arg3 ;
  Eigen::Matrix< bool,6,1 > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  Eigen::MatrixXd result;
  
  if (!SWIG_check_num_args("Manipulator_hessian",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_hessian" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_hessian" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Manipulator_hessian" "', argument " "3"" of type '" "cr::EulerMode""'");
  } 
  arg3 = static_cast< cr::EulerMode >(val3);
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Manipulator_hessian" "', argument " "4"" of type '" "Eigen::Matrix< bool,6,1 >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Manipulator_hessian" "', argument " "4"" of type '" "Eigen::Matrix< bool,6,1 >""'");
    } else {
      arg4 = *(reinterpret_cast< Eigen::Matrix< bool,6,1 > * >(argp4));
    }
  }
  result = (arg1)->hessian(arg2,arg3,arg4);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::MatrixXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_hessian__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  unsigned int arg2 ;
  cr::EulerMode arg3 ;
  Eigen::Matrix< int,6,1 > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Eigen::Matrix< int,6,1 > temp4 ;
  mxArray * _out;
  Eigen::MatrixXd result;
  
  if (!SWIG_check_num_args("Manipulator_hessian",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_hessian" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_hessian" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Manipulator_hessian" "', argument " "3"" of type '" "cr::EulerMode""'");
  } 
  arg3 = static_cast< cr::EulerMode >(val3);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Matrix<int,6,1> >(&temp4, argv[3]))
    SWIG_fail;
    arg4 = temp4;
  }
  result = (arg1)->hessian(arg2,arg3,arg4);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::MatrixXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_hessian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__world__Manipulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Manipulator_hessian__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__world__Manipulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Manipulator_hessian__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__world__Manipulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = mxIsNumeric(argv[3]);
          }
          if (_v) {
            return _wrap_Manipulator_hessian__SWIG_2(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Manipulator_hessian'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::world::Manipulator::hessian(unsigned int,cr::EulerMode)\n"
    "    cr::world::Manipulator::hessian(unsigned int,cr::EulerMode,Eigen::Matrix< bool,6,1 >)\n"
    "    cr::world::Manipulator::hessian(unsigned int,cr::EulerMode,Eigen::Matrix< int,6,1 >)\n");
  return 1;
}


int _wrap_Manipulator_addLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  cr::RigidBody *arg2 = (cr::RigidBody *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("Manipulator_addLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_addLink" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_cr__RigidBody, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Manipulator_addLink" "', argument " "2"" of type '" "cr::RigidBody *""'"); 
  }
  arg2 = reinterpret_cast< cr::RigidBody * >(argp2);
  result = (int)(arg1)->addLink(arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Manipulator_addTool(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = (cr::world::Manipulator *) 0 ;
  unsigned int arg2 ;
  cr::Frame *arg3 = (cr::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("Manipulator_addTool",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__world__Manipulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Manipulator_addTool" "', argument " "1"" of type '" "cr::world::Manipulator *""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Manipulator_addTool" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_cr__Frame, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Manipulator_addTool" "', argument " "3"" of type '" "cr::Frame *""'"); 
  }
  arg3 = reinterpret_cast< cr::Frame * >(argp3);
  result = (int)(arg1)->addTool(arg2,arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseGeneric_icdFunction_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseGeneric *arg1 = (cr::CRParamNoiseGeneric *) 0 ;
  Eigen::VectorXd (*arg2)(double) = (Eigen::VectorXd (*)(double)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("CRParamNoiseGeneric_icdFunction_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseGeneric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseGeneric_icdFunction_set" "', argument " "1"" of type '" "cr::CRParamNoiseGeneric *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseGeneric * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[1], (void**)(&arg2), SWIGTYPE_p_f_double__Eigen__VectorXd);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CRParamNoiseGeneric_icdFunction_set" "', argument " "2"" of type '" "Eigen::VectorXd (*)(double)""'"); 
    }
  }
  if (arg1) (arg1)->icdFunction = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseGeneric_icdFunction_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseGeneric *arg1 = (cr::CRParamNoiseGeneric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd (*result)(double) = 0 ;
  
  if (!SWIG_check_num_args("CRParamNoiseGeneric_icdFunction_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseGeneric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseGeneric_icdFunction_get" "', argument " "1"" of type '" "cr::CRParamNoiseGeneric *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseGeneric * >(argp1);
  result = (Eigen::VectorXd (*)(double)) ((arg1)->icdFunction);
  _out = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_double__Eigen__VectorXd);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseGeneric_probFunction_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseGeneric *arg1 = (cr::CRParamNoiseGeneric *) 0 ;
  double (*arg2)(Eigen::VectorXd) = (double (*)(Eigen::VectorXd)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("CRParamNoiseGeneric_probFunction_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseGeneric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseGeneric_probFunction_set" "', argument " "1"" of type '" "cr::CRParamNoiseGeneric *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseGeneric * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[1], (void**)(&arg2), SWIGTYPE_p_f_Eigen__VectorXd__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CRParamNoiseGeneric_probFunction_set" "', argument " "2"" of type '" "double (*)(Eigen::VectorXd)""'"); 
    }
  }
  if (arg1) (arg1)->probFunction = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseGeneric_probFunction_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseGeneric *arg1 = (cr::CRParamNoiseGeneric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double (*result)(Eigen::VectorXd) = 0 ;
  
  if (!SWIG_check_num_args("CRParamNoiseGeneric_probFunction_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseGeneric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseGeneric_probFunction_get" "', argument " "1"" of type '" "cr::CRParamNoiseGeneric *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseGeneric * >(argp1);
  result = (double (*)(Eigen::VectorXd)) ((arg1)->probFunction);
  _out = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_Eigen__VectorXd__double);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_CRParamNoiseGeneric(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::CRParamNoiseGeneric *result = 0 ;
  
  if (!SWIG_check_num_args("new_CRParamNoiseGeneric",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::CRParamNoiseGeneric *)new cr::CRParamNoiseGeneric();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__CRParamNoiseGeneric, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_CRParamNoiseGeneric(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseGeneric *arg1 = (cr::CRParamNoiseGeneric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_CRParamNoiseGeneric",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseGeneric, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CRParamNoiseGeneric" "', argument " "1"" of type '" "cr::CRParamNoiseGeneric *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseGeneric * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_NoiseModel__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  cr::NoiseModel *result = 0 ;
  
  if (!SWIG_check_num_args("new_NoiseModel",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NoiseModel" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (cr::NoiseModel *)new cr::NoiseModel(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__NoiseModel, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_NoiseModel__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::NoiseModel *result = 0 ;
  
  if (!SWIG_check_num_args("new_NoiseModel",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::NoiseModel *)new cr::NoiseModel();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__NoiseModel, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_NoiseModel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_NoiseModel__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_NoiseModel__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_NoiseModel'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::NoiseModel::NoiseModel(unsigned int)\n"
    "    cr::NoiseModel::NoiseModel()\n");
  return 1;
}


int _wrap_NoiseModel_setParameters(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseModel *arg1 = (cr::NoiseModel *) 0 ;
  Eigen::VectorXd (*arg2)(double) = (Eigen::VectorXd (*)(double)) 0 ;
  double (*arg3)(Eigen::VectorXd) = (double (*)(Eigen::VectorXd)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NoiseModel_setParameters",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseModel_setParameters" "', argument " "1"" of type '" "cr::NoiseModel *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseModel * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[1], (void**)(&arg2), SWIGTYPE_p_f_double__Eigen__VectorXd);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "NoiseModel_setParameters" "', argument " "2"" of type '" "Eigen::VectorXd (*)(double)""'"); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(argv[2], (void**)(&arg3), SWIGTYPE_p_f_Eigen__VectorXd__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "NoiseModel_setParameters" "', argument " "3"" of type '" "double (*)(Eigen::VectorXd)""'"); 
    }
  }
  (arg1)->setParameters(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseModel_sample(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseModel *arg1 = (cr::NoiseModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("NoiseModel_sample",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseModel_sample" "', argument " "1"" of type '" "cr::NoiseModel *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseModel * >(argp1);
  result = (arg1)->sample();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseModel_probability(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseModel *arg1 = (cr::NoiseModel *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("NoiseModel_probability",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseModel_probability" "', argument " "1"" of type '" "cr::NoiseModel *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseModel * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  result = (double)(arg1)->probability(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseModel_m_parameters_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseModel *arg1 = (cr::NoiseModel *) 0 ;
  cr::CRParamNoiseGeneric *arg2 = (cr::CRParamNoiseGeneric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NoiseModel_m_parameters_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseModel_m_parameters_set" "', argument " "1"" of type '" "cr::NoiseModel *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseModel * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_cr__CRParamNoiseGeneric, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NoiseModel_m_parameters_set" "', argument " "2"" of type '" "cr::CRParamNoiseGeneric *""'"); 
  }
  arg2 = reinterpret_cast< cr::CRParamNoiseGeneric * >(argp2);
  if (arg1) (arg1)->m_parameters = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseModel_m_parameters_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseModel *arg1 = (cr::NoiseModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  cr::CRParamNoiseGeneric *result = 0 ;
  
  if (!SWIG_check_num_args("NoiseModel_m_parameters_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseModel_m_parameters_get" "', argument " "1"" of type '" "cr::NoiseModel *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseModel * >(argp1);
  result = (cr::CRParamNoiseGeneric *)& ((arg1)->m_parameters);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__CRParamNoiseGeneric, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_NoiseModel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseModel *arg1 = (cr::NoiseModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_NoiseModel",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseModel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NoiseModel" "', argument " "1"" of type '" "cr::NoiseModel *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseModel * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseGaussian_cov_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseGaussian *arg1 = (cr::CRParamNoiseGaussian *) 0 ;
  Eigen::MatrixXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::MatrixXd temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("CRParamNoiseGaussian_cov_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseGaussian_cov_set" "', argument " "1"" of type '" "cr::CRParamNoiseGaussian *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseGaussian * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  if (arg1) (arg1)->cov = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseGaussian_cov_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseGaussian *arg1 = (cr::CRParamNoiseGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::MatrixXd result;
  
  if (!SWIG_check_num_args("CRParamNoiseGaussian_cov_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseGaussian_cov_get" "', argument " "1"" of type '" "cr::CRParamNoiseGaussian *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseGaussian * >(argp1);
  result =  ((arg1)->cov);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::MatrixXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseGaussian_covInv_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseGaussian *arg1 = (cr::CRParamNoiseGaussian *) 0 ;
  Eigen::MatrixXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::MatrixXd temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("CRParamNoiseGaussian_covInv_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseGaussian_covInv_set" "', argument " "1"" of type '" "cr::CRParamNoiseGaussian *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseGaussian * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  if (arg1) (arg1)->covInv = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseGaussian_covInv_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseGaussian *arg1 = (cr::CRParamNoiseGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::MatrixXd result;
  
  if (!SWIG_check_num_args("CRParamNoiseGaussian_covInv_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseGaussian_covInv_get" "', argument " "1"" of type '" "cr::CRParamNoiseGaussian *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseGaussian * >(argp1);
  result =  ((arg1)->covInv);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::MatrixXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseGaussian_mean_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseGaussian *arg1 = (cr::CRParamNoiseGaussian *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("CRParamNoiseGaussian_mean_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseGaussian_mean_set" "', argument " "1"" of type '" "cr::CRParamNoiseGaussian *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseGaussian * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  if (arg1) (arg1)->mean = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseGaussian_mean_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseGaussian *arg1 = (cr::CRParamNoiseGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("CRParamNoiseGaussian_mean_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseGaussian_mean_get" "', argument " "1"" of type '" "cr::CRParamNoiseGaussian *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseGaussian * >(argp1);
  result =  ((arg1)->mean);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_CRParamNoiseGaussian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::CRParamNoiseGaussian *result = 0 ;
  
  if (!SWIG_check_num_args("new_CRParamNoiseGaussian",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::CRParamNoiseGaussian *)new cr::CRParamNoiseGaussian();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__CRParamNoiseGaussian, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_CRParamNoiseGaussian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseGaussian *arg1 = (cr::CRParamNoiseGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_CRParamNoiseGaussian",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseGaussian, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CRParamNoiseGaussian" "', argument " "1"" of type '" "cr::CRParamNoiseGaussian *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseGaussian * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_NoiseGaussian__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Eigen::MatrixXd arg1 ;
  Eigen::VectorXd arg2 ;
  unsigned int arg3 ;
  Eigen::MatrixXd temp1 ;
  Eigen::VectorXd temp2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  cr::NoiseGaussian *result = 0 ;
  
  if (!SWIG_check_num_args("new_NoiseGaussian",argc,3,3,0)) {
    SWIG_fail;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp1, argv[0]))
    SWIG_fail;
    arg1 = temp1;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NoiseGaussian" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (cr::NoiseGaussian *)new cr::NoiseGaussian(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__NoiseGaussian, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_NoiseGaussian__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Eigen::MatrixXd arg1 ;
  Eigen::VectorXd arg2 ;
  Eigen::MatrixXd temp1 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  cr::NoiseGaussian *result = 0 ;
  
  if (!SWIG_check_num_args("new_NoiseGaussian",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp1, argv[0]))
    SWIG_fail;
    arg1 = temp1;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  result = (cr::NoiseGaussian *)new cr::NoiseGaussian(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__NoiseGaussian, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_NoiseGaussian__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::NoiseGaussian *result = 0 ;
  
  if (!SWIG_check_num_args("new_NoiseGaussian",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::NoiseGaussian *)new cr::NoiseGaussian();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__NoiseGaussian, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_NoiseGaussian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_NoiseGaussian__SWIG_2(resc,resv,argc,argv);
  }
  if (argc == 2) {
    int _v;
    {
      _v = mxIsNumeric(argv[0]);
    }
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        return _wrap_new_NoiseGaussian__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = mxIsNumeric(argv[0]);
    }
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_NoiseGaussian__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_NoiseGaussian'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::NoiseGaussian::NoiseGaussian(Eigen::MatrixXd,Eigen::VectorXd,unsigned int)\n"
    "    cr::NoiseGaussian::NoiseGaussian(Eigen::MatrixXd,Eigen::VectorXd)\n"
    "    cr::NoiseGaussian::NoiseGaussian()\n");
  return 1;
}


int _wrap_NoiseGaussian_setParameters__SWIG_0_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseGaussian *arg1 = (cr::NoiseGaussian *) 0 ;
  Eigen::VectorXd (*arg2)(double) = (Eigen::VectorXd (*)(double)) 0 ;
  double (*arg3)(Eigen::VectorXd) = (double (*)(Eigen::VectorXd)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NoiseGaussian_setParameters",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseGaussian_setParameters" "', argument " "1"" of type '" "cr::NoiseGaussian *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseGaussian * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[1], (void**)(&arg2), SWIGTYPE_p_f_double__Eigen__VectorXd);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "NoiseGaussian_setParameters" "', argument " "2"" of type '" "Eigen::VectorXd (*)(double)""'"); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(argv[2], (void**)(&arg3), SWIGTYPE_p_f_Eigen__VectorXd__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "NoiseGaussian_setParameters" "', argument " "3"" of type '" "double (*)(Eigen::VectorXd)""'"); 
    }
  }
  (arg1)->setParameters(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseGaussian_setParameters__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseGaussian *arg1 = (cr::NoiseGaussian *) 0 ;
  Eigen::MatrixXd arg2 ;
  Eigen::VectorXd arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::MatrixXd temp2 ;
  Eigen::VectorXd temp3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NoiseGaussian_setParameters",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseGaussian_setParameters" "', argument " "1"" of type '" "cr::NoiseGaussian *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseGaussian * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp3, argv[2]))
    SWIG_fail;
    arg3 = temp3;
  }
  (arg1)->setParameters(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseGaussian_setParameters(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__NoiseGaussian, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_double__Eigen__VectorXd);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertFunctionPtr(argv[2], &ptr, SWIGTYPE_p_f_Eigen__VectorXd__double);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NoiseGaussian_setParameters__SWIG_0_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__NoiseGaussian, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        {
          _v = mxIsNumeric(argv[2]);
        }
        if (_v) {
          return _wrap_NoiseGaussian_setParameters__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'NoiseGaussian_setParameters'."
    "  Possible C/C++ prototypes are:\n"
    "    setParameters(Eigen::VectorXd (*)(double),double (*)(Eigen::VectorXd))\n"
    "    cr::NoiseGaussian::setParameters(Eigen::MatrixXd,Eigen::VectorXd)\n");
  return 1;
}


int _wrap_NoiseGaussian_sample(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseGaussian *arg1 = (cr::NoiseGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("NoiseGaussian_sample",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseGaussian_sample" "', argument " "1"" of type '" "cr::NoiseGaussian *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseGaussian * >(argp1);
  result = (arg1)->sample();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseGaussian_probability(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseGaussian *arg1 = (cr::NoiseGaussian *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("NoiseGaussian_probability",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseGaussian_probability" "', argument " "1"" of type '" "cr::NoiseGaussian *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseGaussian * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  result = (double)(arg1)->probability(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseGaussian_m_parameters_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseGaussian *arg1 = (cr::NoiseGaussian *) 0 ;
  cr::CRParamNoiseGaussian *arg2 = (cr::CRParamNoiseGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NoiseGaussian_m_parameters_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseGaussian_m_parameters_set" "', argument " "1"" of type '" "cr::NoiseGaussian *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseGaussian * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_cr__CRParamNoiseGaussian, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NoiseGaussian_m_parameters_set" "', argument " "2"" of type '" "cr::CRParamNoiseGaussian *""'"); 
  }
  arg2 = reinterpret_cast< cr::CRParamNoiseGaussian * >(argp2);
  if (arg1) (arg1)->m_parameters = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseGaussian_m_parameters_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseGaussian *arg1 = (cr::NoiseGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  cr::CRParamNoiseGaussian *result = 0 ;
  
  if (!SWIG_check_num_args("NoiseGaussian_m_parameters_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseGaussian_m_parameters_get" "', argument " "1"" of type '" "cr::NoiseGaussian *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseGaussian * >(argp1);
  result = (cr::CRParamNoiseGaussian *)& ((arg1)->m_parameters);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__CRParamNoiseGaussian, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_NoiseGaussian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseGaussian *arg1 = (cr::NoiseGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_NoiseGaussian",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseGaussian, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NoiseGaussian" "', argument " "1"" of type '" "cr::NoiseGaussian *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseGaussian * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseUniform_a_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseUniform *arg1 = (cr::CRParamNoiseUniform *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("CRParamNoiseUniform_a_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseUniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseUniform_a_set" "', argument " "1"" of type '" "cr::CRParamNoiseUniform *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseUniform * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  if (arg1) (arg1)->a = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseUniform_a_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseUniform *arg1 = (cr::CRParamNoiseUniform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("CRParamNoiseUniform_a_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseUniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseUniform_a_get" "', argument " "1"" of type '" "cr::CRParamNoiseUniform *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseUniform * >(argp1);
  result =  ((arg1)->a);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseUniform_b_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseUniform *arg1 = (cr::CRParamNoiseUniform *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("CRParamNoiseUniform_b_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseUniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseUniform_b_set" "', argument " "1"" of type '" "cr::CRParamNoiseUniform *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseUniform * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  if (arg1) (arg1)->b = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseUniform_b_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseUniform *arg1 = (cr::CRParamNoiseUniform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("CRParamNoiseUniform_b_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseUniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseUniform_b_get" "', argument " "1"" of type '" "cr::CRParamNoiseUniform *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseUniform * >(argp1);
  result =  ((arg1)->b);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_CRParamNoiseUniform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::CRParamNoiseUniform *result = 0 ;
  
  if (!SWIG_check_num_args("new_CRParamNoiseUniform",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::CRParamNoiseUniform *)new cr::CRParamNoiseUniform();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__CRParamNoiseUniform, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_CRParamNoiseUniform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseUniform *arg1 = (cr::CRParamNoiseUniform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_CRParamNoiseUniform",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseUniform, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CRParamNoiseUniform" "', argument " "1"" of type '" "cr::CRParamNoiseUniform *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseUniform * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_NoiseUniform__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Eigen::VectorXd arg1 ;
  Eigen::VectorXd arg2 ;
  unsigned int arg3 ;
  Eigen::VectorXd temp1 ;
  Eigen::VectorXd temp2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  cr::NoiseUniform *result = 0 ;
  
  if (!SWIG_check_num_args("new_NoiseUniform",argc,3,3,0)) {
    SWIG_fail;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp1, argv[0]))
    SWIG_fail;
    arg1 = temp1;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NoiseUniform" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (cr::NoiseUniform *)new cr::NoiseUniform(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__NoiseUniform, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_NoiseUniform__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Eigen::VectorXd arg1 ;
  Eigen::VectorXd arg2 ;
  Eigen::VectorXd temp1 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  cr::NoiseUniform *result = 0 ;
  
  if (!SWIG_check_num_args("new_NoiseUniform",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp1, argv[0]))
    SWIG_fail;
    arg1 = temp1;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  result = (cr::NoiseUniform *)new cr::NoiseUniform(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__NoiseUniform, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_NoiseUniform__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::NoiseUniform *result = 0 ;
  
  if (!SWIG_check_num_args("new_NoiseUniform",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::NoiseUniform *)new cr::NoiseUniform();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__NoiseUniform, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_NoiseUniform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_NoiseUniform__SWIG_2(resc,resv,argc,argv);
  }
  if (argc == 2) {
    int _v;
    {
      _v = mxIsNumeric(argv[0]);
    }
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        return _wrap_new_NoiseUniform__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = mxIsNumeric(argv[0]);
    }
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_NoiseUniform__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_NoiseUniform'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::NoiseUniform::NoiseUniform(Eigen::VectorXd,Eigen::VectorXd,unsigned int)\n"
    "    cr::NoiseUniform::NoiseUniform(Eigen::VectorXd,Eigen::VectorXd)\n"
    "    cr::NoiseUniform::NoiseUniform()\n");
  return 1;
}


int _wrap_NoiseUniform_setParameters__SWIG_0_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseUniform *arg1 = (cr::NoiseUniform *) 0 ;
  Eigen::VectorXd (*arg2)(double) = (Eigen::VectorXd (*)(double)) 0 ;
  double (*arg3)(Eigen::VectorXd) = (double (*)(Eigen::VectorXd)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NoiseUniform_setParameters",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseUniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseUniform_setParameters" "', argument " "1"" of type '" "cr::NoiseUniform *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseUniform * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[1], (void**)(&arg2), SWIGTYPE_p_f_double__Eigen__VectorXd);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "NoiseUniform_setParameters" "', argument " "2"" of type '" "Eigen::VectorXd (*)(double)""'"); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(argv[2], (void**)(&arg3), SWIGTYPE_p_f_Eigen__VectorXd__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "NoiseUniform_setParameters" "', argument " "3"" of type '" "double (*)(Eigen::VectorXd)""'"); 
    }
  }
  (arg1)->setParameters(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseUniform_setParameters__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseUniform *arg1 = (cr::NoiseUniform *) 0 ;
  Eigen::VectorXd arg2 ;
  Eigen::VectorXd arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  Eigen::VectorXd temp3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NoiseUniform_setParameters",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseUniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseUniform_setParameters" "', argument " "1"" of type '" "cr::NoiseUniform *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseUniform * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp3, argv[2]))
    SWIG_fail;
    arg3 = temp3;
  }
  (arg1)->setParameters(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseUniform_setParameters(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__NoiseUniform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_double__Eigen__VectorXd);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertFunctionPtr(argv[2], &ptr, SWIGTYPE_p_f_Eigen__VectorXd__double);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NoiseUniform_setParameters__SWIG_0_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__NoiseUniform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        {
          _v = mxIsNumeric(argv[2]);
        }
        if (_v) {
          return _wrap_NoiseUniform_setParameters__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'NoiseUniform_setParameters'."
    "  Possible C/C++ prototypes are:\n"
    "    setParameters(Eigen::VectorXd (*)(double),double (*)(Eigen::VectorXd))\n"
    "    cr::NoiseUniform::setParameters(Eigen::VectorXd,Eigen::VectorXd)\n");
  return 1;
}


int _wrap_NoiseUniform_sample(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseUniform *arg1 = (cr::NoiseUniform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("NoiseUniform_sample",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseUniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseUniform_sample" "', argument " "1"" of type '" "cr::NoiseUniform *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseUniform * >(argp1);
  result = (arg1)->sample();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseUniform_probability(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseUniform *arg1 = (cr::NoiseUniform *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("NoiseUniform_probability",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseUniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseUniform_probability" "', argument " "1"" of type '" "cr::NoiseUniform *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseUniform * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  result = (double)(arg1)->probability(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseUniform_m_parameters_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseUniform *arg1 = (cr::NoiseUniform *) 0 ;
  cr::CRParamNoiseUniform *arg2 = (cr::CRParamNoiseUniform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NoiseUniform_m_parameters_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseUniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseUniform_m_parameters_set" "', argument " "1"" of type '" "cr::NoiseUniform *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseUniform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_cr__CRParamNoiseUniform, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NoiseUniform_m_parameters_set" "', argument " "2"" of type '" "cr::CRParamNoiseUniform *""'"); 
  }
  arg2 = reinterpret_cast< cr::CRParamNoiseUniform * >(argp2);
  if (arg1) (arg1)->m_parameters = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseUniform_m_parameters_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseUniform *arg1 = (cr::NoiseUniform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  cr::CRParamNoiseUniform *result = 0 ;
  
  if (!SWIG_check_num_args("NoiseUniform_m_parameters_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseUniform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseUniform_m_parameters_get" "', argument " "1"" of type '" "cr::NoiseUniform *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseUniform * >(argp1);
  result = (cr::CRParamNoiseUniform *)& ((arg1)->m_parameters);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__CRParamNoiseUniform, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_NoiseUniform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseUniform *arg1 = (cr::NoiseUniform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_NoiseUniform",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseUniform, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NoiseUniform" "', argument " "1"" of type '" "cr::NoiseUniform *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseUniform * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseMixture_models_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseMixture *arg1 = (cr::CRParamNoiseMixture *) 0 ;
  std::vector< cr::NoiseModel *,std::allocator< cr::NoiseModel * > > *arg2 = (std::vector< cr::NoiseModel *,std::allocator< cr::NoiseModel * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("CRParamNoiseMixture_models_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseMixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseMixture_models_set" "', argument " "1"" of type '" "cr::CRParamNoiseMixture *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseMixture * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_cr__NoiseModel_p_std__allocatorT_cr__NoiseModel_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CRParamNoiseMixture_models_set" "', argument " "2"" of type '" "std::vector< cr::NoiseModel *,std::allocator< cr::NoiseModel * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< cr::NoiseModel *,std::allocator< cr::NoiseModel * > > * >(argp2);
  if (arg1) (arg1)->models = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseMixture_models_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseMixture *arg1 = (cr::CRParamNoiseMixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< cr::NoiseModel *,std::allocator< cr::NoiseModel * > > *result = 0 ;
  
  if (!SWIG_check_num_args("CRParamNoiseMixture_models_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseMixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseMixture_models_get" "', argument " "1"" of type '" "cr::CRParamNoiseMixture *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseMixture * >(argp1);
  result = (std::vector< cr::NoiseModel *,std::allocator< cr::NoiseModel * > > *)& ((arg1)->models);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_cr__NoiseModel_p_std__allocatorT_cr__NoiseModel_p_t_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseMixture_weights_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseMixture *arg1 = (cr::CRParamNoiseMixture *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("CRParamNoiseMixture_weights_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseMixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseMixture_weights_set" "', argument " "1"" of type '" "cr::CRParamNoiseMixture *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseMixture * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CRParamNoiseMixture_weights_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->weights = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRParamNoiseMixture_weights_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseMixture *arg1 = (cr::CRParamNoiseMixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("CRParamNoiseMixture_weights_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseMixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRParamNoiseMixture_weights_get" "', argument " "1"" of type '" "cr::CRParamNoiseMixture *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseMixture * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->weights);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_CRParamNoiseMixture(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::CRParamNoiseMixture *result = 0 ;
  
  if (!SWIG_check_num_args("new_CRParamNoiseMixture",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::CRParamNoiseMixture *)new cr::CRParamNoiseMixture();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__CRParamNoiseMixture, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_CRParamNoiseMixture(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRParamNoiseMixture *arg1 = (cr::CRParamNoiseMixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_CRParamNoiseMixture",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRParamNoiseMixture, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CRParamNoiseMixture" "', argument " "1"" of type '" "cr::CRParamNoiseMixture *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRParamNoiseMixture * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_NoiseMixture__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  cr::NoiseMixture *result = 0 ;
  
  if (!SWIG_check_num_args("new_NoiseMixture",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NoiseMixture" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (cr::NoiseMixture *)new cr::NoiseMixture(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__NoiseMixture, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_NoiseMixture__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::NoiseMixture *result = 0 ;
  
  if (!SWIG_check_num_args("new_NoiseMixture",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::NoiseMixture *)new cr::NoiseMixture();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__NoiseMixture, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_NoiseMixture(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_NoiseMixture__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_NoiseMixture__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_NoiseMixture'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::NoiseMixture::NoiseMixture(unsigned int)\n"
    "    cr::NoiseMixture::NoiseMixture()\n");
  return 1;
}


int _wrap_NoiseMixture_add(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseMixture *arg1 = (cr::NoiseMixture *) 0 ;
  cr::NoiseModel *arg2 = (cr::NoiseModel *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NoiseMixture_add",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseMixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseMixture_add" "', argument " "1"" of type '" "cr::NoiseMixture *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseMixture * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_cr__NoiseModel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NoiseMixture_add" "', argument " "2"" of type '" "cr::NoiseModel *""'"); 
  }
  arg2 = reinterpret_cast< cr::NoiseModel * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NoiseMixture_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->add(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseMixture_sample(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseMixture *arg1 = (cr::NoiseMixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("NoiseMixture_sample",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseMixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseMixture_sample" "', argument " "1"" of type '" "cr::NoiseMixture *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseMixture * >(argp1);
  result = (arg1)->sample();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseMixture_probability(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseMixture *arg1 = (cr::NoiseMixture *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("NoiseMixture_probability",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseMixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseMixture_probability" "', argument " "1"" of type '" "cr::NoiseMixture *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseMixture * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  result = (double)(arg1)->probability(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseMixture_m_parameters_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseMixture *arg1 = (cr::NoiseMixture *) 0 ;
  cr::CRParamNoiseMixture *arg2 = (cr::CRParamNoiseMixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NoiseMixture_m_parameters_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseMixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseMixture_m_parameters_set" "', argument " "1"" of type '" "cr::NoiseMixture *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseMixture * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_cr__CRParamNoiseMixture, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NoiseMixture_m_parameters_set" "', argument " "2"" of type '" "cr::CRParamNoiseMixture *""'"); 
  }
  arg2 = reinterpret_cast< cr::CRParamNoiseMixture * >(argp2);
  if (arg1) (arg1)->m_parameters = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NoiseMixture_m_parameters_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseMixture *arg1 = (cr::NoiseMixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  cr::CRParamNoiseMixture *result = 0 ;
  
  if (!SWIG_check_num_args("NoiseMixture_m_parameters_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseMixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoiseMixture_m_parameters_get" "', argument " "1"" of type '" "cr::NoiseMixture *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseMixture * >(argp1);
  result = (cr::CRParamNoiseMixture *)& ((arg1)->m_parameters);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__CRParamNoiseMixture, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_NoiseMixture(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NoiseMixture *arg1 = (cr::NoiseMixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_NoiseMixture",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NoiseMixture, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NoiseMixture" "', argument " "1"" of type '" "cr::NoiseMixture *""'"); 
  }
  arg1 = reinterpret_cast< cr::NoiseMixture * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SensorLinear(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  Eigen::MatrixXd arg1 ;
  Eigen::VectorXd arg2 ;
  Eigen::MatrixXd temp1 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  cr::SensorLinear *result = 0 ;
  
  if (!SWIG_check_num_args("new_SensorLinear",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp1, argv[0]))
    SWIG_fail;
    arg1 = temp1;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  result = (cr::SensorLinear *)new cr::SensorLinear(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__SensorLinear, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorLinear_setObservation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::SensorLinear *arg1 = (cr::SensorLinear *) 0 ;
  Eigen::MatrixXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::MatrixXd temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SensorLinear_setObservation",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__SensorLinear, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorLinear_setObservation" "', argument " "1"" of type '" "cr::SensorLinear *""'"); 
  }
  arg1 = reinterpret_cast< cr::SensorLinear * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  (arg1)->setObservation(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorLinear_measurement(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::SensorLinear *arg1 = (cr::SensorLinear *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("SensorLinear_measurement",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__SensorLinear, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorLinear_measurement" "', argument " "1"" of type '" "cr::SensorLinear *""'"); 
  }
  arg1 = reinterpret_cast< cr::SensorLinear * >(argp1);
  result = (arg1)->measurement();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SensorLinear(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::SensorLinear *arg1 = (cr::SensorLinear *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SensorLinear",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__SensorLinear, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SensorLinear" "', argument " "1"" of type '" "cr::SensorLinear *""'"); 
  }
  arg1 = reinterpret_cast< cr::SensorLinear * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_InverseKinematics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = 0 ;
  unsigned int arg2 ;
  cr::EulerMode arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  cr::InverseKinematics *result = 0 ;
  
  if (!SWIG_check_num_args("new_InverseKinematics",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_cr__world__Manipulator,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InverseKinematics" "', argument " "1"" of type '" "cr::world::Manipulator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InverseKinematics" "', argument " "1"" of type '" "cr::world::Manipulator const &""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InverseKinematics" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_InverseKinematics" "', argument " "3"" of type '" "cr::EulerMode""'");
  } 
  arg3 = static_cast< cr::EulerMode >(val3);
  result = (cr::InverseKinematics *)new cr::InverseKinematics((cr::world::Manipulator const &)*arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__InverseKinematics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_setRobot(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  cr::world::Manipulator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("InverseKinematics_setRobot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_setRobot" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_cr__world__Manipulator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InverseKinematics_setRobot" "', argument " "2"" of type '" "cr::world::Manipulator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InverseKinematics_setRobot" "', argument " "2"" of type '" "cr::world::Manipulator const &""'"); 
  }
  arg2 = reinterpret_cast< cr::world::Manipulator * >(argp2);
  (arg1)->setRobot((cr::world::Manipulator const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_getRobot(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  cr::world::Manipulator result;
  
  if (!SWIG_check_num_args("InverseKinematics_getRobot",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_getRobot" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  result = (arg1)->getRobot();
  _out = SWIG_NewPointerObj((new cr::world::Manipulator(static_cast< const cr::world::Manipulator& >(result))), SWIGTYPE_p_cr__world__Manipulator, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_setToolIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("InverseKinematics_setToolIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_setToolIndex" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InverseKinematics_setToolIndex" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->setToolIndex(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_getToolIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("InverseKinematics_getToolIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_getToolIndex" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  result = (unsigned int)(arg1)->getToolIndex();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_setEulerMode(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  cr::EulerMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("InverseKinematics_setEulerMode",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_setEulerMode" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InverseKinematics_setEulerMode" "', argument " "2"" of type '" "cr::EulerMode""'");
  } 
  arg2 = static_cast< cr::EulerMode >(val2);
  (arg1)->setEulerMode(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_getEulerMode(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  cr::EulerMode result;
  
  if (!SWIG_check_num_args("InverseKinematics_getEulerMode",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_getEulerMode" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  result = (cr::EulerMode)(arg1)->getEulerMode();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_setTolerance(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("InverseKinematics_setTolerance",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_setTolerance" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InverseKinematics_setTolerance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setTolerance(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_getTolerance(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("InverseKinematics_getTolerance",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_getTolerance" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  result = (double)(arg1)->getTolerance();
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_setMaxIter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("InverseKinematics_setMaxIter",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_setMaxIter" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InverseKinematics_setMaxIter" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->setMaxIter(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_getMaxIter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("InverseKinematics_getMaxIter",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_getMaxIter" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  result = (unsigned int)(arg1)->getMaxIter();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_setStepSize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("InverseKinematics_setStepSize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_setStepSize" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InverseKinematics_setStepSize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setStepSize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_getStepSize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("InverseKinematics_getStepSize",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_getStepSize" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  result = (double)(arg1)->getStepSize();
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_setDampingFactor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("InverseKinematics_setDampingFactor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_setDampingFactor" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InverseKinematics_setDampingFactor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setDampingFactor(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_getDampingFactor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("InverseKinematics_getDampingFactor",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_getDampingFactor" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  result = (double)(arg1)->getDampingFactor();
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_setSingularThresh(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("InverseKinematics_setSingularThresh",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_setSingularThresh" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InverseKinematics_setSingularThresh" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setSingularThresh(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_getSingularThresh(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("InverseKinematics_getSingularThresh",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_getSingularThresh" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  result = (double)(arg1)->getSingularThresh();
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_getJacInv(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  Eigen::MatrixXd arg2 ;
  Eigen::MatrixXd *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::MatrixXd temp2 ;
  Eigen::MatrixXd temp3 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("InverseKinematics_getJacInv",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_getJacInv" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp3, argv[2]))
    SWIG_fail;
    
    arg3 = &temp3;
  }
  result = (cr::Result)(arg1)->getJacInv(arg2,*arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::MatrixXd >(argv[2], arg3))
    SWIG_fail;
  }
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_solve__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  Eigen::Matrix< double,6,1 > *arg2 = 0 ;
  Eigen::VectorXd arg3 ;
  Eigen::VectorXd *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Matrix< double,6,1 > temp2 ;
  Eigen::VectorXd temp3 ;
  Eigen::VectorXd temp4 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("InverseKinematics_solve",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_solve" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  {
    // In: const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Matrix<double,6,1> >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = &temp2;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp3, argv[2]))
    SWIG_fail;
    arg3 = temp3;
  }
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp4, argv[3]))
    SWIG_fail;
    
    arg4 = &temp4;
  }
  result = (cr::Result)(arg1)->solve((Eigen::Matrix< double,6,1 > const &)*arg2,arg3,*arg4);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::VectorXd >(argv[3], arg4))
    SWIG_fail;
  }
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_solve__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  Eigen::VectorXd *arg2 = 0 ;
  Eigen::Matrix< bool,6,1 > arg3 ;
  Eigen::VectorXd arg4 ;
  Eigen::VectorXd *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  void *argp3 ;
  int res3 = 0 ;
  Eigen::VectorXd temp4 ;
  Eigen::VectorXd temp5 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("InverseKinematics_solve",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_solve" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    
    arg2 = &temp2;
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InverseKinematics_solve" "', argument " "3"" of type '" "Eigen::Matrix< bool,6,1 >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InverseKinematics_solve" "', argument " "3"" of type '" "Eigen::Matrix< bool,6,1 >""'");
    } else {
      arg3 = *(reinterpret_cast< Eigen::Matrix< bool,6,1 > * >(argp3));
    }
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp4, argv[3]))
    SWIG_fail;
    arg4 = temp4;
  }
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp5, argv[4]))
    SWIG_fail;
    
    arg5 = &temp5;
  }
  result = (cr::Result)(arg1)->solve(*arg2,arg3,arg4,*arg5);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::VectorXd >(argv[1], arg2))
    SWIG_fail;
  }
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::VectorXd >(argv[4], arg5))
    SWIG_fail;
  }
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_solve__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  Eigen::VectorXd *arg2 = 0 ;
  Eigen::Matrix< bool,6,1 > arg3 ;
  Eigen::VectorXd arg4 ;
  Eigen::MatrixXd arg5 ;
  Eigen::VectorXd *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  void *argp3 ;
  int res3 = 0 ;
  Eigen::VectorXd temp4 ;
  Eigen::MatrixXd temp5 ;
  Eigen::VectorXd temp6 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("InverseKinematics_solve",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_solve" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    
    arg2 = &temp2;
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InverseKinematics_solve" "', argument " "3"" of type '" "Eigen::Matrix< bool,6,1 >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InverseKinematics_solve" "', argument " "3"" of type '" "Eigen::Matrix< bool,6,1 >""'");
    } else {
      arg3 = *(reinterpret_cast< Eigen::Matrix< bool,6,1 > * >(argp3));
    }
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp4, argv[3]))
    SWIG_fail;
    arg4 = temp4;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp5, argv[4]))
    SWIG_fail;
    arg5 = temp5;
  }
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp6, argv[5]))
    SWIG_fail;
    
    arg6 = &temp6;
  }
  result = (cr::Result)(arg1)->solve(*arg2,arg3,arg4,arg5,*arg6);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::VectorXd >(argv[1], arg2))
    SWIG_fail;
  }
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::VectorXd >(argv[5], arg6))
    SWIG_fail;
  }
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_solve__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  Eigen::VectorXd *arg2 = 0 ;
  Eigen::Matrix< int,6,1 > arg3 ;
  Eigen::VectorXd arg4 ;
  Eigen::VectorXd *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  Eigen::Matrix< int,6,1 > temp3 ;
  Eigen::VectorXd temp4 ;
  Eigen::VectorXd temp5 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("InverseKinematics_solve",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseKinematics_solve" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    
    arg2 = &temp2;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Matrix<int,6,1> >(&temp3, argv[2]))
    SWIG_fail;
    arg3 = temp3;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp4, argv[3]))
    SWIG_fail;
    arg4 = temp4;
  }
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp5, argv[4]))
    SWIG_fail;
    
    arg5 = &temp5;
  }
  result = (cr::Result)(arg1)->solve(*arg2,arg3,arg4,*arg5);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::VectorXd >(argv[1], arg2))
    SWIG_fail;
  }
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::VectorXd >(argv[4], arg5))
    SWIG_fail;
  }
  return 0;
fail:
  return 1;
}


int _wrap_InverseKinematics_solve(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__InverseKinematics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        {
          _v = mxIsNumeric(argv[2]);
        }
        if (_v) {
          {
            _v = mxIsNumeric(argv[3]);
          }
          if (_v) {
            return _wrap_InverseKinematics_solve__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__InverseKinematics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = mxIsNumeric(argv[3]);
          }
          if (_v) {
            {
              _v = mxIsNumeric(argv[4]);
            }
            if (_v) {
              return _wrap_InverseKinematics_solve__SWIG_1(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__InverseKinematics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        {
          _v = mxIsNumeric(argv[2]);
        }
        if (_v) {
          {
            _v = mxIsNumeric(argv[3]);
          }
          if (_v) {
            {
              _v = mxIsNumeric(argv[4]);
            }
            if (_v) {
              return _wrap_InverseKinematics_solve__SWIG_3(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__InverseKinematics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = mxIsNumeric(argv[3]);
          }
          if (_v) {
            {
              _v = mxIsNumeric(argv[4]);
            }
            if (_v) {
              {
                _v = mxIsNumeric(argv[5]);
              }
              if (_v) {
                return _wrap_InverseKinematics_solve__SWIG_2(resc,resv,argc,argv);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'InverseKinematics_solve'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::InverseKinematics::solve(Eigen::Matrix< double,6,1 > const &,Eigen::VectorXd,Eigen::VectorXd &)\n"
    "    cr::InverseKinematics::solve(Eigen::VectorXd &,Eigen::Matrix< bool,6,1 >,Eigen::VectorXd,Eigen::VectorXd &)\n"
    "    cr::InverseKinematics::solve(Eigen::VectorXd &,Eigen::Matrix< bool,6,1 >,Eigen::VectorXd,Eigen::MatrixXd,Eigen::VectorXd &)\n"
    "    cr::InverseKinematics::solve(Eigen::VectorXd &,Eigen::Matrix< int,6,1 >,Eigen::VectorXd,Eigen::VectorXd &)\n");
  return 1;
}


int _wrap_delete_InverseKinematics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::InverseKinematics *arg1 = (cr::InverseKinematics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_InverseKinematics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__InverseKinematics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InverseKinematics" "', argument " "1"" of type '" "cr::InverseKinematics *""'"); 
  }
  arg1 = reinterpret_cast< cr::InverseKinematics * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_NullSpace(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = 0 ;
  unsigned int arg2 ;
  cr::EulerMode arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  cr::NullSpace *result = 0 ;
  
  if (!SWIG_check_num_args("new_NullSpace",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_cr__world__Manipulator,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NullSpace" "', argument " "1"" of type '" "cr::world::Manipulator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NullSpace" "', argument " "1"" of type '" "cr::world::Manipulator const &""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NullSpace" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NullSpace" "', argument " "3"" of type '" "cr::EulerMode""'");
  } 
  arg3 = static_cast< cr::EulerMode >(val3);
  result = (cr::NullSpace *)new cr::NullSpace((cr::world::Manipulator const &)*arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__NullSpace, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_setRobot(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  cr::world::Manipulator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NullSpace_setRobot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullSpace_setRobot" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_cr__world__Manipulator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NullSpace_setRobot" "', argument " "2"" of type '" "cr::world::Manipulator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NullSpace_setRobot" "', argument " "2"" of type '" "cr::world::Manipulator const &""'"); 
  }
  arg2 = reinterpret_cast< cr::world::Manipulator * >(argp2);
  (arg1)->setRobot((cr::world::Manipulator const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_setToolIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NullSpace_setToolIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullSpace_setToolIndex" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NullSpace_setToolIndex" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->setToolIndex(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_setEulerMode(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  cr::EulerMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NullSpace_setEulerMode",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullSpace_setEulerMode" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NullSpace_setEulerMode" "', argument " "2"" of type '" "cr::EulerMode""'");
  } 
  arg2 = static_cast< cr::EulerMode >(val2);
  (arg1)->setEulerMode(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_getEulerMode(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  cr::EulerMode result;
  
  if (!SWIG_check_num_args("NullSpace_getEulerMode",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullSpace_getEulerMode" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  result = (cr::EulerMode)(arg1)->getEulerMode();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_setSingularThresh(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NullSpace_setSingularThresh",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullSpace_setSingularThresh" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NullSpace_setSingularThresh" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setSingularThresh(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_getSingularThresh(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("NullSpace_getSingularThresh",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullSpace_getSingularThresh" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  result = (double)(arg1)->getSingularThresh();
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_setMinStepSize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NullSpace_setMinStepSize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullSpace_setMinStepSize" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NullSpace_setMinStepSize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setMinStepSize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_getMinStepSize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("NullSpace_getMinStepSize",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullSpace_getMinStepSize" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  result = (double)(arg1)->getMinStepSize();
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_setMaxIter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NullSpace_setMaxIter",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullSpace_setMaxIter" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NullSpace_setMaxIter" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setMaxIter(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_getMaxIter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("NullSpace_getMaxIter",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullSpace_getMaxIter" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  result = (double)(arg1)->getMaxIter();
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_setTrivialTolerance(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("NullSpace_setTrivialTolerance",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullSpace_setTrivialTolerance" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NullSpace_setTrivialTolerance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setTrivialTolerance(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_getTrivialTolerance(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("NullSpace_getTrivialTolerance",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullSpace_getTrivialTolerance" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  result = (double)(arg1)->getTrivialTolerance();
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_solve__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  Eigen::VectorXd arg2 ;
  Eigen::VectorXd arg3 ;
  Eigen::VectorXd *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  Eigen::VectorXd temp3 ;
  Eigen::VectorXd temp4 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("NullSpace_solve",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullSpace_solve" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp3, argv[2]))
    SWIG_fail;
    arg3 = temp3;
  }
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp4, argv[3]))
    SWIG_fail;
    
    arg4 = &temp4;
  }
  result = (cr::Result)(arg1)->solve(arg2,arg3,*arg4);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::VectorXd >(argv[3], arg4))
    SWIG_fail;
  }
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_solve__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  Eigen::VectorXd arg2 ;
  Eigen::VectorXd arg3 ;
  Eigen::Matrix< bool,6,1 > arg4 ;
  Eigen::VectorXd *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  Eigen::VectorXd temp3 ;
  void *argp4 ;
  int res4 = 0 ;
  Eigen::VectorXd temp5 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("NullSpace_solve",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullSpace_solve" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp3, argv[2]))
    SWIG_fail;
    arg3 = temp3;
  }
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NullSpace_solve" "', argument " "4"" of type '" "Eigen::Matrix< bool,6,1 >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NullSpace_solve" "', argument " "4"" of type '" "Eigen::Matrix< bool,6,1 >""'");
    } else {
      arg4 = *(reinterpret_cast< Eigen::Matrix< bool,6,1 > * >(argp4));
    }
  }
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp5, argv[4]))
    SWIG_fail;
    
    arg5 = &temp5;
  }
  result = (cr::Result)(arg1)->solve(arg2,arg3,arg4,*arg5);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::VectorXd >(argv[4], arg5))
    SWIG_fail;
  }
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_solve__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  Eigen::VectorXd arg2 ;
  Eigen::VectorXd arg3 ;
  Eigen::Matrix< bool,6,1 > arg4 ;
  Eigen::MatrixXd arg5 ;
  Eigen::VectorXd *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  Eigen::VectorXd temp3 ;
  void *argp4 ;
  int res4 = 0 ;
  Eigen::MatrixXd temp5 ;
  Eigen::VectorXd temp6 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("NullSpace_solve",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullSpace_solve" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp3, argv[2]))
    SWIG_fail;
    arg3 = temp3;
  }
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NullSpace_solve" "', argument " "4"" of type '" "Eigen::Matrix< bool,6,1 >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NullSpace_solve" "', argument " "4"" of type '" "Eigen::Matrix< bool,6,1 >""'");
    } else {
      arg4 = *(reinterpret_cast< Eigen::Matrix< bool,6,1 > * >(argp4));
    }
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::MatrixXd >(&temp5, argv[4]))
    SWIG_fail;
    arg5 = temp5;
  }
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp6, argv[5]))
    SWIG_fail;
    
    arg6 = &temp6;
  }
  result = (cr::Result)(arg1)->solve(arg2,arg3,arg4,arg5,*arg6);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::VectorXd >(argv[5], arg6))
    SWIG_fail;
  }
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_solve__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  Eigen::VectorXd arg2 ;
  Eigen::VectorXd arg3 ;
  Eigen::Matrix< int,6,1 > arg4 ;
  Eigen::VectorXd *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  Eigen::VectorXd temp3 ;
  Eigen::Matrix< int,6,1 > temp4 ;
  Eigen::VectorXd temp5 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("NullSpace_solve",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullSpace_solve" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp3, argv[2]))
    SWIG_fail;
    arg3 = temp3;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Matrix<int,6,1> >(&temp4, argv[3]))
    SWIG_fail;
    arg4 = temp4;
  }
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp5, argv[4]))
    SWIG_fail;
    
    arg5 = &temp5;
  }
  result = (cr::Result)(arg1)->solve(arg2,arg3,arg4,*arg5);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::VectorXd >(argv[4], arg5))
    SWIG_fail;
  }
  return 0;
fail:
  return 1;
}


int _wrap_NullSpace_solve(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__NullSpace, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        {
          _v = mxIsNumeric(argv[2]);
        }
        if (_v) {
          {
            _v = mxIsNumeric(argv[3]);
          }
          if (_v) {
            return _wrap_NullSpace_solve__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__NullSpace, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        {
          _v = mxIsNumeric(argv[2]);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = mxIsNumeric(argv[4]);
            }
            if (_v) {
              return _wrap_NullSpace_solve__SWIG_1(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__NullSpace, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        {
          _v = mxIsNumeric(argv[2]);
        }
        if (_v) {
          {
            _v = mxIsNumeric(argv[3]);
          }
          if (_v) {
            {
              _v = mxIsNumeric(argv[4]);
            }
            if (_v) {
              return _wrap_NullSpace_solve__SWIG_3(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__NullSpace, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        {
          _v = mxIsNumeric(argv[2]);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = mxIsNumeric(argv[4]);
            }
            if (_v) {
              {
                _v = mxIsNumeric(argv[5]);
              }
              if (_v) {
                return _wrap_NullSpace_solve__SWIG_2(resc,resv,argc,argv);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'NullSpace_solve'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::NullSpace::solve(Eigen::VectorXd,Eigen::VectorXd,Eigen::VectorXd &)\n"
    "    cr::NullSpace::solve(Eigen::VectorXd,Eigen::VectorXd,Eigen::Matrix< bool,6,1 >,Eigen::VectorXd &)\n"
    "    cr::NullSpace::solve(Eigen::VectorXd,Eigen::VectorXd,Eigen::Matrix< bool,6,1 >,Eigen::MatrixXd,Eigen::VectorXd &)\n"
    "    cr::NullSpace::solve(Eigen::VectorXd,Eigen::VectorXd,Eigen::Matrix< int,6,1 >,Eigen::VectorXd &)\n");
  return 1;
}


int _wrap_delete_NullSpace(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::NullSpace *arg1 = (cr::NullSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_NullSpace",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__NullSpace, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NullSpace" "', argument " "1"" of type '" "cr::NullSpace *""'"); 
  }
  arg1 = reinterpret_cast< cr::NullSpace * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_HardLimits__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = 0 ;
  unsigned int arg2 ;
  cr::EulerMode arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  cr::HardLimits *result = 0 ;
  
  if (!SWIG_check_num_args("new_HardLimits",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_cr__world__Manipulator,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HardLimits" "', argument " "1"" of type '" "cr::world::Manipulator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HardLimits" "', argument " "1"" of type '" "cr::world::Manipulator const &""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HardLimits" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_HardLimits" "', argument " "3"" of type '" "cr::EulerMode""'");
  } 
  arg3 = static_cast< cr::EulerMode >(val3);
  result = (cr::HardLimits *)new cr::HardLimits((cr::world::Manipulator const &)*arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__HardLimits, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_HardLimits__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::world::Manipulator *arg1 = 0 ;
  unsigned int arg2 ;
  cr::EulerMode arg3 ;
  bool arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  cr::HardLimits *result = 0 ;
  
  if (!SWIG_check_num_args("new_HardLimits",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_cr__world__Manipulator,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HardLimits" "', argument " "1"" of type '" "cr::world::Manipulator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HardLimits" "', argument " "1"" of type '" "cr::world::Manipulator const &""'"); 
  }
  arg1 = reinterpret_cast< cr::world::Manipulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HardLimits" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_HardLimits" "', argument " "3"" of type '" "cr::EulerMode""'");
  } 
  arg3 = static_cast< cr::EulerMode >(val3);
  ecode4 = SWIG_AsVal_bool(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_HardLimits" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (cr::HardLimits *)new cr::HardLimits((cr::world::Manipulator const &)*arg1,arg2,arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__HardLimits, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_HardLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__world__Manipulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_HardLimits__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__world__Manipulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_HardLimits__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_HardLimits'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::HardLimits::HardLimits(cr::world::Manipulator const &,unsigned int,cr::EulerMode)\n"
    "    cr::HardLimits::HardLimits(cr::world::Manipulator const &,unsigned int,cr::EulerMode,bool)\n");
  return 1;
}


int _wrap_HardLimits_getIKSolver(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  cr::InverseKinematics *result = 0 ;
  
  if (!SWIG_check_num_args("HardLimits_getIKSolver",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_getIKSolver" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  result = (cr::InverseKinematics *)(arg1)->getIKSolver();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__InverseKinematics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_getNullSpaceSolver(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  cr::NullSpace *result = 0 ;
  
  if (!SWIG_check_num_args("HardLimits_getNullSpaceSolver",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_getNullSpaceSolver" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  result = (cr::NullSpace *)(arg1)->getNullSpaceSolver();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__NullSpace, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_useNullSpace(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("HardLimits_useNullSpace",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_useNullSpace" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HardLimits_useNullSpace" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->useNullSpace(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_nullSpaceStatus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("HardLimits_nullSpaceStatus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_nullSpaceStatus" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  result = (bool)(arg1)->nullSpaceStatus();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_setPoseElements__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  Eigen::Matrix< bool,6,1 > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("HardLimits_setPoseElements",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_setPoseElements" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HardLimits_setPoseElements" "', argument " "2"" of type '" "Eigen::Matrix< bool,6,1 >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HardLimits_setPoseElements" "', argument " "2"" of type '" "Eigen::Matrix< bool,6,1 >""'");
    } else {
      arg2 = *(reinterpret_cast< Eigen::Matrix< bool,6,1 > * >(argp2));
    }
  }
  (arg1)->setPoseElements(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_setPoseElements__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  Eigen::Matrix< int,6,1 > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Matrix< int,6,1 > temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("HardLimits_setPoseElements",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_setPoseElements" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::Matrix<int,6,1> >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  (arg1)->setPoseElements(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_setPoseElements(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__HardLimits, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HardLimits_setPoseElements__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__HardLimits, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        return _wrap_HardLimits_setPoseElements__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'HardLimits_setPoseElements'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::HardLimits::setPoseElements(Eigen::Matrix< bool,6,1 >)\n"
    "    cr::HardLimits::setPoseElements(Eigen::Matrix< int,6,1 >)\n");
  return 1;
}


int _wrap_HardLimits_getPoseElements(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::Matrix< bool,6,1 > result;
  
  if (!SWIG_check_num_args("HardLimits_getPoseElements",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_getPoseElements" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  result = (arg1)->getPoseElements();
  _out = SWIG_NewPointerObj((new Eigen::Matrix< bool,6,1 >(static_cast< const Eigen::Matrix< bool,6,1 >& >(result))), SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_setJointLimits__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("HardLimits_setJointLimits",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_setJointLimits" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HardLimits_setJointLimits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HardLimits_setJointLimits" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HardLimits_setJointLimits" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->setJointLimits(arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_setJointUpperLimit(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("HardLimits_setJointUpperLimit",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_setJointUpperLimit" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HardLimits_setJointUpperLimit" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HardLimits_setJointUpperLimit" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->setJointUpperLimit(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_setJointLowerLimit(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("HardLimits_setJointLowerLimit",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_setJointLowerLimit" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HardLimits_setJointLowerLimit" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HardLimits_setJointLowerLimit" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->setJointLowerLimit(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_getJointUpperLimit(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("HardLimits_getJointUpperLimit",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_getJointUpperLimit" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HardLimits_getJointUpperLimit" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->getJointUpperLimit(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_getJointLowerLimit(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("HardLimits_getJointLowerLimit",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_getJointLowerLimit" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HardLimits_getJointLowerLimit" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->getJointLowerLimit(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_setJointLimits__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  Eigen::VectorXd arg2 ;
  Eigen::VectorXd arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  Eigen::VectorXd temp3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("HardLimits_setJointLimits",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_setJointLimits" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp3, argv[2]))
    SWIG_fail;
    arg3 = temp3;
  }
  (arg1)->setJointLimits(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_setJointLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__HardLimits, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        {
          _v = mxIsNumeric(argv[2]);
        }
        if (_v) {
          return _wrap_HardLimits_setJointLimits__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__HardLimits, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_HardLimits_setJointLimits__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'HardLimits_setJointLimits'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::HardLimits::setJointLimits(int,double,double)\n"
    "    cr::HardLimits::setJointLimits(Eigen::VectorXd,Eigen::VectorXd)\n");
  return 1;
}


int _wrap_HardLimits_setJointUpperLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("HardLimits_setJointUpperLimits",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_setJointUpperLimits" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  (arg1)->setJointUpperLimits(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_setJointLowerLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("HardLimits_setJointLowerLimits",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_setJointLowerLimits" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  (arg1)->setJointLowerLimits(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_getJointUpperLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("HardLimits_getJointUpperLimits",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_getJointUpperLimits" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  result = (arg1)->getJointUpperLimits();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_getJointLowerLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("HardLimits_getJointLowerLimits",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_getJointLowerLimits" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  result = (arg1)->getJointLowerLimits();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_setQ0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("HardLimits_setQ0",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_setQ0" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  (arg1)->setQ0(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_getQ0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("HardLimits_getQ0",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_getQ0" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  result = (arg1)->getQ0();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_setToolPose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("HardLimits_setToolPose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_setToolPose" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  (arg1)->setToolPose(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_getToolPose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("HardLimits_getToolPose",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_getToolPose" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  result = (arg1)->getToolPose();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_setJointMotion(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("HardLimits_setJointMotion",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_setJointMotion" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  (arg1)->setJointMotion(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_getJointMotion(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("HardLimits_getJointMotion",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_getJointMotion" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  result = (arg1)->getJointMotion();
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HardLimits_solve(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  Eigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("HardLimits_solve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HardLimits_solve" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  {
    // In: non-const&
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    
    arg2 = &temp2;
  }
  result = (cr::Result)(arg1)->solve(*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    // Argout: &
    if (!CopyFromEigenToMatlabMatrix<Eigen::VectorXd >(argv[1], arg2))
    SWIG_fail;
  }
  return 0;
fail:
  return 1;
}


int _wrap_delete_HardLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::HardLimits *arg1 = (cr::HardLimits *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_HardLimits",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__HardLimits, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HardLimits" "', argument " "1"" of type '" "cr::HardLimits *""'"); 
  }
  arg1 = reinterpret_cast< cr::HardLimits * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SharedMemory(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  cr::ManagerRole arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  cr::SharedMemory *result = 0 ;
  
  if (!SWIG_check_num_args("new_SharedMemory",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SharedMemory" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SharedMemory" "', argument " "2"" of type '" "cr::ManagerRole""'");
  } 
  arg2 = static_cast< cr::ManagerRole >(val2);
  result = (cr::SharedMemory *)new cr::SharedMemory((char const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__SharedMemory, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return 1;
}


int _wrap_delete_SharedMemory(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::SharedMemory *arg1 = (cr::SharedMemory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SharedMemory",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__SharedMemory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SharedMemory" "', argument " "1"" of type '" "cr::SharedMemory *""'"); 
  }
  arg1 = reinterpret_cast< cr::SharedMemory * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SharedMemory_addSignal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::SharedMemory *arg1 = (cr::SharedMemory *) 0 ;
  char *arg2 = (char *) 0 ;
  Eigen::VectorXd arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Eigen::VectorXd temp3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SharedMemory_addSignal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__SharedMemory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMemory_addSignal" "', argument " "1"" of type '" "cr::SharedMemory *""'"); 
  }
  arg1 = reinterpret_cast< cr::SharedMemory * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SharedMemory_addSignal" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp3, argv[2]))
    SWIG_fail;
    arg3 = temp3;
  }
  (arg1)->addSignal((char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 1;
}


int _wrap_SharedMemory_removeSignal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::SharedMemory *arg1 = (cr::SharedMemory *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SharedMemory_removeSignal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__SharedMemory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMemory_removeSignal" "', argument " "1"" of type '" "cr::SharedMemory *""'"); 
  }
  arg1 = reinterpret_cast< cr::SharedMemory * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SharedMemory_removeSignal" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->removeSignal((char const *)arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 1;
}


int _wrap_SharedMemory_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::SharedMemory *arg1 = (cr::SharedMemory *) 0 ;
  char *arg2 = (char *) 0 ;
  Eigen::VectorXd arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Eigen::VectorXd temp3 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SharedMemory_set",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__SharedMemory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMemory_set" "', argument " "1"" of type '" "cr::SharedMemory *""'"); 
  }
  arg1 = reinterpret_cast< cr::SharedMemory * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SharedMemory_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp3, argv[2]))
    SWIG_fail;
    arg3 = temp3;
  }
  (arg1)->set((char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 1;
}


int _wrap_SharedMemory_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::SharedMemory *arg1 = (cr::SharedMemory *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("SharedMemory_get",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__SharedMemory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMemory_get" "', argument " "1"" of type '" "cr::SharedMemory *""'"); 
  }
  arg1 = reinterpret_cast< cr::SharedMemory * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SharedMemory_get" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (arg1)->get((char const *)arg2);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 1;
}


int _wrap_CRWaypoint_time_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRWaypoint *arg1 = (cr::CRWaypoint *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("CRWaypoint_time_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRWaypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRWaypoint_time_set" "', argument " "1"" of type '" "cr::CRWaypoint *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRWaypoint * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CRWaypoint_time_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->time = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRWaypoint_time_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRWaypoint *arg1 = (cr::CRWaypoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("CRWaypoint_time_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRWaypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRWaypoint_time_get" "', argument " "1"" of type '" "cr::CRWaypoint *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRWaypoint * >(argp1);
  result = (double) ((arg1)->time);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRWaypoint_position_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRWaypoint *arg1 = (cr::CRWaypoint *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("CRWaypoint_position_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRWaypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRWaypoint_position_set" "', argument " "1"" of type '" "cr::CRWaypoint *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRWaypoint * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  if (arg1) (arg1)->position = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRWaypoint_position_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRWaypoint *arg1 = (cr::CRWaypoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("CRWaypoint_position_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRWaypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRWaypoint_position_get" "', argument " "1"" of type '" "cr::CRWaypoint *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRWaypoint * >(argp1);
  result =  ((arg1)->position);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRWaypoint_velocity_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRWaypoint *arg1 = (cr::CRWaypoint *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("CRWaypoint_velocity_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRWaypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRWaypoint_velocity_set" "', argument " "1"" of type '" "cr::CRWaypoint *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRWaypoint * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  if (arg1) (arg1)->velocity = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRWaypoint_velocity_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRWaypoint *arg1 = (cr::CRWaypoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("CRWaypoint_velocity_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRWaypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRWaypoint_velocity_get" "', argument " "1"" of type '" "cr::CRWaypoint *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRWaypoint * >(argp1);
  result =  ((arg1)->velocity);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRWaypoint_acceleration_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRWaypoint *arg1 = (cr::CRWaypoint *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("CRWaypoint_acceleration_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRWaypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRWaypoint_acceleration_set" "', argument " "1"" of type '" "cr::CRWaypoint *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRWaypoint * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  if (arg1) (arg1)->acceleration = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRWaypoint_acceleration_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRWaypoint *arg1 = (cr::CRWaypoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("CRWaypoint_acceleration_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRWaypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRWaypoint_acceleration_get" "', argument " "1"" of type '" "cr::CRWaypoint *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRWaypoint * >(argp1);
  result =  ((arg1)->acceleration);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRWaypoint_jerk_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRWaypoint *arg1 = (cr::CRWaypoint *) 0 ;
  Eigen::VectorXd arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("CRWaypoint_jerk_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRWaypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRWaypoint_jerk_set" "', argument " "1"" of type '" "cr::CRWaypoint *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRWaypoint * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  if (arg1) (arg1)->jerk = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CRWaypoint_jerk_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRWaypoint *arg1 = (cr::CRWaypoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  Eigen::VectorXd result;
  
  if (!SWIG_check_num_args("CRWaypoint_jerk_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRWaypoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CRWaypoint_jerk_get" "', argument " "1"" of type '" "cr::CRWaypoint *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRWaypoint * >(argp1);
  result =  ((arg1)->jerk);
  {
    if (!ConvertFromEigenToMatlabMatrix<Eigen::VectorXd >(&_out, &result))
    SWIG_fail;
  }
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_CRWaypoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::CRWaypoint *result = 0 ;
  
  if (!SWIG_check_num_args("new_CRWaypoint",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::CRWaypoint *)new cr::CRWaypoint();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__CRWaypoint, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_CRWaypoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::CRWaypoint *arg1 = (cr::CRWaypoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_CRWaypoint",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__CRWaypoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CRWaypoint" "', argument " "1"" of type '" "cr::CRWaypoint *""'"); 
  }
  arg1 = reinterpret_cast< cr::CRWaypoint * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_TrajectoryGenerator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  cr::TrajectoryGenerator *result = 0 ;
  
  if (!SWIG_check_num_args("new_TrajectoryGenerator",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (cr::TrajectoryGenerator *)new cr::TrajectoryGenerator();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cr__TrajectoryGenerator, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TrajectoryGenerator_solve__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::TrajectoryGenerator *arg1 = (cr::TrajectoryGenerator *) 0 ;
  Eigen::VectorXd arg2 ;
  Eigen::VectorXd arg3 ;
  Eigen::VectorXd arg4 ;
  Eigen::VectorXd arg5 ;
  Eigen::VectorXd arg6 ;
  Eigen::VectorXd arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::VectorXd temp2 ;
  Eigen::VectorXd temp3 ;
  Eigen::VectorXd temp4 ;
  Eigen::VectorXd temp5 ;
  Eigen::VectorXd temp6 ;
  Eigen::VectorXd temp7 ;
  double val8 ;
  int ecode8 = 0 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("TrajectoryGenerator_solve",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__TrajectoryGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrajectoryGenerator_solve" "', argument " "1"" of type '" "cr::TrajectoryGenerator *""'"); 
  }
  arg1 = reinterpret_cast< cr::TrajectoryGenerator * >(argp1);
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp2, argv[1]))
    SWIG_fail;
    arg2 = temp2;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp3, argv[2]))
    SWIG_fail;
    arg3 = temp3;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp4, argv[3]))
    SWIG_fail;
    arg4 = temp4;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp5, argv[4]))
    SWIG_fail;
    arg5 = temp5;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp6, argv[5]))
    SWIG_fail;
    arg6 = temp6;
  }
  {
    if (!ConvertFromMatlabToEigenMatrix<Eigen::VectorXd >(&temp7, argv[6]))
    SWIG_fail;
    arg7 = temp7;
  }
  ecode8 = SWIG_AsVal_double(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TrajectoryGenerator_solve" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  result = (cr::Result)(arg1)->solve(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TrajectoryGenerator_solve__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::TrajectoryGenerator *arg1 = (cr::TrajectoryGenerator *) 0 ;
  cr::CRWaypoint arg2 ;
  cr::CRWaypoint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  cr::Result result;
  
  if (!SWIG_check_num_args("TrajectoryGenerator_solve",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__TrajectoryGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrajectoryGenerator_solve" "', argument " "1"" of type '" "cr::TrajectoryGenerator *""'"); 
  }
  arg1 = reinterpret_cast< cr::TrajectoryGenerator * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_cr__CRWaypoint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TrajectoryGenerator_solve" "', argument " "2"" of type '" "cr::CRWaypoint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrajectoryGenerator_solve" "', argument " "2"" of type '" "cr::CRWaypoint""'");
    } else {
      arg2 = *(reinterpret_cast< cr::CRWaypoint * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_cr__CRWaypoint,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TrajectoryGenerator_solve" "', argument " "3"" of type '" "cr::CRWaypoint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TrajectoryGenerator_solve" "', argument " "3"" of type '" "cr::CRWaypoint""'");
    } else {
      arg3 = *(reinterpret_cast< cr::CRWaypoint * >(argp3));
    }
  }
  result = (cr::Result)(arg1)->solve(arg2,arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TrajectoryGenerator_solve(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__TrajectoryGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cr__CRWaypoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_cr__CRWaypoint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TrajectoryGenerator_solve__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__TrajectoryGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = mxIsNumeric(argv[1]);
      }
      if (_v) {
        {
          _v = mxIsNumeric(argv[2]);
        }
        if (_v) {
          {
            _v = mxIsNumeric(argv[3]);
          }
          if (_v) {
            {
              _v = mxIsNumeric(argv[4]);
            }
            if (_v) {
              {
                _v = mxIsNumeric(argv[5]);
              }
              if (_v) {
                {
                  _v = mxIsNumeric(argv[6]);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_TrajectoryGenerator_solve__SWIG_0(resc,resv,argc,argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TrajectoryGenerator_solve'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::TrajectoryGenerator::solve(Eigen::VectorXd,Eigen::VectorXd,Eigen::VectorXd,Eigen::VectorXd,Eigen::VectorXd,Eigen::VectorXd,double)\n"
    "    cr::TrajectoryGenerator::solve(cr::CRWaypoint,cr::CRWaypoint)\n");
  return 1;
}


int _wrap_TrajectoryGenerator_step__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::TrajectoryGenerator *arg1 = (cr::TrajectoryGenerator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  cr::CRWaypoint result;
  
  if (!SWIG_check_num_args("TrajectoryGenerator_step",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__TrajectoryGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrajectoryGenerator_step" "', argument " "1"" of type '" "cr::TrajectoryGenerator *""'"); 
  }
  arg1 = reinterpret_cast< cr::TrajectoryGenerator * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TrajectoryGenerator_step" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (arg1)->step(arg2);
  _out = SWIG_NewPointerObj((new cr::CRWaypoint(static_cast< const cr::CRWaypoint& >(result))), SWIGTYPE_p_cr__CRWaypoint, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TrajectoryGenerator_step__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::TrajectoryGenerator *arg1 = (cr::TrajectoryGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  cr::CRWaypoint result;
  
  if (!SWIG_check_num_args("TrajectoryGenerator_step",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__TrajectoryGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TrajectoryGenerator_step" "', argument " "1"" of type '" "cr::TrajectoryGenerator *""'"); 
  }
  arg1 = reinterpret_cast< cr::TrajectoryGenerator * >(argp1);
  result = (arg1)->step();
  _out = SWIG_NewPointerObj((new cr::CRWaypoint(static_cast< const cr::CRWaypoint& >(result))), SWIGTYPE_p_cr__CRWaypoint, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TrajectoryGenerator_step(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__TrajectoryGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TrajectoryGenerator_step__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cr__TrajectoryGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TrajectoryGenerator_step__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TrajectoryGenerator_step'."
    "  Possible C/C++ prototypes are:\n"
    "    cr::TrajectoryGenerator::step(double)\n"
    "    cr::TrajectoryGenerator::step()\n");
  return 1;
}


int _wrap_delete_TrajectoryGenerator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  cr::TrajectoryGenerator *arg1 = (cr::TrajectoryGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_TrajectoryGenerator",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_cr__TrajectoryGenerator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TrajectoryGenerator" "', argument " "1"" of type '" "cr::TrajectoryGenerator *""'"); 
  }
  arg1 = reinterpret_cast< cr::TrajectoryGenerator * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_poseElements(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  bool arg1 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  mxArray * _out;
  Eigen::Matrix< bool,6,1 > result;
  
  if (!SWIG_check_num_args("poseElements",argc,6,6,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_bool(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poseElements" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "poseElements" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "poseElements" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "poseElements" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "poseElements" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "poseElements" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = poseElements(arg1,arg2,arg3,arg4,arg5,arg6);
  _out = SWIG_NewPointerObj((new Eigen::Matrix< bool,6,1 >(static_cast< const Eigen::Matrix< bool,6,1 >& >(result))), SWIGTYPE_p_Eigen__MatrixT_bool_6_1_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_cr__FrameEulerTo_p_cr__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cr::Frame *)  ((cr::FrameEuler *) x));
}
static void *_p_cr__FrameDhTo_p_cr__Frame(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cr::Frame *)  ((cr::FrameDh *) x));
}
static void *_p_cr__NoiseUniformTo_p_cr__NoiseModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cr::NoiseModel *)  ((cr::NoiseUniform *) x));
}
static void *_p_cr__NoiseGaussianTo_p_cr__NoiseModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cr::NoiseModel *)  ((cr::NoiseGaussian *) x));
}
static void *_p_cr__NoiseMixtureTo_p_cr__NoiseModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((cr::NoiseModel *)  ((cr::NoiseMixture *) x));
}
static swig_type_info _swigt__p_Eigen__MatrixT_bool_6_1_t = {"_p_Eigen__MatrixT_bool_6_1_t", "Eigen::Matrix< bool,6,1 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixT_double_6_6_t = {"_p_Eigen__MatrixT_double_6_6_t", "Eigen::Matrix< double,6,6 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixXd = {"_p_Eigen__MatrixXd", "std::vector< Eigen::MatrixXd >::value_type *|Eigen::MatrixXd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__VectorXd = {"_p_Eigen__VectorXd", "Eigen::VectorXd *|std::vector< Eigen::VectorXd >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__VectorXi = {"_p_Eigen__VectorXi", "Eigen::VectorXi *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__interprocess__allocatorT_double_boost__interprocess__managed_shared_memory__segment_manager_t = {"_p_boost__interprocess__allocatorT_double_boost__interprocess__managed_shared_memory__segment_manager_t", "cr::ShmemAllocator *|boost::interprocess::allocator< double,boost::interprocess::managed_shared_memory::segment_manager > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__interprocess__vectorT_double_cr__ShmemAllocator_t = {"_p_boost__interprocess__vectorT_double_cr__ShmemAllocator_t", "cr::ShmemData *|boost::interprocess::vector< double,cr::ShmemAllocator > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cr__CRParamNoiseGaussian = {"_p_cr__CRParamNoiseGaussian", "cr::CRParamNoiseGaussian *", 0, 0, (void*)"CoreRobotics.CRParamNoiseGaussian", 0};
static swig_type_info _swigt__p_cr__CRParamNoiseGeneric = {"_p_cr__CRParamNoiseGeneric", "cr::CRParamNoiseGeneric *", 0, 0, (void*)"CoreRobotics.CRParamNoiseGeneric", 0};
static swig_type_info _swigt__p_cr__CRParamNoiseMixture = {"_p_cr__CRParamNoiseMixture", "cr::CRParamNoiseMixture *", 0, 0, (void*)"CoreRobotics.CRParamNoiseMixture", 0};
static swig_type_info _swigt__p_cr__CRParamNoiseUniform = {"_p_cr__CRParamNoiseUniform", "cr::CRParamNoiseUniform *", 0, 0, (void*)"CoreRobotics.CRParamNoiseUniform", 0};
static swig_type_info _swigt__p_cr__CRWaypoint = {"_p_cr__CRWaypoint", "cr::CRWaypoint *", 0, 0, (void*)"CoreRobotics.CRWaypoint", 0};
static swig_type_info _swigt__p_cr__Clock = {"_p_cr__Clock", "cr::Clock *", 0, 0, (void*)"CoreRobotics.Clock", 0};
static swig_type_info _swigt__p_cr__Conversion = {"_p_cr__Conversion", "cr::Conversion *", 0, 0, (void*)"CoreRobotics.Conversion", 0};
static swig_type_info _swigt__p_cr__Frame = {"_p_cr__Frame", "cr::Frame *", 0, 0, (void*)"CoreRobotics.Frame", 0};
static swig_type_info _swigt__p_cr__FrameDh = {"_p_cr__FrameDh", "cr::FrameDh *", 0, 0, (void*)"CoreRobotics.FrameDh", 0};
static swig_type_info _swigt__p_cr__FrameEuler = {"_p_cr__FrameEuler", "cr::FrameEuler *", 0, 0, (void*)"CoreRobotics.FrameEuler", 0};
static swig_type_info _swigt__p_cr__HardLimits = {"_p_cr__HardLimits", "cr::HardLimits *", 0, 0, (void*)"CoreRobotics.HardLimits", 0};
static swig_type_info _swigt__p_cr__Integration = {"_p_cr__Integration", "cr::Integration *", 0, 0, (void*)"CoreRobotics.Integration", 0};
static swig_type_info _swigt__p_cr__InverseKinematics = {"_p_cr__InverseKinematics", "cr::InverseKinematics *", 0, 0, (void*)"CoreRobotics.InverseKinematics", 0};
static swig_type_info _swigt__p_cr__Matrix = {"_p_cr__Matrix", "cr::Matrix *", 0, 0, (void*)"CoreRobotics.Matrix", 0};
static swig_type_info _swigt__p_cr__NoiseGaussian = {"_p_cr__NoiseGaussian", "cr::NoiseGaussian *", 0, 0, (void*)"CoreRobotics.NoiseGaussian", 0};
static swig_type_info _swigt__p_cr__NoiseMixture = {"_p_cr__NoiseMixture", "cr::NoiseMixture *", 0, 0, (void*)"CoreRobotics.NoiseMixture", 0};
static swig_type_info _swigt__p_cr__NoiseModel = {"_p_cr__NoiseModel", "cr::NoiseModel *", 0, 0, (void*)"CoreRobotics.NoiseModel", 0};
static swig_type_info _swigt__p_cr__NoiseUniform = {"_p_cr__NoiseUniform", "cr::NoiseUniform *", 0, 0, (void*)"CoreRobotics.NoiseUniform", 0};
static swig_type_info _swigt__p_cr__NullSpace = {"_p_cr__NullSpace", "cr::NullSpace *", 0, 0, (void*)"CoreRobotics.NullSpace", 0};
static swig_type_info _swigt__p_cr__RigidBody = {"_p_cr__RigidBody", "cr::RigidBody *", 0, 0, (void*)"CoreRobotics.RigidBody", 0};
static swig_type_info _swigt__p_cr__SensorLinear = {"_p_cr__SensorLinear", "cr::SensorLinear *", 0, 0, (void*)"CoreRobotics.SensorLinear", 0};
static swig_type_info _swigt__p_cr__SharedMemory = {"_p_cr__SharedMemory", "cr::SharedMemory *", 0, 0, (void*)"CoreRobotics.SharedMemory", 0};
static swig_type_info _swigt__p_cr__TrajectoryGenerator = {"_p_cr__TrajectoryGenerator", "cr::TrajectoryGenerator *", 0, 0, (void*)"CoreRobotics.TrajectoryGenerator", 0};
static swig_type_info _swigt__p_cr__world__Manipulator = {"_p_cr__world__Manipulator", "cr::world::Manipulator *", 0, 0, (void*)"CoreRobotics.Manipulator", 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_Eigen__VectorXd__double = {"_p_f_Eigen__VectorXd__double", "double (*)(Eigen::VectorXd)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_double__Eigen__VectorXd = {"_p_f_double__Eigen__VectorXd", "Eigen::VectorXd (*)(double)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Eigen__MatrixXd_t = {"_p_std__allocatorT_Eigen__MatrixXd_t", "std::vector< Eigen::MatrixXd >::allocator_type *|std::allocator< Eigen::MatrixXd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Eigen__VectorXd_t = {"_p_std__allocatorT_Eigen__VectorXd_t", "std::vector< Eigen::VectorXd >::allocator_type *|std::allocator< Eigen::VectorXd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_cr__world__Manipulator_t = {"_p_std__shared_ptrT_cr__world__Manipulator_t", "std::shared_ptr< cr::world::Manipulator > *|cr::world::ManipulatorPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t = {"_p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t", "std::vector< Eigen::MatrixXd,std::allocator< Eigen::MatrixXd > > *|std::vector< Eigen::MatrixXd > *", 0, 0, (void*)"CoreRobotics.vectorMatrixXd", 0};
static swig_type_info _swigt__p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t = {"_p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t", "std::vector< Eigen::VectorXd,std::allocator< Eigen::VectorXd > > *|std::vector< Eigen::VectorXd > *", 0, 0, (void*)"CoreRobotics.vectorVectorXd", 0};
static swig_type_info _swigt__p_std__vectorT_cr__NoiseModel_p_std__allocatorT_cr__NoiseModel_p_t_t = {"_p_std__vectorT_cr__NoiseModel_p_std__allocatorT_cr__NoiseModel_p_t_t", "std::vector< cr::NoiseModel *,std::allocator< cr::NoiseModel * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__MatlabSwigIterator = {"_p_swig__MatlabSwigIterator", "swig::MatlabSwigIterator *", 0, 0, (void*)"CoreRobotics.MatlabSwigIterator", 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Eigen__MatrixT_bool_6_1_t,
  &_swigt__p_Eigen__MatrixT_double_6_6_t,
  &_swigt__p_Eigen__MatrixXd,
  &_swigt__p_Eigen__VectorXd,
  &_swigt__p_Eigen__VectorXi,
  &_swigt__p_allocator_type,
  &_swigt__p_boost__interprocess__allocatorT_double_boost__interprocess__managed_shared_memory__segment_manager_t,
  &_swigt__p_boost__interprocess__vectorT_double_cr__ShmemAllocator_t,
  &_swigt__p_char,
  &_swigt__p_cr__CRParamNoiseGaussian,
  &_swigt__p_cr__CRParamNoiseGeneric,
  &_swigt__p_cr__CRParamNoiseMixture,
  &_swigt__p_cr__CRParamNoiseUniform,
  &_swigt__p_cr__CRWaypoint,
  &_swigt__p_cr__Clock,
  &_swigt__p_cr__Conversion,
  &_swigt__p_cr__Frame,
  &_swigt__p_cr__FrameDh,
  &_swigt__p_cr__FrameEuler,
  &_swigt__p_cr__HardLimits,
  &_swigt__p_cr__Integration,
  &_swigt__p_cr__InverseKinematics,
  &_swigt__p_cr__Matrix,
  &_swigt__p_cr__NoiseGaussian,
  &_swigt__p_cr__NoiseMixture,
  &_swigt__p_cr__NoiseModel,
  &_swigt__p_cr__NoiseUniform,
  &_swigt__p_cr__NullSpace,
  &_swigt__p_cr__RigidBody,
  &_swigt__p_cr__SensorLinear,
  &_swigt__p_cr__SharedMemory,
  &_swigt__p_cr__TrajectoryGenerator,
  &_swigt__p_cr__world__Manipulator,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_Eigen__VectorXd__double,
  &_swigt__p_f_double__Eigen__VectorXd,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_Eigen__MatrixXd_t,
  &_swigt__p_std__allocatorT_Eigen__VectorXd_t,
  &_swigt__p_std__shared_ptrT_cr__world__Manipulator_t,
  &_swigt__p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t,
  &_swigt__p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t,
  &_swigt__p_std__vectorT_cr__NoiseModel_p_std__allocatorT_cr__NoiseModel_p_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_swig__MatlabSwigIterator,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_Eigen__MatrixT_bool_6_1_t[] = {  {&_swigt__p_Eigen__MatrixT_bool_6_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixT_double_6_6_t[] = {  {&_swigt__p_Eigen__MatrixT_double_6_6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixXd[] = {  {&_swigt__p_Eigen__MatrixXd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__VectorXd[] = {  {&_swigt__p_Eigen__VectorXd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__VectorXi[] = {  {&_swigt__p_Eigen__VectorXi, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__interprocess__allocatorT_double_boost__interprocess__managed_shared_memory__segment_manager_t[] = {  {&_swigt__p_boost__interprocess__allocatorT_double_boost__interprocess__managed_shared_memory__segment_manager_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__interprocess__vectorT_double_cr__ShmemAllocator_t[] = {  {&_swigt__p_boost__interprocess__vectorT_double_cr__ShmemAllocator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__CRParamNoiseGaussian[] = {  {&_swigt__p_cr__CRParamNoiseGaussian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__CRParamNoiseGeneric[] = {  {&_swigt__p_cr__CRParamNoiseGeneric, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__CRParamNoiseMixture[] = {  {&_swigt__p_cr__CRParamNoiseMixture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__CRParamNoiseUniform[] = {  {&_swigt__p_cr__CRParamNoiseUniform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__CRWaypoint[] = {  {&_swigt__p_cr__CRWaypoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__Clock[] = {  {&_swigt__p_cr__Clock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__Conversion[] = {  {&_swigt__p_cr__Conversion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__Frame[] = {  {&_swigt__p_cr__Frame, 0, 0, 0},  {&_swigt__p_cr__FrameEuler, _p_cr__FrameEulerTo_p_cr__Frame, 0, 0},  {&_swigt__p_cr__FrameDh, _p_cr__FrameDhTo_p_cr__Frame, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__FrameDh[] = {  {&_swigt__p_cr__FrameDh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__FrameEuler[] = {  {&_swigt__p_cr__FrameEuler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__HardLimits[] = {  {&_swigt__p_cr__HardLimits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__Integration[] = {  {&_swigt__p_cr__Integration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__InverseKinematics[] = {  {&_swigt__p_cr__InverseKinematics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__Matrix[] = {  {&_swigt__p_cr__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__NoiseGaussian[] = {  {&_swigt__p_cr__NoiseGaussian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__NoiseMixture[] = {  {&_swigt__p_cr__NoiseMixture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__NoiseModel[] = {  {&_swigt__p_cr__NoiseModel, 0, 0, 0},  {&_swigt__p_cr__NoiseUniform, _p_cr__NoiseUniformTo_p_cr__NoiseModel, 0, 0},  {&_swigt__p_cr__NoiseGaussian, _p_cr__NoiseGaussianTo_p_cr__NoiseModel, 0, 0},  {&_swigt__p_cr__NoiseMixture, _p_cr__NoiseMixtureTo_p_cr__NoiseModel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__NoiseUniform[] = {  {&_swigt__p_cr__NoiseUniform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__NullSpace[] = {  {&_swigt__p_cr__NullSpace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__RigidBody[] = {  {&_swigt__p_cr__RigidBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__SensorLinear[] = {  {&_swigt__p_cr__SensorLinear, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__SharedMemory[] = {  {&_swigt__p_cr__SharedMemory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__TrajectoryGenerator[] = {  {&_swigt__p_cr__TrajectoryGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cr__world__Manipulator[] = {  {&_swigt__p_cr__world__Manipulator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_Eigen__VectorXd__double[] = {  {&_swigt__p_f_Eigen__VectorXd__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_double__Eigen__VectorXd[] = {  {&_swigt__p_f_double__Eigen__VectorXd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Eigen__MatrixXd_t[] = {  {&_swigt__p_std__allocatorT_Eigen__MatrixXd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Eigen__VectorXd_t[] = {  {&_swigt__p_std__allocatorT_Eigen__VectorXd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_cr__world__Manipulator_t[] = {  {&_swigt__p_std__shared_ptrT_cr__world__Manipulator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t[] = {  {&_swigt__p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t[] = {  {&_swigt__p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_cr__NoiseModel_p_std__allocatorT_cr__NoiseModel_p_t_t[] = {  {&_swigt__p_std__vectorT_cr__NoiseModel_p_std__allocatorT_cr__NoiseModel_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__MatlabSwigIterator[] = {  {&_swigt__p_swig__MatlabSwigIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Eigen__MatrixT_bool_6_1_t,
  _swigc__p_Eigen__MatrixT_double_6_6_t,
  _swigc__p_Eigen__MatrixXd,
  _swigc__p_Eigen__VectorXd,
  _swigc__p_Eigen__VectorXi,
  _swigc__p_allocator_type,
  _swigc__p_boost__interprocess__allocatorT_double_boost__interprocess__managed_shared_memory__segment_manager_t,
  _swigc__p_boost__interprocess__vectorT_double_cr__ShmemAllocator_t,
  _swigc__p_char,
  _swigc__p_cr__CRParamNoiseGaussian,
  _swigc__p_cr__CRParamNoiseGeneric,
  _swigc__p_cr__CRParamNoiseMixture,
  _swigc__p_cr__CRParamNoiseUniform,
  _swigc__p_cr__CRWaypoint,
  _swigc__p_cr__Clock,
  _swigc__p_cr__Conversion,
  _swigc__p_cr__Frame,
  _swigc__p_cr__FrameDh,
  _swigc__p_cr__FrameEuler,
  _swigc__p_cr__HardLimits,
  _swigc__p_cr__Integration,
  _swigc__p_cr__InverseKinematics,
  _swigc__p_cr__Matrix,
  _swigc__p_cr__NoiseGaussian,
  _swigc__p_cr__NoiseMixture,
  _swigc__p_cr__NoiseModel,
  _swigc__p_cr__NoiseUniform,
  _swigc__p_cr__NullSpace,
  _swigc__p_cr__RigidBody,
  _swigc__p_cr__SensorLinear,
  _swigc__p_cr__SharedMemory,
  _swigc__p_cr__TrajectoryGenerator,
  _swigc__p_cr__world__Manipulator,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_Eigen__VectorXd__double,
  _swigc__p_f_double__Eigen__VectorXd,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_Eigen__MatrixXd_t,
  _swigc__p_std__allocatorT_Eigen__VectorXd_t,
  _swigc__p_std__shared_ptrT_cr__world__Manipulator_t,
  _swigc__p_std__vectorT_Eigen__MatrixXd_std__allocatorT_Eigen__MatrixXd_t_t,
  _swigc__p_std__vectorT_Eigen__VectorXd_std__allocatorT_Eigen__VectorXd_t_t,
  _swigc__p_std__vectorT_cr__NoiseModel_p_std__allocatorT_cr__NoiseModel_p_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_swig__MatlabSwigIterator,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


void SWIG_Matlab_LoadModule() {
  /* Only call once */
  static int moduleIsLoaded = 0;
  if (moduleIsLoaded) return;
  moduleIsLoaded = 1;

  /* Prevent unloading this file until MATLAB exits */
  mexLock();

  /* Exit function (called when unloaded) */
  mexAtExit(SWIG_Matlab_ExitFcn);

  /* Load dependent modules and initialize */

SWIG_InitializeModule(0);

}


SWIGINTERN const char* SwigConstantName(int con_id) {
  switch (con_id) {
  case 0: return "SHARED_PTR_DISOWN";
  case 1: return "CR_RESULT_SUCCESS";
  case 2: return "CR_RESULT_SINGULAR";
  case 3: return "CR_RESULT_UNWRITABLE";
  case 4: return "CR_RESULT_BAD_IC";
  case 5: return "CR_RESULT_NOT_FOUND";
  case 6: return "CR_RUN_STATE_RUNNING";
  case 7: return "CR_RUN_STATE_STOPPED";
  case 8: return "CR_RUN_STATE_PAUSED";
  case 9: return "CR_EULER_MODE_ZXZ";
  case 10: return "CR_EULER_MODE_XYX";
  case 11: return "CR_EULER_MODE_YZY";
  case 12: return "CR_EULER_MODE_ZYZ";
  case 13: return "CR_EULER_MODE_XZX";
  case 14: return "CR_EULER_MODE_YXY";
  case 15: return "CR_EULER_MODE_XYZ";
  case 16: return "CR_EULER_MODE_YZX";
  case 17: return "CR_EULER_MODE_ZXY";
  case 18: return "CR_EULER_MODE_XZY";
  case 19: return "CR_EULER_MODE_ZYX";
  case 20: return "CR_EULER_MODE_YXZ";
  case 21: return "CR_EULER_FREE_NONE";
  case 22: return "CR_EULER_FREE_POS_X";
  case 23: return "CR_EULER_FREE_POS_Y";
  case 24: return "CR_EULER_FREE_POS_Z";
  case 25: return "CR_EULER_FREE_ANG_A";
  case 26: return "CR_EULER_FREE_ANG_B";
  case 27: return "CR_EULER_FREE_ANG_G";
  case 28: return "CR_DH_FREE_NONE";
  case 29: return "CR_DH_FREE_R";
  case 30: return "CR_DH_FREE_ALPHA";
  case 31: return "CR_DH_FREE_D";
  case 32: return "CR_DH_FREE_THETA";
  case 33: return "CR_DH_MODE_CLASSIC";
  case 34: return "CR_DH_MODE_MODIFIED";
  case 35: return "CR_MANAGER_SERVER";
  case 36: return "CR_MANAGER_CLIENT";
  default: return 0;
  }
}

SWIGINTERN int swigConstantName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    SWIG_Error(SWIG_RuntimeError, "This mex file should only be called from inside the .m files generated by SWIG. The input should be the constant ID.");
    return 1;
  }
  if (resc!=1) {
    SWIG_Error(SWIG_RuntimeError, "The function should have one output.");
    return 1;
  }
  int con_id = (int)mxGetScalar(*argv);
  const char* s = SwigConstantName(con_id);
  if (s==0) {
    SWIG_Error(SWIG_RuntimeError, "No such constant ID.");
    return 1;
  }
  *resv = mxCreateString(s);
  return 0;
}

SWIGINTERN int swigConstant(int SWIGUNUSEDPARM(resc), mxArray *resv[], int argc, mxArray *argv[]) {
  if (--argc < 0 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    SWIG_Error(SWIG_RuntimeError, "This function should only be called from inside the .m files generated by SWIG. First input should be the constant ID .");
    return 1;
  }
  int con_id = (int)mxGetScalar(*argv++);
  switch (con_id) {
  case 0: *resv = SWIG_Matlab_SetConstant(module_ns,"SHARED_PTR_DISOWN",SWIG_From_int(static_cast< int >(0)));; break;
  case 1: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_RESULT_SUCCESS",SWIG_From_int(static_cast< int >(cr::CR_RESULT_SUCCESS)));; break;
  case 2: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_RESULT_SINGULAR",SWIG_From_int(static_cast< int >(cr::CR_RESULT_SINGULAR)));; break;
  case 3: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_RESULT_UNWRITABLE",SWIG_From_int(static_cast< int >(cr::CR_RESULT_UNWRITABLE)));; break;
  case 4: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_RESULT_BAD_IC",SWIG_From_int(static_cast< int >(cr::CR_RESULT_BAD_IC)));; break;
  case 5: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_RESULT_NOT_FOUND",SWIG_From_int(static_cast< int >(cr::CR_RESULT_NOT_FOUND)));; break;
  case 6: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_RUN_STATE_RUNNING",SWIG_From_int(static_cast< int >(cr::CR_RUN_STATE_RUNNING)));; break;
  case 7: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_RUN_STATE_STOPPED",SWIG_From_int(static_cast< int >(cr::CR_RUN_STATE_STOPPED)));; break;
  case 8: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_RUN_STATE_PAUSED",SWIG_From_int(static_cast< int >(cr::CR_RUN_STATE_PAUSED)));; break;
  case 9: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_MODE_ZXZ",SWIG_From_int(static_cast< int >(cr::CR_EULER_MODE_ZXZ)));; break;
  case 10: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_MODE_XYX",SWIG_From_int(static_cast< int >(cr::CR_EULER_MODE_XYX)));; break;
  case 11: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_MODE_YZY",SWIG_From_int(static_cast< int >(cr::CR_EULER_MODE_YZY)));; break;
  case 12: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_MODE_ZYZ",SWIG_From_int(static_cast< int >(cr::CR_EULER_MODE_ZYZ)));; break;
  case 13: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_MODE_XZX",SWIG_From_int(static_cast< int >(cr::CR_EULER_MODE_XZX)));; break;
  case 14: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_MODE_YXY",SWIG_From_int(static_cast< int >(cr::CR_EULER_MODE_YXY)));; break;
  case 15: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_MODE_XYZ",SWIG_From_int(static_cast< int >(cr::CR_EULER_MODE_XYZ)));; break;
  case 16: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_MODE_YZX",SWIG_From_int(static_cast< int >(cr::CR_EULER_MODE_YZX)));; break;
  case 17: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_MODE_ZXY",SWIG_From_int(static_cast< int >(cr::CR_EULER_MODE_ZXY)));; break;
  case 18: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_MODE_XZY",SWIG_From_int(static_cast< int >(cr::CR_EULER_MODE_XZY)));; break;
  case 19: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_MODE_ZYX",SWIG_From_int(static_cast< int >(cr::CR_EULER_MODE_ZYX)));; break;
  case 20: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_MODE_YXZ",SWIG_From_int(static_cast< int >(cr::CR_EULER_MODE_YXZ)));; break;
  case 21: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_FREE_NONE",SWIG_From_int(static_cast< int >(cr::CR_EULER_FREE_NONE)));; break;
  case 22: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_FREE_POS_X",SWIG_From_int(static_cast< int >(cr::CR_EULER_FREE_POS_X)));; break;
  case 23: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_FREE_POS_Y",SWIG_From_int(static_cast< int >(cr::CR_EULER_FREE_POS_Y)));; break;
  case 24: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_FREE_POS_Z",SWIG_From_int(static_cast< int >(cr::CR_EULER_FREE_POS_Z)));; break;
  case 25: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_FREE_ANG_A",SWIG_From_int(static_cast< int >(cr::CR_EULER_FREE_ANG_A)));; break;
  case 26: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_FREE_ANG_B",SWIG_From_int(static_cast< int >(cr::CR_EULER_FREE_ANG_B)));; break;
  case 27: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_EULER_FREE_ANG_G",SWIG_From_int(static_cast< int >(cr::CR_EULER_FREE_ANG_G)));; break;
  case 28: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_DH_FREE_NONE",SWIG_From_int(static_cast< int >(cr::CR_DH_FREE_NONE)));; break;
  case 29: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_DH_FREE_R",SWIG_From_int(static_cast< int >(cr::CR_DH_FREE_R)));; break;
  case 30: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_DH_FREE_ALPHA",SWIG_From_int(static_cast< int >(cr::CR_DH_FREE_ALPHA)));; break;
  case 31: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_DH_FREE_D",SWIG_From_int(static_cast< int >(cr::CR_DH_FREE_D)));; break;
  case 32: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_DH_FREE_THETA",SWIG_From_int(static_cast< int >(cr::CR_DH_FREE_THETA)));; break;
  case 33: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_DH_MODE_CLASSIC",SWIG_From_int(static_cast< int >(cr::CR_DH_MODE_CLASSIC)));; break;
  case 34: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_DH_MODE_MODIFIED",SWIG_From_int(static_cast< int >(cr::CR_DH_MODE_MODIFIED)));; break;
  case 35: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_MANAGER_SERVER",SWIG_From_int(static_cast< int >(cr::CR_MANAGER_SERVER)));; break;
  case 36: *resv = SWIG_Matlab_SetConstant(module_ns,"CR_MANAGER_CLIENT",SWIG_From_int(static_cast< int >(cr::CR_MANAGER_CLIENT)));; break;
  default:
    SWIG_Error(SWIG_RuntimeError, "No such constant.");
    return 1;
  }
  return 0;
}

SWIGINTERN const char* SwigFunctionName(int fcn_id) {
  switch(fcn_id) {
  case 0: return "swigConstant";
  case 1: return "swigFunctionName";
  case 2: return "swigConstantName";
  case 3: return "swigThis";
  case 4: return "swigTouch";
  case 5: return "delete_MatlabSwigIterator";
  case 6: return "MatlabSwigIterator_value";
  case 7: return "MatlabSwigIterator_incr";
  case 8: return "MatlabSwigIterator_decr";
  case 9: return "MatlabSwigIterator_distance";
  case 10: return "MatlabSwigIterator_equal";
  case 11: return "MatlabSwigIterator_copy";
  case 12: return "MatlabSwigIterator_next";
  case 13: return "MatlabSwigIterator_previous";
  case 14: return "MatlabSwigIterator_advance";
  case 15: return "MatlabSwigIterator_eq";
  case 16: return "MatlabSwigIterator_ne";
  case 17: return "MatlabSwigIterator_TODOincr";
  case 18: return "MatlabSwigIterator_TODOdecr";
  case 19: return "MatlabSwigIterator_plus";
  case 20: return "MatlabSwigIterator_minus";
  case 21: return "vectorMatrixXd_pop";
  case 22: return "vectorMatrixXd_brace";
  case 23: return "vectorMatrixXd_setbrace";
  case 24: return "vectorMatrixXd_append";
  case 25: return "vectorMatrixXd_empty";
  case 26: return "vectorMatrixXd_size";
  case 27: return "vectorMatrixXd_swap";
  case 28: return "vectorMatrixXd_begin";
  case 29: return "vectorMatrixXd_end";
  case 30: return "vectorMatrixXd_rbegin";
  case 31: return "vectorMatrixXd_rend";
  case 32: return "vectorMatrixXd_clear";
  case 33: return "vectorMatrixXd_get_allocator";
  case 34: return "vectorMatrixXd_pop_back";
  case 35: return "vectorMatrixXd_erase";
  case 36: return "new_vectorMatrixXd";
  case 37: return "vectorMatrixXd_push_back";
  case 38: return "vectorMatrixXd_front";
  case 39: return "vectorMatrixXd_back";
  case 40: return "vectorMatrixXd_assign";
  case 41: return "vectorMatrixXd_resize";
  case 42: return "vectorMatrixXd_insert";
  case 43: return "vectorMatrixXd_reserve";
  case 44: return "vectorMatrixXd_capacity";
  case 45: return "delete_vectorMatrixXd";
  case 46: return "vectorVectorXd_pop";
  case 47: return "vectorVectorXd_brace";
  case 48: return "vectorVectorXd_setbrace";
  case 49: return "vectorVectorXd_append";
  case 50: return "vectorVectorXd_empty";
  case 51: return "vectorVectorXd_size";
  case 52: return "vectorVectorXd_swap";
  case 53: return "vectorVectorXd_begin";
  case 54: return "vectorVectorXd_end";
  case 55: return "vectorVectorXd_rbegin";
  case 56: return "vectorVectorXd_rend";
  case 57: return "vectorVectorXd_clear";
  case 58: return "vectorVectorXd_get_allocator";
  case 59: return "vectorVectorXd_pop_back";
  case 60: return "vectorVectorXd_erase";
  case 61: return "new_vectorVectorXd";
  case 62: return "vectorVectorXd_push_back";
  case 63: return "vectorVectorXd_front";
  case 64: return "vectorVectorXd_back";
  case 65: return "vectorVectorXd_assign";
  case 66: return "vectorVectorXd_resize";
  case 67: return "vectorVectorXd_insert";
  case 68: return "vectorVectorXd_reserve";
  case 69: return "vectorVectorXd_capacity";
  case 70: return "delete_vectorVectorXd";
  case 71: return "new_Clock";
  case 72: return "delete_Clock";
  case 73: return "Clock_startTimer";
  case 74: return "Clock_getElapsedTime";
  case 75: return "Clock_sleep";
  case 76: return "Conversion_deg2rad";
  case 77: return "Conversion_rad2deg";
  case 78: return "Conversion_wrapToPi";
  case 79: return "new_Conversion";
  case 80: return "delete_Conversion";
  case 81: return "new_Integration";
  case 82: return "delete_Integration";
  case 83: return "Matrix_reducedVector";
  case 84: return "Matrix_reducedMatrix";
  case 85: return "Matrix_svd";
  case 86: return "Matrix_svdInverse";
  case 87: return "Matrix_rotAboutX";
  case 88: return "Matrix_rotAboutY";
  case 89: return "Matrix_rotAboutZ";
  case 90: return "Matrix_normL1";
  case 91: return "Matrix_normL2";
  case 92: return "Matrix_normLinf";
  case 93: return "new_Matrix";
  case 94: return "delete_Matrix";
  case 95: return "new_Frame";
  case 96: return "Frame_setFreeValue";
  case 97: return "Frame_getFreeValue";
  case 98: return "Frame_setRotation";
  case 99: return "Frame_setTranslation";
  case 100: return "Frame_setRotationAndTranslation";
  case 101: return "Frame_getRotationAndTranslation";
  case 102: return "Frame_getTransformToParent";
  case 103: return "Frame_getTransformToChild";
  case 104: return "Frame_transformToParent";
  case 105: return "Frame_transformToChild";
  case 106: return "Frame_isDriven";
  case 107: return "Frame_getTranslation";
  case 108: return "Frame_getRotation";
  case 109: return "Frame_getOrientation";
  case 110: return "Frame_getPose";
  case 111: return "delete_Frame";
  case 112: return "new_FrameEuler";
  case 113: return "FrameEuler_setFreeValue";
  case 114: return "FrameEuler_getFreeValue";
  case 115: return "FrameEuler_setFreeVariable";
  case 116: return "FrameEuler_getFreeVariable";
  case 117: return "FrameEuler_setMode";
  case 118: return "FrameEuler_getMode";
  case 119: return "FrameEuler_setPosition";
  case 120: return "FrameEuler_getPosition";
  case 121: return "FrameEuler_setOrientation";
  case 122: return "FrameEuler_getOrientation";
  case 123: return "FrameEuler_setPositionAndOrientation";
  case 124: return "FrameEuler_getPositionAndOrientation";
  case 125: return "FrameEuler_setRotationAndTranslation";
  case 126: return "FrameEuler_isDriven";
  case 127: return "delete_FrameEuler";
  case 128: return "new_FrameDh";
  case 129: return "FrameDh_setFreeValue";
  case 130: return "FrameDh_getFreeValue";
  case 131: return "FrameDh_setFreeVariable";
  case 132: return "FrameDh_getFreeVariable";
  case 133: return "FrameDh_setMode";
  case 134: return "FrameDh_getMode";
  case 135: return "FrameDh_setParameters";
  case 136: return "FrameDh_getParameters";
  case 137: return "FrameDh_isDriven";
  case 138: return "delete_FrameDh";
  case 139: return "new_RigidBody";
  case 140: return "delete_RigidBody";
  case 141: return "RigidBody_setFrame";
  case 142: return "RigidBody_setCenterOfMass";
  case 143: return "RigidBody_getCenterOfMass";
  case 144: return "RigidBody_setInertiaTensor";
  case 145: return "RigidBody_getInertiaTensor";
  case 146: return "RigidBody_setMass";
  case 147: return "RigidBody_getMass";
  case 148: return "RigidBody_getMassMatrix";
  case 149: return "RigidBody_m_frame_get";
  case 150: return "RigidBody_m_frame_set";
  case 151: return "new_Manipulator";
  case 152: return "delete_Manipulator";
  case 153: return "Manipulator_create";
  case 154: return "Manipulator_setConfiguration";
  case 155: return "Manipulator_getConfiguration";
  case 156: return "Manipulator_getForwardKinematics";
  case 157: return "Manipulator_getNumberOfLinks";
  case 158: return "Manipulator_getDegreesOfFreedom";
  case 159: return "Manipulator_getToolFrame";
  case 160: return "Manipulator_getLinkFrame";
  case 161: return "Manipulator_getToolPose";
  case 162: return "Manipulator_jacobian";
  case 163: return "Manipulator_hessian";
  case 164: return "Manipulator_addLink";
  case 165: return "Manipulator_addTool";
  case 166: return "CRParamNoiseGeneric_icdFunction_get";
  case 167: return "CRParamNoiseGeneric_icdFunction_set";
  case 168: return "CRParamNoiseGeneric_probFunction_get";
  case 169: return "CRParamNoiseGeneric_probFunction_set";
  case 170: return "new_CRParamNoiseGeneric";
  case 171: return "delete_CRParamNoiseGeneric";
  case 172: return "new_NoiseModel";
  case 173: return "NoiseModel_setParameters";
  case 174: return "NoiseModel_sample";
  case 175: return "NoiseModel_probability";
  case 176: return "NoiseModel_m_parameters_get";
  case 177: return "NoiseModel_m_parameters_set";
  case 178: return "delete_NoiseModel";
  case 179: return "CRParamNoiseGaussian_cov_get";
  case 180: return "CRParamNoiseGaussian_cov_set";
  case 181: return "CRParamNoiseGaussian_covInv_get";
  case 182: return "CRParamNoiseGaussian_covInv_set";
  case 183: return "CRParamNoiseGaussian_mean_get";
  case 184: return "CRParamNoiseGaussian_mean_set";
  case 185: return "new_CRParamNoiseGaussian";
  case 186: return "delete_CRParamNoiseGaussian";
  case 187: return "new_NoiseGaussian";
  case 188: return "NoiseGaussian_setParameters";
  case 189: return "NoiseGaussian_sample";
  case 190: return "NoiseGaussian_probability";
  case 191: return "NoiseGaussian_m_parameters_get";
  case 192: return "NoiseGaussian_m_parameters_set";
  case 193: return "delete_NoiseGaussian";
  case 194: return "CRParamNoiseUniform_a_get";
  case 195: return "CRParamNoiseUniform_a_set";
  case 196: return "CRParamNoiseUniform_b_get";
  case 197: return "CRParamNoiseUniform_b_set";
  case 198: return "new_CRParamNoiseUniform";
  case 199: return "delete_CRParamNoiseUniform";
  case 200: return "new_NoiseUniform";
  case 201: return "NoiseUniform_setParameters";
  case 202: return "NoiseUniform_sample";
  case 203: return "NoiseUniform_probability";
  case 204: return "NoiseUniform_m_parameters_get";
  case 205: return "NoiseUniform_m_parameters_set";
  case 206: return "delete_NoiseUniform";
  case 207: return "CRParamNoiseMixture_models_get";
  case 208: return "CRParamNoiseMixture_models_set";
  case 209: return "CRParamNoiseMixture_weights_get";
  case 210: return "CRParamNoiseMixture_weights_set";
  case 211: return "new_CRParamNoiseMixture";
  case 212: return "delete_CRParamNoiseMixture";
  case 213: return "new_NoiseMixture";
  case 214: return "NoiseMixture_add";
  case 215: return "NoiseMixture_sample";
  case 216: return "NoiseMixture_probability";
  case 217: return "NoiseMixture_m_parameters_get";
  case 218: return "NoiseMixture_m_parameters_set";
  case 219: return "delete_NoiseMixture";
  case 220: return "new_SensorLinear";
  case 221: return "SensorLinear_setObservation";
  case 222: return "SensorLinear_measurement";
  case 223: return "delete_SensorLinear";
  case 224: return "new_InverseKinematics";
  case 225: return "InverseKinematics_setRobot";
  case 226: return "InverseKinematics_getRobot";
  case 227: return "InverseKinematics_setToolIndex";
  case 228: return "InverseKinematics_getToolIndex";
  case 229: return "InverseKinematics_setEulerMode";
  case 230: return "InverseKinematics_getEulerMode";
  case 231: return "InverseKinematics_setTolerance";
  case 232: return "InverseKinematics_getTolerance";
  case 233: return "InverseKinematics_setMaxIter";
  case 234: return "InverseKinematics_getMaxIter";
  case 235: return "InverseKinematics_setStepSize";
  case 236: return "InverseKinematics_getStepSize";
  case 237: return "InverseKinematics_setDampingFactor";
  case 238: return "InverseKinematics_getDampingFactor";
  case 239: return "InverseKinematics_setSingularThresh";
  case 240: return "InverseKinematics_getSingularThresh";
  case 241: return "InverseKinematics_getJacInv";
  case 242: return "InverseKinematics_solve";
  case 243: return "delete_InverseKinematics";
  case 244: return "new_NullSpace";
  case 245: return "NullSpace_setRobot";
  case 246: return "NullSpace_setToolIndex";
  case 247: return "NullSpace_setEulerMode";
  case 248: return "NullSpace_getEulerMode";
  case 249: return "NullSpace_setSingularThresh";
  case 250: return "NullSpace_getSingularThresh";
  case 251: return "NullSpace_setMinStepSize";
  case 252: return "NullSpace_getMinStepSize";
  case 253: return "NullSpace_setMaxIter";
  case 254: return "NullSpace_getMaxIter";
  case 255: return "NullSpace_setTrivialTolerance";
  case 256: return "NullSpace_getTrivialTolerance";
  case 257: return "NullSpace_solve";
  case 258: return "delete_NullSpace";
  case 259: return "new_HardLimits";
  case 260: return "HardLimits_getIKSolver";
  case 261: return "HardLimits_getNullSpaceSolver";
  case 262: return "HardLimits_useNullSpace";
  case 263: return "HardLimits_nullSpaceStatus";
  case 264: return "HardLimits_setPoseElements";
  case 265: return "HardLimits_getPoseElements";
  case 266: return "HardLimits_setJointUpperLimit";
  case 267: return "HardLimits_setJointLowerLimit";
  case 268: return "HardLimits_getJointUpperLimit";
  case 269: return "HardLimits_getJointLowerLimit";
  case 270: return "HardLimits_setJointLimits";
  case 271: return "HardLimits_setJointUpperLimits";
  case 272: return "HardLimits_setJointLowerLimits";
  case 273: return "HardLimits_getJointUpperLimits";
  case 274: return "HardLimits_getJointLowerLimits";
  case 275: return "HardLimits_setQ0";
  case 276: return "HardLimits_getQ0";
  case 277: return "HardLimits_setToolPose";
  case 278: return "HardLimits_getToolPose";
  case 279: return "HardLimits_setJointMotion";
  case 280: return "HardLimits_getJointMotion";
  case 281: return "HardLimits_solve";
  case 282: return "delete_HardLimits";
  case 283: return "new_SharedMemory";
  case 284: return "delete_SharedMemory";
  case 285: return "SharedMemory_addSignal";
  case 286: return "SharedMemory_removeSignal";
  case 287: return "SharedMemory_set";
  case 288: return "SharedMemory_get";
  case 289: return "CRWaypoint_time_get";
  case 290: return "CRWaypoint_time_set";
  case 291: return "CRWaypoint_position_get";
  case 292: return "CRWaypoint_position_set";
  case 293: return "CRWaypoint_velocity_get";
  case 294: return "CRWaypoint_velocity_set";
  case 295: return "CRWaypoint_acceleration_get";
  case 296: return "CRWaypoint_acceleration_set";
  case 297: return "CRWaypoint_jerk_get";
  case 298: return "CRWaypoint_jerk_set";
  case 299: return "new_CRWaypoint";
  case 300: return "delete_CRWaypoint";
  case 301: return "new_TrajectoryGenerator";
  case 302: return "TrajectoryGenerator_solve";
  case 303: return "TrajectoryGenerator_step";
  case 304: return "delete_TrajectoryGenerator";
  case 305: return "_wrap_poseElements";
  default: return 0;
  }
}

SWIGINTERN int swigFunctionName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    SWIG_Error(SWIG_RuntimeError, "This mex file should only be called from inside the .m files generated by SWIG. The input should be the function ID.");
    return 1;
  }
  if (resc!=1) {
    SWIG_Error(SWIG_RuntimeError, "The function should have one output.");
    return 1;
  }
  int fcn_id = (int)mxGetScalar(*argv);
  const char* s = SwigFunctionName(fcn_id);
  if (s==0) {
    SWIG_Error(SWIG_RuntimeError, "No such function ID.");
    return 1;
  }
  *resv = mxCreateString(s);
  return 0;
}

SWIGINTERN int swigThis(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || resc!=1) {
    SWIG_Error(SWIG_RuntimeError, "swigThis should have one input and one output.");
    return 1;
  }
  SwigPtr* swig_ptr = SWIG_Matlab_getSwigPtr(argv[0]);
  if (!swig_ptr) {
    SWIG_Error(SWIG_RuntimeError, "The argument should be a SWIG class.");
    return 1;
  }
  resv[0] = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
  *(uint64_T *)mxGetData(resv[0]) = (uint64_T)swig_ptr->ptr;
  return 0;
}

SWIGINTERN int swigTouch(int resc, mxArray** SWIGUNUSEDPARM(resv), int argc, mxArray** SWIGUNUSEDPARM(argv)) {
  if (argc!=0 || resc!=0) {
    SWIG_Error(SWIG_RuntimeError, "swigTouch should have no inputs or outputs.");
    return 1;
  }
  return 0;
}

extern "C"
void mexFunction(int resc, mxArray *resv[], int argc, const mxArray *argv[]) {
  /* Initialize module if first call */
  SWIG_Matlab_LoadModule();

  if (--argc < 0 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1)
    mexErrMsgTxt("This mex file should only be called from inside the .m files generated by SWIG. First input should be the function ID .");
  int fcn_id = (int)mxGetScalar(*argv++);
  int flag=0;
  switch (fcn_id) {
  case 0: flag=swigConstant(resc,resv,argc,(mxArray**)(argv)); break;
  case 1: flag=swigFunctionName(resc,resv,argc,(mxArray**)(argv)); break;
  case 2: flag=swigConstantName(resc,resv,argc,(mxArray**)(argv)); break;
  case 3: flag=swigThis(resc,resv,argc,(mxArray**)(argv)); break;
  case 4: flag=swigTouch(resc,resv,argc,(mxArray**)(argv)); break;
  case 5: flag=_wrap_delete_MatlabSwigIterator(resc,resv,argc,(mxArray**)(argv)); break;
  case 6: flag=_wrap_MatlabSwigIterator_value(resc,resv,argc,(mxArray**)(argv)); break;
  case 7: flag=_wrap_MatlabSwigIterator_incr(resc,resv,argc,(mxArray**)(argv)); break;
  case 8: flag=_wrap_MatlabSwigIterator_decr(resc,resv,argc,(mxArray**)(argv)); break;
  case 9: flag=_wrap_MatlabSwigIterator_distance(resc,resv,argc,(mxArray**)(argv)); break;
  case 10: flag=_wrap_MatlabSwigIterator_equal(resc,resv,argc,(mxArray**)(argv)); break;
  case 11: flag=_wrap_MatlabSwigIterator_copy(resc,resv,argc,(mxArray**)(argv)); break;
  case 12: flag=_wrap_MatlabSwigIterator_next(resc,resv,argc,(mxArray**)(argv)); break;
  case 13: flag=_wrap_MatlabSwigIterator_previous(resc,resv,argc,(mxArray**)(argv)); break;
  case 14: flag=_wrap_MatlabSwigIterator_advance(resc,resv,argc,(mxArray**)(argv)); break;
  case 15: flag=_wrap_MatlabSwigIterator_eq(resc,resv,argc,(mxArray**)(argv)); break;
  case 16: flag=_wrap_MatlabSwigIterator_ne(resc,resv,argc,(mxArray**)(argv)); break;
  case 17: flag=_wrap_MatlabSwigIterator_TODOincr(resc,resv,argc,(mxArray**)(argv)); break;
  case 18: flag=_wrap_MatlabSwigIterator_TODOdecr(resc,resv,argc,(mxArray**)(argv)); break;
  case 19: flag=_wrap_MatlabSwigIterator_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 20: flag=_wrap_MatlabSwigIterator_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 21: flag=_wrap_vectorMatrixXd_pop(resc,resv,argc,(mxArray**)(argv)); break;
  case 22: flag=_wrap_vectorMatrixXd_brace(resc,resv,argc,(mxArray**)(argv)); break;
  case 23: flag=_wrap_vectorMatrixXd_setbrace(resc,resv,argc,(mxArray**)(argv)); break;
  case 24: flag=_wrap_vectorMatrixXd_append(resc,resv,argc,(mxArray**)(argv)); break;
  case 25: flag=_wrap_vectorMatrixXd_empty(resc,resv,argc,(mxArray**)(argv)); break;
  case 26: flag=_wrap_vectorMatrixXd_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 27: flag=_wrap_vectorMatrixXd_swap(resc,resv,argc,(mxArray**)(argv)); break;
  case 28: flag=_wrap_vectorMatrixXd_begin(resc,resv,argc,(mxArray**)(argv)); break;
  case 29: flag=_wrap_vectorMatrixXd_end(resc,resv,argc,(mxArray**)(argv)); break;
  case 30: flag=_wrap_vectorMatrixXd_rbegin(resc,resv,argc,(mxArray**)(argv)); break;
  case 31: flag=_wrap_vectorMatrixXd_rend(resc,resv,argc,(mxArray**)(argv)); break;
  case 32: flag=_wrap_vectorMatrixXd_clear(resc,resv,argc,(mxArray**)(argv)); break;
  case 33: flag=_wrap_vectorMatrixXd_get_allocator(resc,resv,argc,(mxArray**)(argv)); break;
  case 34: flag=_wrap_vectorMatrixXd_pop_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 35: flag=_wrap_vectorMatrixXd_erase(resc,resv,argc,(mxArray**)(argv)); break;
  case 36: flag=_wrap_new_vectorMatrixXd(resc,resv,argc,(mxArray**)(argv)); break;
  case 37: flag=_wrap_vectorMatrixXd_push_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 38: flag=_wrap_vectorMatrixXd_front(resc,resv,argc,(mxArray**)(argv)); break;
  case 39: flag=_wrap_vectorMatrixXd_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 40: flag=_wrap_vectorMatrixXd_assign(resc,resv,argc,(mxArray**)(argv)); break;
  case 41: flag=_wrap_vectorMatrixXd_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 42: flag=_wrap_vectorMatrixXd_insert(resc,resv,argc,(mxArray**)(argv)); break;
  case 43: flag=_wrap_vectorMatrixXd_reserve(resc,resv,argc,(mxArray**)(argv)); break;
  case 44: flag=_wrap_vectorMatrixXd_capacity(resc,resv,argc,(mxArray**)(argv)); break;
  case 45: flag=_wrap_delete_vectorMatrixXd(resc,resv,argc,(mxArray**)(argv)); break;
  case 46: flag=_wrap_vectorVectorXd_pop(resc,resv,argc,(mxArray**)(argv)); break;
  case 47: flag=_wrap_vectorVectorXd_brace(resc,resv,argc,(mxArray**)(argv)); break;
  case 48: flag=_wrap_vectorVectorXd_setbrace(resc,resv,argc,(mxArray**)(argv)); break;
  case 49: flag=_wrap_vectorVectorXd_append(resc,resv,argc,(mxArray**)(argv)); break;
  case 50: flag=_wrap_vectorVectorXd_empty(resc,resv,argc,(mxArray**)(argv)); break;
  case 51: flag=_wrap_vectorVectorXd_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 52: flag=_wrap_vectorVectorXd_swap(resc,resv,argc,(mxArray**)(argv)); break;
  case 53: flag=_wrap_vectorVectorXd_begin(resc,resv,argc,(mxArray**)(argv)); break;
  case 54: flag=_wrap_vectorVectorXd_end(resc,resv,argc,(mxArray**)(argv)); break;
  case 55: flag=_wrap_vectorVectorXd_rbegin(resc,resv,argc,(mxArray**)(argv)); break;
  case 56: flag=_wrap_vectorVectorXd_rend(resc,resv,argc,(mxArray**)(argv)); break;
  case 57: flag=_wrap_vectorVectorXd_clear(resc,resv,argc,(mxArray**)(argv)); break;
  case 58: flag=_wrap_vectorVectorXd_get_allocator(resc,resv,argc,(mxArray**)(argv)); break;
  case 59: flag=_wrap_vectorVectorXd_pop_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 60: flag=_wrap_vectorVectorXd_erase(resc,resv,argc,(mxArray**)(argv)); break;
  case 61: flag=_wrap_new_vectorVectorXd(resc,resv,argc,(mxArray**)(argv)); break;
  case 62: flag=_wrap_vectorVectorXd_push_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 63: flag=_wrap_vectorVectorXd_front(resc,resv,argc,(mxArray**)(argv)); break;
  case 64: flag=_wrap_vectorVectorXd_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 65: flag=_wrap_vectorVectorXd_assign(resc,resv,argc,(mxArray**)(argv)); break;
  case 66: flag=_wrap_vectorVectorXd_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 67: flag=_wrap_vectorVectorXd_insert(resc,resv,argc,(mxArray**)(argv)); break;
  case 68: flag=_wrap_vectorVectorXd_reserve(resc,resv,argc,(mxArray**)(argv)); break;
  case 69: flag=_wrap_vectorVectorXd_capacity(resc,resv,argc,(mxArray**)(argv)); break;
  case 70: flag=_wrap_delete_vectorVectorXd(resc,resv,argc,(mxArray**)(argv)); break;
  case 71: flag=_wrap_new_Clock(resc,resv,argc,(mxArray**)(argv)); break;
  case 72: flag=_wrap_delete_Clock(resc,resv,argc,(mxArray**)(argv)); break;
  case 73: flag=_wrap_Clock_startTimer(resc,resv,argc,(mxArray**)(argv)); break;
  case 74: flag=_wrap_Clock_getElapsedTime(resc,resv,argc,(mxArray**)(argv)); break;
  case 75: flag=_wrap_Clock_sleep(resc,resv,argc,(mxArray**)(argv)); break;
  case 76: flag=_wrap_Conversion_deg2rad(resc,resv,argc,(mxArray**)(argv)); break;
  case 77: flag=_wrap_Conversion_rad2deg(resc,resv,argc,(mxArray**)(argv)); break;
  case 78: flag=_wrap_Conversion_wrapToPi(resc,resv,argc,(mxArray**)(argv)); break;
  case 79: flag=_wrap_new_Conversion(resc,resv,argc,(mxArray**)(argv)); break;
  case 80: flag=_wrap_delete_Conversion(resc,resv,argc,(mxArray**)(argv)); break;
  case 81: flag=_wrap_new_Integration(resc,resv,argc,(mxArray**)(argv)); break;
  case 82: flag=_wrap_delete_Integration(resc,resv,argc,(mxArray**)(argv)); break;
  case 83: flag=_wrap_Matrix_reducedVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 84: flag=_wrap_Matrix_reducedMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 85: flag=_wrap_Matrix_svd(resc,resv,argc,(mxArray**)(argv)); break;
  case 86: flag=_wrap_Matrix_svdInverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 87: flag=_wrap_Matrix_rotAboutX(resc,resv,argc,(mxArray**)(argv)); break;
  case 88: flag=_wrap_Matrix_rotAboutY(resc,resv,argc,(mxArray**)(argv)); break;
  case 89: flag=_wrap_Matrix_rotAboutZ(resc,resv,argc,(mxArray**)(argv)); break;
  case 90: flag=_wrap_Matrix_normL1(resc,resv,argc,(mxArray**)(argv)); break;
  case 91: flag=_wrap_Matrix_normL2(resc,resv,argc,(mxArray**)(argv)); break;
  case 92: flag=_wrap_Matrix_normLinf(resc,resv,argc,(mxArray**)(argv)); break;
  case 93: flag=_wrap_new_Matrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 94: flag=_wrap_delete_Matrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 95: flag=_wrap_new_Frame(resc,resv,argc,(mxArray**)(argv)); break;
  case 96: flag=_wrap_Frame_setFreeValue(resc,resv,argc,(mxArray**)(argv)); break;
  case 97: flag=_wrap_Frame_getFreeValue(resc,resv,argc,(mxArray**)(argv)); break;
  case 98: flag=_wrap_Frame_setRotation(resc,resv,argc,(mxArray**)(argv)); break;
  case 99: flag=_wrap_Frame_setTranslation(resc,resv,argc,(mxArray**)(argv)); break;
  case 100: flag=_wrap_Frame_setRotationAndTranslation(resc,resv,argc,(mxArray**)(argv)); break;
  case 101: flag=_wrap_Frame_getRotationAndTranslation(resc,resv,argc,(mxArray**)(argv)); break;
  case 102: flag=_wrap_Frame_getTransformToParent(resc,resv,argc,(mxArray**)(argv)); break;
  case 103: flag=_wrap_Frame_getTransformToChild(resc,resv,argc,(mxArray**)(argv)); break;
  case 104: flag=_wrap_Frame_transformToParent(resc,resv,argc,(mxArray**)(argv)); break;
  case 105: flag=_wrap_Frame_transformToChild(resc,resv,argc,(mxArray**)(argv)); break;
  case 106: flag=_wrap_Frame_isDriven(resc,resv,argc,(mxArray**)(argv)); break;
  case 107: flag=_wrap_Frame_getTranslation(resc,resv,argc,(mxArray**)(argv)); break;
  case 108: flag=_wrap_Frame_getRotation(resc,resv,argc,(mxArray**)(argv)); break;
  case 109: flag=_wrap_Frame_getOrientation(resc,resv,argc,(mxArray**)(argv)); break;
  case 110: flag=_wrap_Frame_getPose(resc,resv,argc,(mxArray**)(argv)); break;
  case 111: flag=_wrap_delete_Frame(resc,resv,argc,(mxArray**)(argv)); break;
  case 112: flag=_wrap_new_FrameEuler(resc,resv,argc,(mxArray**)(argv)); break;
  case 113: flag=_wrap_FrameEuler_setFreeValue(resc,resv,argc,(mxArray**)(argv)); break;
  case 114: flag=_wrap_FrameEuler_getFreeValue(resc,resv,argc,(mxArray**)(argv)); break;
  case 115: flag=_wrap_FrameEuler_setFreeVariable(resc,resv,argc,(mxArray**)(argv)); break;
  case 116: flag=_wrap_FrameEuler_getFreeVariable(resc,resv,argc,(mxArray**)(argv)); break;
  case 117: flag=_wrap_FrameEuler_setMode(resc,resv,argc,(mxArray**)(argv)); break;
  case 118: flag=_wrap_FrameEuler_getMode(resc,resv,argc,(mxArray**)(argv)); break;
  case 119: flag=_wrap_FrameEuler_setPosition(resc,resv,argc,(mxArray**)(argv)); break;
  case 120: flag=_wrap_FrameEuler_getPosition(resc,resv,argc,(mxArray**)(argv)); break;
  case 121: flag=_wrap_FrameEuler_setOrientation(resc,resv,argc,(mxArray**)(argv)); break;
  case 122: flag=_wrap_FrameEuler_getOrientation(resc,resv,argc,(mxArray**)(argv)); break;
  case 123: flag=_wrap_FrameEuler_setPositionAndOrientation(resc,resv,argc,(mxArray**)(argv)); break;
  case 124: flag=_wrap_FrameEuler_getPositionAndOrientation(resc,resv,argc,(mxArray**)(argv)); break;
  case 125: flag=_wrap_FrameEuler_setRotationAndTranslation(resc,resv,argc,(mxArray**)(argv)); break;
  case 126: flag=_wrap_FrameEuler_isDriven(resc,resv,argc,(mxArray**)(argv)); break;
  case 127: flag=_wrap_delete_FrameEuler(resc,resv,argc,(mxArray**)(argv)); break;
  case 128: flag=_wrap_new_FrameDh(resc,resv,argc,(mxArray**)(argv)); break;
  case 129: flag=_wrap_FrameDh_setFreeValue(resc,resv,argc,(mxArray**)(argv)); break;
  case 130: flag=_wrap_FrameDh_getFreeValue(resc,resv,argc,(mxArray**)(argv)); break;
  case 131: flag=_wrap_FrameDh_setFreeVariable(resc,resv,argc,(mxArray**)(argv)); break;
  case 132: flag=_wrap_FrameDh_getFreeVariable(resc,resv,argc,(mxArray**)(argv)); break;
  case 133: flag=_wrap_FrameDh_setMode(resc,resv,argc,(mxArray**)(argv)); break;
  case 134: flag=_wrap_FrameDh_getMode(resc,resv,argc,(mxArray**)(argv)); break;
  case 135: flag=_wrap_FrameDh_setParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 136: flag=_wrap_FrameDh_getParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 137: flag=_wrap_FrameDh_isDriven(resc,resv,argc,(mxArray**)(argv)); break;
  case 138: flag=_wrap_delete_FrameDh(resc,resv,argc,(mxArray**)(argv)); break;
  case 139: flag=_wrap_new_RigidBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 140: flag=_wrap_delete_RigidBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 141: flag=_wrap_RigidBody_setFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 142: flag=_wrap_RigidBody_setCenterOfMass(resc,resv,argc,(mxArray**)(argv)); break;
  case 143: flag=_wrap_RigidBody_getCenterOfMass(resc,resv,argc,(mxArray**)(argv)); break;
  case 144: flag=_wrap_RigidBody_setInertiaTensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 145: flag=_wrap_RigidBody_getInertiaTensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 146: flag=_wrap_RigidBody_setMass(resc,resv,argc,(mxArray**)(argv)); break;
  case 147: flag=_wrap_RigidBody_getMass(resc,resv,argc,(mxArray**)(argv)); break;
  case 148: flag=_wrap_RigidBody_getMassMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 149: flag=_wrap_RigidBody_m_frame_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 150: flag=_wrap_RigidBody_m_frame_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 151: flag=_wrap_new_Manipulator(resc,resv,argc,(mxArray**)(argv)); break;
  case 152: flag=_wrap_delete_Manipulator(resc,resv,argc,(mxArray**)(argv)); break;
  case 153: flag=_wrap_Manipulator_create(resc,resv,argc,(mxArray**)(argv)); break;
  case 154: flag=_wrap_Manipulator_setConfiguration(resc,resv,argc,(mxArray**)(argv)); break;
  case 155: flag=_wrap_Manipulator_getConfiguration(resc,resv,argc,(mxArray**)(argv)); break;
  case 156: flag=_wrap_Manipulator_getForwardKinematics(resc,resv,argc,(mxArray**)(argv)); break;
  case 157: flag=_wrap_Manipulator_getNumberOfLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 158: flag=_wrap_Manipulator_getDegreesOfFreedom(resc,resv,argc,(mxArray**)(argv)); break;
  case 159: flag=_wrap_Manipulator_getToolFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 160: flag=_wrap_Manipulator_getLinkFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 161: flag=_wrap_Manipulator_getToolPose(resc,resv,argc,(mxArray**)(argv)); break;
  case 162: flag=_wrap_Manipulator_jacobian(resc,resv,argc,(mxArray**)(argv)); break;
  case 163: flag=_wrap_Manipulator_hessian(resc,resv,argc,(mxArray**)(argv)); break;
  case 164: flag=_wrap_Manipulator_addLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 165: flag=_wrap_Manipulator_addTool(resc,resv,argc,(mxArray**)(argv)); break;
  case 166: flag=_wrap_CRParamNoiseGeneric_icdFunction_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 167: flag=_wrap_CRParamNoiseGeneric_icdFunction_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 168: flag=_wrap_CRParamNoiseGeneric_probFunction_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 169: flag=_wrap_CRParamNoiseGeneric_probFunction_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 170: flag=_wrap_new_CRParamNoiseGeneric(resc,resv,argc,(mxArray**)(argv)); break;
  case 171: flag=_wrap_delete_CRParamNoiseGeneric(resc,resv,argc,(mxArray**)(argv)); break;
  case 172: flag=_wrap_new_NoiseModel(resc,resv,argc,(mxArray**)(argv)); break;
  case 173: flag=_wrap_NoiseModel_setParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 174: flag=_wrap_NoiseModel_sample(resc,resv,argc,(mxArray**)(argv)); break;
  case 175: flag=_wrap_NoiseModel_probability(resc,resv,argc,(mxArray**)(argv)); break;
  case 176: flag=_wrap_NoiseModel_m_parameters_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 177: flag=_wrap_NoiseModel_m_parameters_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 178: flag=_wrap_delete_NoiseModel(resc,resv,argc,(mxArray**)(argv)); break;
  case 179: flag=_wrap_CRParamNoiseGaussian_cov_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 180: flag=_wrap_CRParamNoiseGaussian_cov_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 181: flag=_wrap_CRParamNoiseGaussian_covInv_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 182: flag=_wrap_CRParamNoiseGaussian_covInv_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 183: flag=_wrap_CRParamNoiseGaussian_mean_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 184: flag=_wrap_CRParamNoiseGaussian_mean_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 185: flag=_wrap_new_CRParamNoiseGaussian(resc,resv,argc,(mxArray**)(argv)); break;
  case 186: flag=_wrap_delete_CRParamNoiseGaussian(resc,resv,argc,(mxArray**)(argv)); break;
  case 187: flag=_wrap_new_NoiseGaussian(resc,resv,argc,(mxArray**)(argv)); break;
  case 188: flag=_wrap_NoiseGaussian_setParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 189: flag=_wrap_NoiseGaussian_sample(resc,resv,argc,(mxArray**)(argv)); break;
  case 190: flag=_wrap_NoiseGaussian_probability(resc,resv,argc,(mxArray**)(argv)); break;
  case 191: flag=_wrap_NoiseGaussian_m_parameters_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 192: flag=_wrap_NoiseGaussian_m_parameters_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 193: flag=_wrap_delete_NoiseGaussian(resc,resv,argc,(mxArray**)(argv)); break;
  case 194: flag=_wrap_CRParamNoiseUniform_a_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 195: flag=_wrap_CRParamNoiseUniform_a_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 196: flag=_wrap_CRParamNoiseUniform_b_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 197: flag=_wrap_CRParamNoiseUniform_b_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 198: flag=_wrap_new_CRParamNoiseUniform(resc,resv,argc,(mxArray**)(argv)); break;
  case 199: flag=_wrap_delete_CRParamNoiseUniform(resc,resv,argc,(mxArray**)(argv)); break;
  case 200: flag=_wrap_new_NoiseUniform(resc,resv,argc,(mxArray**)(argv)); break;
  case 201: flag=_wrap_NoiseUniform_setParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 202: flag=_wrap_NoiseUniform_sample(resc,resv,argc,(mxArray**)(argv)); break;
  case 203: flag=_wrap_NoiseUniform_probability(resc,resv,argc,(mxArray**)(argv)); break;
  case 204: flag=_wrap_NoiseUniform_m_parameters_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 205: flag=_wrap_NoiseUniform_m_parameters_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 206: flag=_wrap_delete_NoiseUniform(resc,resv,argc,(mxArray**)(argv)); break;
  case 207: flag=_wrap_CRParamNoiseMixture_models_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 208: flag=_wrap_CRParamNoiseMixture_models_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 209: flag=_wrap_CRParamNoiseMixture_weights_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 210: flag=_wrap_CRParamNoiseMixture_weights_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 211: flag=_wrap_new_CRParamNoiseMixture(resc,resv,argc,(mxArray**)(argv)); break;
  case 212: flag=_wrap_delete_CRParamNoiseMixture(resc,resv,argc,(mxArray**)(argv)); break;
  case 213: flag=_wrap_new_NoiseMixture(resc,resv,argc,(mxArray**)(argv)); break;
  case 214: flag=_wrap_NoiseMixture_add(resc,resv,argc,(mxArray**)(argv)); break;
  case 215: flag=_wrap_NoiseMixture_sample(resc,resv,argc,(mxArray**)(argv)); break;
  case 216: flag=_wrap_NoiseMixture_probability(resc,resv,argc,(mxArray**)(argv)); break;
  case 217: flag=_wrap_NoiseMixture_m_parameters_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 218: flag=_wrap_NoiseMixture_m_parameters_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 219: flag=_wrap_delete_NoiseMixture(resc,resv,argc,(mxArray**)(argv)); break;
  case 220: flag=_wrap_new_SensorLinear(resc,resv,argc,(mxArray**)(argv)); break;
  case 221: flag=_wrap_SensorLinear_setObservation(resc,resv,argc,(mxArray**)(argv)); break;
  case 222: flag=_wrap_SensorLinear_measurement(resc,resv,argc,(mxArray**)(argv)); break;
  case 223: flag=_wrap_delete_SensorLinear(resc,resv,argc,(mxArray**)(argv)); break;
  case 224: flag=_wrap_new_InverseKinematics(resc,resv,argc,(mxArray**)(argv)); break;
  case 225: flag=_wrap_InverseKinematics_setRobot(resc,resv,argc,(mxArray**)(argv)); break;
  case 226: flag=_wrap_InverseKinematics_getRobot(resc,resv,argc,(mxArray**)(argv)); break;
  case 227: flag=_wrap_InverseKinematics_setToolIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 228: flag=_wrap_InverseKinematics_getToolIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 229: flag=_wrap_InverseKinematics_setEulerMode(resc,resv,argc,(mxArray**)(argv)); break;
  case 230: flag=_wrap_InverseKinematics_getEulerMode(resc,resv,argc,(mxArray**)(argv)); break;
  case 231: flag=_wrap_InverseKinematics_setTolerance(resc,resv,argc,(mxArray**)(argv)); break;
  case 232: flag=_wrap_InverseKinematics_getTolerance(resc,resv,argc,(mxArray**)(argv)); break;
  case 233: flag=_wrap_InverseKinematics_setMaxIter(resc,resv,argc,(mxArray**)(argv)); break;
  case 234: flag=_wrap_InverseKinematics_getMaxIter(resc,resv,argc,(mxArray**)(argv)); break;
  case 235: flag=_wrap_InverseKinematics_setStepSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 236: flag=_wrap_InverseKinematics_getStepSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 237: flag=_wrap_InverseKinematics_setDampingFactor(resc,resv,argc,(mxArray**)(argv)); break;
  case 238: flag=_wrap_InverseKinematics_getDampingFactor(resc,resv,argc,(mxArray**)(argv)); break;
  case 239: flag=_wrap_InverseKinematics_setSingularThresh(resc,resv,argc,(mxArray**)(argv)); break;
  case 240: flag=_wrap_InverseKinematics_getSingularThresh(resc,resv,argc,(mxArray**)(argv)); break;
  case 241: flag=_wrap_InverseKinematics_getJacInv(resc,resv,argc,(mxArray**)(argv)); break;
  case 242: flag=_wrap_InverseKinematics_solve(resc,resv,argc,(mxArray**)(argv)); break;
  case 243: flag=_wrap_delete_InverseKinematics(resc,resv,argc,(mxArray**)(argv)); break;
  case 244: flag=_wrap_new_NullSpace(resc,resv,argc,(mxArray**)(argv)); break;
  case 245: flag=_wrap_NullSpace_setRobot(resc,resv,argc,(mxArray**)(argv)); break;
  case 246: flag=_wrap_NullSpace_setToolIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 247: flag=_wrap_NullSpace_setEulerMode(resc,resv,argc,(mxArray**)(argv)); break;
  case 248: flag=_wrap_NullSpace_getEulerMode(resc,resv,argc,(mxArray**)(argv)); break;
  case 249: flag=_wrap_NullSpace_setSingularThresh(resc,resv,argc,(mxArray**)(argv)); break;
  case 250: flag=_wrap_NullSpace_getSingularThresh(resc,resv,argc,(mxArray**)(argv)); break;
  case 251: flag=_wrap_NullSpace_setMinStepSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 252: flag=_wrap_NullSpace_getMinStepSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 253: flag=_wrap_NullSpace_setMaxIter(resc,resv,argc,(mxArray**)(argv)); break;
  case 254: flag=_wrap_NullSpace_getMaxIter(resc,resv,argc,(mxArray**)(argv)); break;
  case 255: flag=_wrap_NullSpace_setTrivialTolerance(resc,resv,argc,(mxArray**)(argv)); break;
  case 256: flag=_wrap_NullSpace_getTrivialTolerance(resc,resv,argc,(mxArray**)(argv)); break;
  case 257: flag=_wrap_NullSpace_solve(resc,resv,argc,(mxArray**)(argv)); break;
  case 258: flag=_wrap_delete_NullSpace(resc,resv,argc,(mxArray**)(argv)); break;
  case 259: flag=_wrap_new_HardLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 260: flag=_wrap_HardLimits_getIKSolver(resc,resv,argc,(mxArray**)(argv)); break;
  case 261: flag=_wrap_HardLimits_getNullSpaceSolver(resc,resv,argc,(mxArray**)(argv)); break;
  case 262: flag=_wrap_HardLimits_useNullSpace(resc,resv,argc,(mxArray**)(argv)); break;
  case 263: flag=_wrap_HardLimits_nullSpaceStatus(resc,resv,argc,(mxArray**)(argv)); break;
  case 264: flag=_wrap_HardLimits_setPoseElements(resc,resv,argc,(mxArray**)(argv)); break;
  case 265: flag=_wrap_HardLimits_getPoseElements(resc,resv,argc,(mxArray**)(argv)); break;
  case 266: flag=_wrap_HardLimits_setJointUpperLimit(resc,resv,argc,(mxArray**)(argv)); break;
  case 267: flag=_wrap_HardLimits_setJointLowerLimit(resc,resv,argc,(mxArray**)(argv)); break;
  case 268: flag=_wrap_HardLimits_getJointUpperLimit(resc,resv,argc,(mxArray**)(argv)); break;
  case 269: flag=_wrap_HardLimits_getJointLowerLimit(resc,resv,argc,(mxArray**)(argv)); break;
  case 270: flag=_wrap_HardLimits_setJointLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 271: flag=_wrap_HardLimits_setJointUpperLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 272: flag=_wrap_HardLimits_setJointLowerLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 273: flag=_wrap_HardLimits_getJointUpperLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 274: flag=_wrap_HardLimits_getJointLowerLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 275: flag=_wrap_HardLimits_setQ0(resc,resv,argc,(mxArray**)(argv)); break;
  case 276: flag=_wrap_HardLimits_getQ0(resc,resv,argc,(mxArray**)(argv)); break;
  case 277: flag=_wrap_HardLimits_setToolPose(resc,resv,argc,(mxArray**)(argv)); break;
  case 278: flag=_wrap_HardLimits_getToolPose(resc,resv,argc,(mxArray**)(argv)); break;
  case 279: flag=_wrap_HardLimits_setJointMotion(resc,resv,argc,(mxArray**)(argv)); break;
  case 280: flag=_wrap_HardLimits_getJointMotion(resc,resv,argc,(mxArray**)(argv)); break;
  case 281: flag=_wrap_HardLimits_solve(resc,resv,argc,(mxArray**)(argv)); break;
  case 282: flag=_wrap_delete_HardLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 283: flag=_wrap_new_SharedMemory(resc,resv,argc,(mxArray**)(argv)); break;
  case 284: flag=_wrap_delete_SharedMemory(resc,resv,argc,(mxArray**)(argv)); break;
  case 285: flag=_wrap_SharedMemory_addSignal(resc,resv,argc,(mxArray**)(argv)); break;
  case 286: flag=_wrap_SharedMemory_removeSignal(resc,resv,argc,(mxArray**)(argv)); break;
  case 287: flag=_wrap_SharedMemory_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 288: flag=_wrap_SharedMemory_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 289: flag=_wrap_CRWaypoint_time_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 290: flag=_wrap_CRWaypoint_time_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 291: flag=_wrap_CRWaypoint_position_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 292: flag=_wrap_CRWaypoint_position_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 293: flag=_wrap_CRWaypoint_velocity_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 294: flag=_wrap_CRWaypoint_velocity_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 295: flag=_wrap_CRWaypoint_acceleration_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 296: flag=_wrap_CRWaypoint_acceleration_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 297: flag=_wrap_CRWaypoint_jerk_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 298: flag=_wrap_CRWaypoint_jerk_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 299: flag=_wrap_new_CRWaypoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 300: flag=_wrap_delete_CRWaypoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 301: flag=_wrap_new_TrajectoryGenerator(resc,resv,argc,(mxArray**)(argv)); break;
  case 302: flag=_wrap_TrajectoryGenerator_solve(resc,resv,argc,(mxArray**)(argv)); break;
  case 303: flag=_wrap_TrajectoryGenerator_step(resc,resv,argc,(mxArray**)(argv)); break;
  case 304: flag=_wrap_delete_TrajectoryGenerator(resc,resv,argc,(mxArray**)(argv)); break;
  case 305: flag=_wrap_poseElements(resc,resv,argc,(mxArray**)(argv)); break;
  default: flag=1, SWIG_Error(SWIG_RuntimeError, "No function id %d.", fcn_id);
  }
  if (flag) {
    mexErrMsgIdAndTxt(SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  }
}
