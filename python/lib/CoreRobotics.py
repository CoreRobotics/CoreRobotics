# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_CoreRobotics')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_CoreRobotics')
    _CoreRobotics = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CoreRobotics', [dirname(__file__)])
        except ImportError:
            import _CoreRobotics
            return _CoreRobotics
        if fp is not None:
            try:
                _mod = imp.load_module('_CoreRobotics', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CoreRobotics = swig_import_helper()
    del swig_import_helper
else:
    import _CoreRobotics
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreRobotics.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _CoreRobotics.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CoreRobotics.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CoreRobotics.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CoreRobotics.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CoreRobotics.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CoreRobotics.SwigPyIterator_copy(self)

    def next(self):
        return _CoreRobotics.SwigPyIterator_next(self)

    def __next__(self):
        return _CoreRobotics.SwigPyIterator___next__(self)

    def previous(self):
        return _CoreRobotics.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CoreRobotics.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CoreRobotics.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CoreRobotics.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CoreRobotics.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CoreRobotics.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CoreRobotics.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CoreRobotics.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _CoreRobotics.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _CoreRobotics.SHARED_PTR_DISOWN
class vectorMatrixXd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorMatrixXd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorMatrixXd, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CoreRobotics.vectorMatrixXd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CoreRobotics.vectorMatrixXd___nonzero__(self)

    def __bool__(self):
        return _CoreRobotics.vectorMatrixXd___bool__(self)

    def __len__(self):
        return _CoreRobotics.vectorMatrixXd___len__(self)

    def __getslice__(self, i, j):
        return _CoreRobotics.vectorMatrixXd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CoreRobotics.vectorMatrixXd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CoreRobotics.vectorMatrixXd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CoreRobotics.vectorMatrixXd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CoreRobotics.vectorMatrixXd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CoreRobotics.vectorMatrixXd___setitem__(self, *args)

    def pop(self):
        return _CoreRobotics.vectorMatrixXd_pop(self)

    def append(self, x):
        return _CoreRobotics.vectorMatrixXd_append(self, x)

    def empty(self):
        return _CoreRobotics.vectorMatrixXd_empty(self)

    def size(self):
        return _CoreRobotics.vectorMatrixXd_size(self)

    def swap(self, v):
        return _CoreRobotics.vectorMatrixXd_swap(self, v)

    def begin(self):
        return _CoreRobotics.vectorMatrixXd_begin(self)

    def end(self):
        return _CoreRobotics.vectorMatrixXd_end(self)

    def rbegin(self):
        return _CoreRobotics.vectorMatrixXd_rbegin(self)

    def rend(self):
        return _CoreRobotics.vectorMatrixXd_rend(self)

    def clear(self):
        return _CoreRobotics.vectorMatrixXd_clear(self)

    def get_allocator(self):
        return _CoreRobotics.vectorMatrixXd_get_allocator(self)

    def pop_back(self):
        return _CoreRobotics.vectorMatrixXd_pop_back(self)

    def erase(self, *args):
        return _CoreRobotics.vectorMatrixXd_erase(self, *args)

    def __init__(self, *args):
        this = _CoreRobotics.new_vectorMatrixXd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CoreRobotics.vectorMatrixXd_push_back(self, x)

    def front(self):
        return _CoreRobotics.vectorMatrixXd_front(self)

    def back(self):
        return _CoreRobotics.vectorMatrixXd_back(self)

    def assign(self, n, x):
        return _CoreRobotics.vectorMatrixXd_assign(self, n, x)

    def resize(self, *args):
        return _CoreRobotics.vectorMatrixXd_resize(self, *args)

    def insert(self, *args):
        return _CoreRobotics.vectorMatrixXd_insert(self, *args)

    def reserve(self, n):
        return _CoreRobotics.vectorMatrixXd_reserve(self, n)

    def capacity(self):
        return _CoreRobotics.vectorMatrixXd_capacity(self)
    __swig_destroy__ = _CoreRobotics.delete_vectorMatrixXd
    __del__ = lambda self: None
vectorMatrixXd_swigregister = _CoreRobotics.vectorMatrixXd_swigregister
vectorMatrixXd_swigregister(vectorMatrixXd)

class vectorVectorXd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVectorXd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVectorXd, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CoreRobotics.vectorVectorXd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CoreRobotics.vectorVectorXd___nonzero__(self)

    def __bool__(self):
        return _CoreRobotics.vectorVectorXd___bool__(self)

    def __len__(self):
        return _CoreRobotics.vectorVectorXd___len__(self)

    def __getslice__(self, i, j):
        return _CoreRobotics.vectorVectorXd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CoreRobotics.vectorVectorXd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CoreRobotics.vectorVectorXd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CoreRobotics.vectorVectorXd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CoreRobotics.vectorVectorXd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CoreRobotics.vectorVectorXd___setitem__(self, *args)

    def pop(self):
        return _CoreRobotics.vectorVectorXd_pop(self)

    def append(self, x):
        return _CoreRobotics.vectorVectorXd_append(self, x)

    def empty(self):
        return _CoreRobotics.vectorVectorXd_empty(self)

    def size(self):
        return _CoreRobotics.vectorVectorXd_size(self)

    def swap(self, v):
        return _CoreRobotics.vectorVectorXd_swap(self, v)

    def begin(self):
        return _CoreRobotics.vectorVectorXd_begin(self)

    def end(self):
        return _CoreRobotics.vectorVectorXd_end(self)

    def rbegin(self):
        return _CoreRobotics.vectorVectorXd_rbegin(self)

    def rend(self):
        return _CoreRobotics.vectorVectorXd_rend(self)

    def clear(self):
        return _CoreRobotics.vectorVectorXd_clear(self)

    def get_allocator(self):
        return _CoreRobotics.vectorVectorXd_get_allocator(self)

    def pop_back(self):
        return _CoreRobotics.vectorVectorXd_pop_back(self)

    def erase(self, *args):
        return _CoreRobotics.vectorVectorXd_erase(self, *args)

    def __init__(self, *args):
        this = _CoreRobotics.new_vectorVectorXd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CoreRobotics.vectorVectorXd_push_back(self, x)

    def front(self):
        return _CoreRobotics.vectorVectorXd_front(self)

    def back(self):
        return _CoreRobotics.vectorVectorXd_back(self)

    def assign(self, n, x):
        return _CoreRobotics.vectorVectorXd_assign(self, n, x)

    def resize(self, *args):
        return _CoreRobotics.vectorVectorXd_resize(self, *args)

    def insert(self, *args):
        return _CoreRobotics.vectorVectorXd_insert(self, *args)

    def reserve(self, n):
        return _CoreRobotics.vectorVectorXd_reserve(self, n)

    def capacity(self):
        return _CoreRobotics.vectorVectorXd_capacity(self)
    __swig_destroy__ = _CoreRobotics.delete_vectorVectorXd
    __del__ = lambda self: None
vectorVectorXd_swigregister = _CoreRobotics.vectorVectorXd_swigregister
vectorVectorXd_swigregister(vectorVectorXd)

class Clock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Clock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Clock, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CoreRobotics.new_Clock()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_Clock
    __del__ = lambda self: None

    def startTimer(self):
        return _CoreRobotics.Clock_startTimer(self)

    def getElapsedTime(self):
        return _CoreRobotics.Clock_getElapsedTime(self)

    def sleep(self, i_time):
        return _CoreRobotics.Clock_sleep(self, i_time)
Clock_swigregister = _CoreRobotics.Clock_swigregister
Clock_swigregister(Clock)

CR_RESULT_SUCCESS = _CoreRobotics.CR_RESULT_SUCCESS
CR_RESULT_SINGULAR = _CoreRobotics.CR_RESULT_SINGULAR
CR_RESULT_UNWRITABLE = _CoreRobotics.CR_RESULT_UNWRITABLE
CR_RESULT_BAD_IC = _CoreRobotics.CR_RESULT_BAD_IC
CR_RESULT_NOT_FOUND = _CoreRobotics.CR_RESULT_NOT_FOUND
CR_RUN_STATE_RUNNING = _CoreRobotics.CR_RUN_STATE_RUNNING
CR_RUN_STATE_STOPPED = _CoreRobotics.CR_RUN_STATE_STOPPED
CR_RUN_STATE_PAUSED = _CoreRobotics.CR_RUN_STATE_PAUSED
class Conversion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Conversion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Conversion, name)
    __repr__ = _swig_repr
    if _newclass:
        deg2rad = staticmethod(_CoreRobotics.Conversion_deg2rad)
    else:
        deg2rad = _CoreRobotics.Conversion_deg2rad
    if _newclass:
        rad2deg = staticmethod(_CoreRobotics.Conversion_rad2deg)
    else:
        rad2deg = _CoreRobotics.Conversion_rad2deg
    if _newclass:
        wrapToPi = staticmethod(_CoreRobotics.Conversion_wrapToPi)
    else:
        wrapToPi = _CoreRobotics.Conversion_wrapToPi

    def __init__(self):
        this = _CoreRobotics.new_Conversion()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_Conversion
    __del__ = lambda self: None
Conversion_swigregister = _CoreRobotics.Conversion_swigregister
Conversion_swigregister(Conversion)

def Conversion_deg2rad(i_deg):
    return _CoreRobotics.Conversion_deg2rad(i_deg)
Conversion_deg2rad = _CoreRobotics.Conversion_deg2rad

def Conversion_rad2deg(i_rad):
    return _CoreRobotics.Conversion_rad2deg(i_rad)
Conversion_rad2deg = _CoreRobotics.Conversion_rad2deg

def Conversion_wrapToPi(*args):
    return _CoreRobotics.Conversion_wrapToPi(*args)
Conversion_wrapToPi = _CoreRobotics.Conversion_wrapToPi

class Integration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Integration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Integration, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CoreRobotics.new_Integration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_Integration
    __del__ = lambda self: None
Integration_swigregister = _CoreRobotics.Integration_swigregister
Integration_swigregister(Integration)

class Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr
    if _newclass:
        reducedVector = staticmethod(_CoreRobotics.Matrix_reducedVector)
    else:
        reducedVector = _CoreRobotics.Matrix_reducedVector
    if _newclass:
        reducedMatrix = staticmethod(_CoreRobotics.Matrix_reducedMatrix)
    else:
        reducedMatrix = _CoreRobotics.Matrix_reducedMatrix
    if _newclass:
        svd = staticmethod(_CoreRobotics.Matrix_svd)
    else:
        svd = _CoreRobotics.Matrix_svd
    if _newclass:
        svdInverse = staticmethod(_CoreRobotics.Matrix_svdInverse)
    else:
        svdInverse = _CoreRobotics.Matrix_svdInverse
    if _newclass:
        rotAboutX = staticmethod(_CoreRobotics.Matrix_rotAboutX)
    else:
        rotAboutX = _CoreRobotics.Matrix_rotAboutX
    if _newclass:
        rotAboutY = staticmethod(_CoreRobotics.Matrix_rotAboutY)
    else:
        rotAboutY = _CoreRobotics.Matrix_rotAboutY
    if _newclass:
        rotAboutZ = staticmethod(_CoreRobotics.Matrix_rotAboutZ)
    else:
        rotAboutZ = _CoreRobotics.Matrix_rotAboutZ
    if _newclass:
        normL1 = staticmethod(_CoreRobotics.Matrix_normL1)
    else:
        normL1 = _CoreRobotics.Matrix_normL1
    if _newclass:
        normL2 = staticmethod(_CoreRobotics.Matrix_normL2)
    else:
        normL2 = _CoreRobotics.Matrix_normL2
    if _newclass:
        normLinf = staticmethod(_CoreRobotics.Matrix_normLinf)
    else:
        normLinf = _CoreRobotics.Matrix_normLinf

    def __init__(self):
        this = _CoreRobotics.new_Matrix()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_Matrix
    __del__ = lambda self: None
Matrix_swigregister = _CoreRobotics.Matrix_swigregister
Matrix_swigregister(Matrix)

def Matrix_reducedVector(i_x, i_indices):
    return _CoreRobotics.Matrix_reducedVector(i_x, i_indices)
Matrix_reducedVector = _CoreRobotics.Matrix_reducedVector

def Matrix_reducedMatrix(i_x, i_rowIndices, i_colIndices):
    return _CoreRobotics.Matrix_reducedMatrix(i_x, i_rowIndices, i_colIndices)
Matrix_reducedMatrix = _CoreRobotics.Matrix_reducedMatrix

def Matrix_svd(i_A, i_tol, o_U, o_Sigma, o_V):
    return _CoreRobotics.Matrix_svd(i_A, i_tol, o_U, o_Sigma, o_V)
Matrix_svd = _CoreRobotics.Matrix_svd

def Matrix_svdInverse(i_A, i_tol, o_Ainv):
    return _CoreRobotics.Matrix_svdInverse(i_A, i_tol, o_Ainv)
Matrix_svdInverse = _CoreRobotics.Matrix_svdInverse

def Matrix_rotAboutX(i_ang):
    return _CoreRobotics.Matrix_rotAboutX(i_ang)
Matrix_rotAboutX = _CoreRobotics.Matrix_rotAboutX

def Matrix_rotAboutY(i_ang):
    return _CoreRobotics.Matrix_rotAboutY(i_ang)
Matrix_rotAboutY = _CoreRobotics.Matrix_rotAboutY

def Matrix_rotAboutZ(i_ang):
    return _CoreRobotics.Matrix_rotAboutZ(i_ang)
Matrix_rotAboutZ = _CoreRobotics.Matrix_rotAboutZ

def Matrix_normL1(x):
    return _CoreRobotics.Matrix_normL1(x)
Matrix_normL1 = _CoreRobotics.Matrix_normL1

def Matrix_normL2(x):
    return _CoreRobotics.Matrix_normL2(x)
Matrix_normL2 = _CoreRobotics.Matrix_normL2

def Matrix_normLinf(x):
    return _CoreRobotics.Matrix_normLinf(x)
Matrix_normLinf = _CoreRobotics.Matrix_normLinf

CR_EULER_MODE_ZXZ = _CoreRobotics.CR_EULER_MODE_ZXZ
CR_EULER_MODE_XYX = _CoreRobotics.CR_EULER_MODE_XYX
CR_EULER_MODE_YZY = _CoreRobotics.CR_EULER_MODE_YZY
CR_EULER_MODE_ZYZ = _CoreRobotics.CR_EULER_MODE_ZYZ
CR_EULER_MODE_XZX = _CoreRobotics.CR_EULER_MODE_XZX
CR_EULER_MODE_YXY = _CoreRobotics.CR_EULER_MODE_YXY
CR_EULER_MODE_XYZ = _CoreRobotics.CR_EULER_MODE_XYZ
CR_EULER_MODE_YZX = _CoreRobotics.CR_EULER_MODE_YZX
CR_EULER_MODE_ZXY = _CoreRobotics.CR_EULER_MODE_ZXY
CR_EULER_MODE_XZY = _CoreRobotics.CR_EULER_MODE_XZY
CR_EULER_MODE_ZYX = _CoreRobotics.CR_EULER_MODE_ZYX
CR_EULER_MODE_YXZ = _CoreRobotics.CR_EULER_MODE_YXZ
class Frame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Frame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Frame, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_Frame(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setFreeValue(self, i_q):
        return _CoreRobotics.Frame_setFreeValue(self, i_q)

    def getFreeValue(self):
        return _CoreRobotics.Frame_getFreeValue(self)

    def setRotation(self, i_rot):
        return _CoreRobotics.Frame_setRotation(self, i_rot)

    def setTranslation(self, i_trans):
        return _CoreRobotics.Frame_setTranslation(self, i_trans)

    def setRotationAndTranslation(self, i_rot, i_trans):
        return _CoreRobotics.Frame_setRotationAndTranslation(self, i_rot, i_trans)

    def getRotationAndTranslation(self, o_rot, o_trans):
        return _CoreRobotics.Frame_getRotationAndTranslation(self, o_rot, o_trans)

    def getTransformToParent(self):
        return _CoreRobotics.Frame_getTransformToParent(self)

    def getTransformToChild(self):
        return _CoreRobotics.Frame_getTransformToChild(self)

    def transformToParent(self, i_point):
        return _CoreRobotics.Frame_transformToParent(self, i_point)

    def transformToChild(self, i_point):
        return _CoreRobotics.Frame_transformToChild(self, i_point)

    def isDriven(self):
        return _CoreRobotics.Frame_isDriven(self)

    def getTranslation(self):
        return _CoreRobotics.Frame_getTranslation(self)

    def getRotation(self):
        return _CoreRobotics.Frame_getRotation(self)

    def getOrientation(self, i_mode):
        return _CoreRobotics.Frame_getOrientation(self, i_mode)

    def getPose(self, *args):
        return _CoreRobotics.Frame_getPose(self, *args)
    __swig_destroy__ = _CoreRobotics.delete_Frame
    __del__ = lambda self: None
Frame_swigregister = _CoreRobotics.Frame_swigregister
Frame_swigregister(Frame)

CR_EULER_FREE_NONE = _CoreRobotics.CR_EULER_FREE_NONE
CR_EULER_FREE_POS_X = _CoreRobotics.CR_EULER_FREE_POS_X
CR_EULER_FREE_POS_Y = _CoreRobotics.CR_EULER_FREE_POS_Y
CR_EULER_FREE_POS_Z = _CoreRobotics.CR_EULER_FREE_POS_Z
CR_EULER_FREE_ANG_A = _CoreRobotics.CR_EULER_FREE_ANG_A
CR_EULER_FREE_ANG_B = _CoreRobotics.CR_EULER_FREE_ANG_B
CR_EULER_FREE_ANG_G = _CoreRobotics.CR_EULER_FREE_ANG_G
class FrameEuler(Frame):
    __swig_setmethods__ = {}
    for _s in [Frame]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameEuler, name, value)
    __swig_getmethods__ = {}
    for _s in [Frame]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameEuler, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_FrameEuler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setFreeValue(self, i_q):
        return _CoreRobotics.FrameEuler_setFreeValue(self, i_q)

    def getFreeValue(self):
        return _CoreRobotics.FrameEuler_getFreeValue(self)

    def setFreeVariable(self, i_free):
        return _CoreRobotics.FrameEuler_setFreeVariable(self, i_free)

    def getFreeVariable(self):
        return _CoreRobotics.FrameEuler_getFreeVariable(self)

    def setMode(self, i_mode):
        return _CoreRobotics.FrameEuler_setMode(self, i_mode)

    def getMode(self):
        return _CoreRobotics.FrameEuler_getMode(self)

    def setPosition(self, i_x, i_y, i_z):
        return _CoreRobotics.FrameEuler_setPosition(self, i_x, i_y, i_z)

    def getPosition(self, o_x, o_y, o_z):
        return _CoreRobotics.FrameEuler_getPosition(self, o_x, o_y, o_z)

    def setOrientation(self, i_a, i_b, i_g):
        return _CoreRobotics.FrameEuler_setOrientation(self, i_a, i_b, i_g)

    def getOrientation(self, o_a, o_b, o_g):
        return _CoreRobotics.FrameEuler_getOrientation(self, o_a, o_b, o_g)

    def setPositionAndOrientation(self, i_x, i_y, i_z, i_a, i_b, i_g):
        return _CoreRobotics.FrameEuler_setPositionAndOrientation(self, i_x, i_y, i_z, i_a, i_b, i_g)

    def getPositionAndOrientation(self, o_x, o_y, o_z, o_a, o_b, o_g):
        return _CoreRobotics.FrameEuler_getPositionAndOrientation(self, o_x, o_y, o_z, o_a, o_b, o_g)

    def setRotationAndTranslation(self, i_rot, i_trans):
        return _CoreRobotics.FrameEuler_setRotationAndTranslation(self, i_rot, i_trans)

    def isDriven(self):
        return _CoreRobotics.FrameEuler_isDriven(self)
    __swig_destroy__ = _CoreRobotics.delete_FrameEuler
    __del__ = lambda self: None
FrameEuler_swigregister = _CoreRobotics.FrameEuler_swigregister
FrameEuler_swigregister(FrameEuler)

CR_DH_FREE_NONE = _CoreRobotics.CR_DH_FREE_NONE
CR_DH_FREE_R = _CoreRobotics.CR_DH_FREE_R
CR_DH_FREE_ALPHA = _CoreRobotics.CR_DH_FREE_ALPHA
CR_DH_FREE_D = _CoreRobotics.CR_DH_FREE_D
CR_DH_FREE_THETA = _CoreRobotics.CR_DH_FREE_THETA
CR_DH_MODE_CLASSIC = _CoreRobotics.CR_DH_MODE_CLASSIC
CR_DH_MODE_MODIFIED = _CoreRobotics.CR_DH_MODE_MODIFIED
class FrameDh(Frame):
    __swig_setmethods__ = {}
    for _s in [Frame]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameDh, name, value)
    __swig_getmethods__ = {}
    for _s in [Frame]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameDh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_FrameDh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setFreeValue(self, i_q):
        return _CoreRobotics.FrameDh_setFreeValue(self, i_q)

    def getFreeValue(self):
        return _CoreRobotics.FrameDh_getFreeValue(self)

    def setFreeVariable(self, i_free):
        return _CoreRobotics.FrameDh_setFreeVariable(self, i_free)

    def getFreeVariable(self):
        return _CoreRobotics.FrameDh_getFreeVariable(self)

    def setMode(self, i_mode):
        return _CoreRobotics.FrameDh_setMode(self, i_mode)

    def getMode(self):
        return _CoreRobotics.FrameDh_getMode(self)

    def setParameters(self, i_r, i_alpha, i_d, i_theta):
        return _CoreRobotics.FrameDh_setParameters(self, i_r, i_alpha, i_d, i_theta)

    def getParameters(self, o_r, o_alpha, o_d, o_theta):
        return _CoreRobotics.FrameDh_getParameters(self, o_r, o_alpha, o_d, o_theta)

    def isDriven(self):
        return _CoreRobotics.FrameDh_isDriven(self)
    __swig_destroy__ = _CoreRobotics.delete_FrameDh
    __del__ = lambda self: None
FrameDh_swigregister = _CoreRobotics.FrameDh_swigregister
FrameDh_swigregister(FrameDh)

class RigidBody(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigidBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RigidBody, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CoreRobotics.new_RigidBody()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_RigidBody
    __del__ = lambda self: None

    def setCenterOfMass(self, i_com):
        return _CoreRobotics.RigidBody_setCenterOfMass(self, i_com)

    def getCenterOfMass(self):
        return _CoreRobotics.RigidBody_getCenterOfMass(self)

    def setInertiaTensor(self, i_inertia):
        return _CoreRobotics.RigidBody_setInertiaTensor(self, i_inertia)

    def getInertiaTensor(self):
        return _CoreRobotics.RigidBody_getInertiaTensor(self)

    def setMass(self, i_mass):
        return _CoreRobotics.RigidBody_setMass(self, i_mass)

    def getMass(self):
        return _CoreRobotics.RigidBody_getMass(self)

    def getMassMatrix(self):
        return _CoreRobotics.RigidBody_getMassMatrix(self)
RigidBody_swigregister = _CoreRobotics.RigidBody_swigregister
RigidBody_swigregister(RigidBody)

class CRParamNoiseGeneric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRParamNoiseGeneric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRParamNoiseGeneric, name)
    __repr__ = _swig_repr
    __swig_setmethods__["icdFunction"] = _CoreRobotics.CRParamNoiseGeneric_icdFunction_set
    __swig_getmethods__["icdFunction"] = _CoreRobotics.CRParamNoiseGeneric_icdFunction_get
    if _newclass:
        icdFunction = _swig_property(_CoreRobotics.CRParamNoiseGeneric_icdFunction_get, _CoreRobotics.CRParamNoiseGeneric_icdFunction_set)
    __swig_setmethods__["probFunction"] = _CoreRobotics.CRParamNoiseGeneric_probFunction_set
    __swig_getmethods__["probFunction"] = _CoreRobotics.CRParamNoiseGeneric_probFunction_get
    if _newclass:
        probFunction = _swig_property(_CoreRobotics.CRParamNoiseGeneric_probFunction_get, _CoreRobotics.CRParamNoiseGeneric_probFunction_set)

    def __init__(self):
        this = _CoreRobotics.new_CRParamNoiseGeneric()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_CRParamNoiseGeneric
    __del__ = lambda self: None
CRParamNoiseGeneric_swigregister = _CoreRobotics.CRParamNoiseGeneric_swigregister
CRParamNoiseGeneric_swigregister(CRParamNoiseGeneric)

class NoiseModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoiseModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NoiseModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_NoiseModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setParameters(self, i_icd, i_prob):
        return _CoreRobotics.NoiseModel_setParameters(self, i_icd, i_prob)

    def sample(self):
        return _CoreRobotics.NoiseModel_sample(self)

    def probability(self, i_x):
        return _CoreRobotics.NoiseModel_probability(self, i_x)
    __swig_setmethods__["m_parameters"] = _CoreRobotics.NoiseModel_m_parameters_set
    __swig_getmethods__["m_parameters"] = _CoreRobotics.NoiseModel_m_parameters_get
    if _newclass:
        m_parameters = _swig_property(_CoreRobotics.NoiseModel_m_parameters_get, _CoreRobotics.NoiseModel_m_parameters_set)
    __swig_destroy__ = _CoreRobotics.delete_NoiseModel
    __del__ = lambda self: None
NoiseModel_swigregister = _CoreRobotics.NoiseModel_swigregister
NoiseModel_swigregister(NoiseModel)

class CRParamNoiseGaussian(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRParamNoiseGaussian, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRParamNoiseGaussian, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cov"] = _CoreRobotics.CRParamNoiseGaussian_cov_set
    __swig_getmethods__["cov"] = _CoreRobotics.CRParamNoiseGaussian_cov_get
    if _newclass:
        cov = _swig_property(_CoreRobotics.CRParamNoiseGaussian_cov_get, _CoreRobotics.CRParamNoiseGaussian_cov_set)
    __swig_setmethods__["covInv"] = _CoreRobotics.CRParamNoiseGaussian_covInv_set
    __swig_getmethods__["covInv"] = _CoreRobotics.CRParamNoiseGaussian_covInv_get
    if _newclass:
        covInv = _swig_property(_CoreRobotics.CRParamNoiseGaussian_covInv_get, _CoreRobotics.CRParamNoiseGaussian_covInv_set)
    __swig_setmethods__["mean"] = _CoreRobotics.CRParamNoiseGaussian_mean_set
    __swig_getmethods__["mean"] = _CoreRobotics.CRParamNoiseGaussian_mean_get
    if _newclass:
        mean = _swig_property(_CoreRobotics.CRParamNoiseGaussian_mean_get, _CoreRobotics.CRParamNoiseGaussian_mean_set)

    def __init__(self):
        this = _CoreRobotics.new_CRParamNoiseGaussian()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_CRParamNoiseGaussian
    __del__ = lambda self: None
CRParamNoiseGaussian_swigregister = _CoreRobotics.CRParamNoiseGaussian_swigregister
CRParamNoiseGaussian_swigregister(CRParamNoiseGaussian)

class NoiseGaussian(NoiseModel):
    __swig_setmethods__ = {}
    for _s in [NoiseModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoiseGaussian, name, value)
    __swig_getmethods__ = {}
    for _s in [NoiseModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoiseGaussian, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_NoiseGaussian(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setParameters(self, *args):
        return _CoreRobotics.NoiseGaussian_setParameters(self, *args)

    def sample(self):
        return _CoreRobotics.NoiseGaussian_sample(self)

    def probability(self, i_x):
        return _CoreRobotics.NoiseGaussian_probability(self, i_x)
    __swig_setmethods__["m_parameters"] = _CoreRobotics.NoiseGaussian_m_parameters_set
    __swig_getmethods__["m_parameters"] = _CoreRobotics.NoiseGaussian_m_parameters_get
    if _newclass:
        m_parameters = _swig_property(_CoreRobotics.NoiseGaussian_m_parameters_get, _CoreRobotics.NoiseGaussian_m_parameters_set)
    __swig_destroy__ = _CoreRobotics.delete_NoiseGaussian
    __del__ = lambda self: None
NoiseGaussian_swigregister = _CoreRobotics.NoiseGaussian_swigregister
NoiseGaussian_swigregister(NoiseGaussian)

class CRParamNoiseUniform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRParamNoiseUniform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRParamNoiseUniform, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _CoreRobotics.CRParamNoiseUniform_a_set
    __swig_getmethods__["a"] = _CoreRobotics.CRParamNoiseUniform_a_get
    if _newclass:
        a = _swig_property(_CoreRobotics.CRParamNoiseUniform_a_get, _CoreRobotics.CRParamNoiseUniform_a_set)
    __swig_setmethods__["b"] = _CoreRobotics.CRParamNoiseUniform_b_set
    __swig_getmethods__["b"] = _CoreRobotics.CRParamNoiseUniform_b_get
    if _newclass:
        b = _swig_property(_CoreRobotics.CRParamNoiseUniform_b_get, _CoreRobotics.CRParamNoiseUniform_b_set)

    def __init__(self):
        this = _CoreRobotics.new_CRParamNoiseUniform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_CRParamNoiseUniform
    __del__ = lambda self: None
CRParamNoiseUniform_swigregister = _CoreRobotics.CRParamNoiseUniform_swigregister
CRParamNoiseUniform_swigregister(CRParamNoiseUniform)

class NoiseUniform(NoiseModel):
    __swig_setmethods__ = {}
    for _s in [NoiseModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoiseUniform, name, value)
    __swig_getmethods__ = {}
    for _s in [NoiseModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoiseUniform, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_NoiseUniform(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setParameters(self, *args):
        return _CoreRobotics.NoiseUniform_setParameters(self, *args)

    def sample(self):
        return _CoreRobotics.NoiseUniform_sample(self)

    def probability(self, i_x):
        return _CoreRobotics.NoiseUniform_probability(self, i_x)
    __swig_setmethods__["m_parameters"] = _CoreRobotics.NoiseUniform_m_parameters_set
    __swig_getmethods__["m_parameters"] = _CoreRobotics.NoiseUniform_m_parameters_get
    if _newclass:
        m_parameters = _swig_property(_CoreRobotics.NoiseUniform_m_parameters_get, _CoreRobotics.NoiseUniform_m_parameters_set)
    __swig_destroy__ = _CoreRobotics.delete_NoiseUniform
    __del__ = lambda self: None
NoiseUniform_swigregister = _CoreRobotics.NoiseUniform_swigregister
NoiseUniform_swigregister(NoiseUniform)

class CRParamNoiseMixture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRParamNoiseMixture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRParamNoiseMixture, name)
    __repr__ = _swig_repr
    __swig_setmethods__["models"] = _CoreRobotics.CRParamNoiseMixture_models_set
    __swig_getmethods__["models"] = _CoreRobotics.CRParamNoiseMixture_models_get
    if _newclass:
        models = _swig_property(_CoreRobotics.CRParamNoiseMixture_models_get, _CoreRobotics.CRParamNoiseMixture_models_set)
    __swig_setmethods__["weights"] = _CoreRobotics.CRParamNoiseMixture_weights_set
    __swig_getmethods__["weights"] = _CoreRobotics.CRParamNoiseMixture_weights_get
    if _newclass:
        weights = _swig_property(_CoreRobotics.CRParamNoiseMixture_weights_get, _CoreRobotics.CRParamNoiseMixture_weights_set)

    def __init__(self):
        this = _CoreRobotics.new_CRParamNoiseMixture()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_CRParamNoiseMixture
    __del__ = lambda self: None
CRParamNoiseMixture_swigregister = _CoreRobotics.CRParamNoiseMixture_swigregister
CRParamNoiseMixture_swigregister(CRParamNoiseMixture)

class NoiseMixture(NoiseModel):
    __swig_setmethods__ = {}
    for _s in [NoiseModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoiseMixture, name, value)
    __swig_getmethods__ = {}
    for _s in [NoiseModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoiseMixture, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_NoiseMixture(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def add(self, i_model, i_weight):
        return _CoreRobotics.NoiseMixture_add(self, i_model, i_weight)

    def sample(self):
        return _CoreRobotics.NoiseMixture_sample(self)

    def probability(self, i_x):
        return _CoreRobotics.NoiseMixture_probability(self, i_x)
    __swig_setmethods__["m_parameters"] = _CoreRobotics.NoiseMixture_m_parameters_set
    __swig_getmethods__["m_parameters"] = _CoreRobotics.NoiseMixture_m_parameters_get
    if _newclass:
        m_parameters = _swig_property(_CoreRobotics.NoiseMixture_m_parameters_get, _CoreRobotics.NoiseMixture_m_parameters_set)
    __swig_destroy__ = _CoreRobotics.delete_NoiseMixture
    __del__ = lambda self: None
NoiseMixture_swigregister = _CoreRobotics.NoiseMixture_swigregister
NoiseMixture_swigregister(NoiseMixture)

CR_MANAGER_SERVER = _CoreRobotics.CR_MANAGER_SERVER
CR_MANAGER_CLIENT = _CoreRobotics.CR_MANAGER_CLIENT
class SharedMemory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SharedMemory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SharedMemory, name)
    __repr__ = _swig_repr

    def __init__(self, i_memoryName, i_role):
        this = _CoreRobotics.new_SharedMemory(i_memoryName, i_role)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_SharedMemory
    __del__ = lambda self: None

    def addSignal(self, i_signalName, i_data):
        return _CoreRobotics.SharedMemory_addSignal(self, i_signalName, i_data)

    def removeSignal(self, i_signalName):
        return _CoreRobotics.SharedMemory_removeSignal(self, i_signalName)

    def set(self, i_signalName, i_data):
        return _CoreRobotics.SharedMemory_set(self, i_signalName, i_data)

    def get(self, i_signalName):
        return _CoreRobotics.SharedMemory_get(self, i_signalName)
SharedMemory_swigregister = _CoreRobotics.SharedMemory_swigregister
SharedMemory_swigregister(SharedMemory)

# This file is compatible with both classic and new-style classes.


