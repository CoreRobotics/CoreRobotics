# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_CoreRobotics')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_CoreRobotics')
    _CoreRobotics = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CoreRobotics', [dirname(__file__)])
        except ImportError:
            import _CoreRobotics
            return _CoreRobotics
        try:
            _mod = imp.load_module('_CoreRobotics', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _CoreRobotics = swig_import_helper()
    del swig_import_helper
else:
    import _CoreRobotics
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreRobotics.delete_SwigPyIterator
    def __del__(self):
        return None

    def value(self):
        return _CoreRobotics.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CoreRobotics.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CoreRobotics.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CoreRobotics.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CoreRobotics.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CoreRobotics.SwigPyIterator_copy(self)

    def next(self):
        return _CoreRobotics.SwigPyIterator_next(self)

    def __next__(self):
        return _CoreRobotics.SwigPyIterator___next__(self)

    def previous(self):
        return _CoreRobotics.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CoreRobotics.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CoreRobotics.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CoreRobotics.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CoreRobotics.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CoreRobotics.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CoreRobotics.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CoreRobotics.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _CoreRobotics.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectorMatrixXd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorMatrixXd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorMatrixXd, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CoreRobotics.vectorMatrixXd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CoreRobotics.vectorMatrixXd___nonzero__(self)

    def __bool__(self):
        return _CoreRobotics.vectorMatrixXd___bool__(self)

    def __len__(self):
        return _CoreRobotics.vectorMatrixXd___len__(self)

    def __getslice__(self, i, j):
        return _CoreRobotics.vectorMatrixXd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CoreRobotics.vectorMatrixXd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CoreRobotics.vectorMatrixXd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CoreRobotics.vectorMatrixXd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CoreRobotics.vectorMatrixXd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CoreRobotics.vectorMatrixXd___setitem__(self, *args)

    def pop(self):
        return _CoreRobotics.vectorMatrixXd_pop(self)

    def append(self, x):
        return _CoreRobotics.vectorMatrixXd_append(self, x)

    def empty(self):
        return _CoreRobotics.vectorMatrixXd_empty(self)

    def size(self):
        return _CoreRobotics.vectorMatrixXd_size(self)

    def swap(self, v):
        return _CoreRobotics.vectorMatrixXd_swap(self, v)

    def begin(self):
        return _CoreRobotics.vectorMatrixXd_begin(self)

    def end(self):
        return _CoreRobotics.vectorMatrixXd_end(self)

    def rbegin(self):
        return _CoreRobotics.vectorMatrixXd_rbegin(self)

    def rend(self):
        return _CoreRobotics.vectorMatrixXd_rend(self)

    def clear(self):
        return _CoreRobotics.vectorMatrixXd_clear(self)

    def get_allocator(self):
        return _CoreRobotics.vectorMatrixXd_get_allocator(self)

    def pop_back(self):
        return _CoreRobotics.vectorMatrixXd_pop_back(self)

    def erase(self, *args):
        return _CoreRobotics.vectorMatrixXd_erase(self, *args)

    def __init__(self, *args):
        this = _CoreRobotics.new_vectorMatrixXd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CoreRobotics.vectorMatrixXd_push_back(self, x)

    def front(self):
        return _CoreRobotics.vectorMatrixXd_front(self)

    def back(self):
        return _CoreRobotics.vectorMatrixXd_back(self)

    def assign(self, n, x):
        return _CoreRobotics.vectorMatrixXd_assign(self, n, x)

    def resize(self, *args):
        return _CoreRobotics.vectorMatrixXd_resize(self, *args)

    def insert(self, *args):
        return _CoreRobotics.vectorMatrixXd_insert(self, *args)

    def reserve(self, n):
        return _CoreRobotics.vectorMatrixXd_reserve(self, n)

    def capacity(self):
        return _CoreRobotics.vectorMatrixXd_capacity(self)
    __swig_destroy__ = _CoreRobotics.delete_vectorMatrixXd
    def __del__(self):
        return None
vectorMatrixXd_swigregister = _CoreRobotics.vectorMatrixXd_swigregister
vectorMatrixXd_swigregister(vectorMatrixXd)

class vectorVectorXd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVectorXd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVectorXd, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CoreRobotics.vectorVectorXd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CoreRobotics.vectorVectorXd___nonzero__(self)

    def __bool__(self):
        return _CoreRobotics.vectorVectorXd___bool__(self)

    def __len__(self):
        return _CoreRobotics.vectorVectorXd___len__(self)

    def __getslice__(self, i, j):
        return _CoreRobotics.vectorVectorXd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CoreRobotics.vectorVectorXd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CoreRobotics.vectorVectorXd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CoreRobotics.vectorVectorXd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CoreRobotics.vectorVectorXd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CoreRobotics.vectorVectorXd___setitem__(self, *args)

    def pop(self):
        return _CoreRobotics.vectorVectorXd_pop(self)

    def append(self, x):
        return _CoreRobotics.vectorVectorXd_append(self, x)

    def empty(self):
        return _CoreRobotics.vectorVectorXd_empty(self)

    def size(self):
        return _CoreRobotics.vectorVectorXd_size(self)

    def swap(self, v):
        return _CoreRobotics.vectorVectorXd_swap(self, v)

    def begin(self):
        return _CoreRobotics.vectorVectorXd_begin(self)

    def end(self):
        return _CoreRobotics.vectorVectorXd_end(self)

    def rbegin(self):
        return _CoreRobotics.vectorVectorXd_rbegin(self)

    def rend(self):
        return _CoreRobotics.vectorVectorXd_rend(self)

    def clear(self):
        return _CoreRobotics.vectorVectorXd_clear(self)

    def get_allocator(self):
        return _CoreRobotics.vectorVectorXd_get_allocator(self)

    def pop_back(self):
        return _CoreRobotics.vectorVectorXd_pop_back(self)

    def erase(self, *args):
        return _CoreRobotics.vectorVectorXd_erase(self, *args)

    def __init__(self, *args):
        this = _CoreRobotics.new_vectorVectorXd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CoreRobotics.vectorVectorXd_push_back(self, x)

    def front(self):
        return _CoreRobotics.vectorVectorXd_front(self)

    def back(self):
        return _CoreRobotics.vectorVectorXd_back(self)

    def assign(self, n, x):
        return _CoreRobotics.vectorVectorXd_assign(self, n, x)

    def resize(self, *args):
        return _CoreRobotics.vectorVectorXd_resize(self, *args)

    def insert(self, *args):
        return _CoreRobotics.vectorVectorXd_insert(self, *args)

    def reserve(self, n):
        return _CoreRobotics.vectorVectorXd_reserve(self, n)

    def capacity(self):
        return _CoreRobotics.vectorVectorXd_capacity(self)
    __swig_destroy__ = _CoreRobotics.delete_vectorVectorXd
    def __del__(self):
        return None
vectorVectorXd_swigregister = _CoreRobotics.vectorVectorXd_swigregister
vectorVectorXd_swigregister(vectorVectorXd)

class CRClock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRClock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRClock, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CoreRobotics.new_CRClock()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_CRClock
    def __del__(self):
        return None

    def startTimer(self):
        return _CoreRobotics.CRClock_startTimer(self)

    def getElapsedTime(self):
        return _CoreRobotics.CRClock_getElapsedTime(self)

    def sleep(self, i_time):
        return _CoreRobotics.CRClock_sleep(self, i_time)
CRClock_swigregister = _CoreRobotics.CRClock_swigregister
CRClock_swigregister(CRClock)

CR_SIGNAL_FORCE = _CoreRobotics.CR_SIGNAL_FORCE
CR_SIGNAL_POSITION = _CoreRobotics.CR_SIGNAL_POSITION
CR_SIGNAL_VELOCITY = _CoreRobotics.CR_SIGNAL_VELOCITY
CR_SIGNAL_ACCELERATION = _CoreRobotics.CR_SIGNAL_ACCELERATION
CR_SIGNAL_GENERIC = _CoreRobotics.CR_SIGNAL_GENERIC
CR_RESULT_SUCCESS = _CoreRobotics.CR_RESULT_SUCCESS
CR_RESULT_SINGULAR = _CoreRobotics.CR_RESULT_SINGULAR
CR_RESULT_UNWRITABLE = _CoreRobotics.CR_RESULT_UNWRITABLE
CR_RESULT_BAD_IC = _CoreRobotics.CR_RESULT_BAD_IC
class CRConversion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRConversion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRConversion, name)
    __repr__ = _swig_repr
    if _newclass:
        deg2rad = staticmethod(_CoreRobotics.CRConversion_deg2rad)
    else:
        deg2rad = _CoreRobotics.CRConversion_deg2rad
    if _newclass:
        rad2deg = staticmethod(_CoreRobotics.CRConversion_rad2deg)
    else:
        rad2deg = _CoreRobotics.CRConversion_rad2deg
    if _newclass:
        wrapToPi = staticmethod(_CoreRobotics.CRConversion_wrapToPi)
    else:
        wrapToPi = _CoreRobotics.CRConversion_wrapToPi

    def __init__(self):
        this = _CoreRobotics.new_CRConversion()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_CRConversion
    def __del__(self):
        return None
CRConversion_swigregister = _CoreRobotics.CRConversion_swigregister
CRConversion_swigregister(CRConversion)

def CRConversion_deg2rad(i_deg):
    return _CoreRobotics.CRConversion_deg2rad(i_deg)
CRConversion_deg2rad = _CoreRobotics.CRConversion_deg2rad

def CRConversion_rad2deg(i_rad):
    return _CoreRobotics.CRConversion_rad2deg(i_rad)
CRConversion_rad2deg = _CoreRobotics.CRConversion_rad2deg

def CRConversion_wrapToPi(*args):
    return _CoreRobotics.CRConversion_wrapToPi(*args)
CRConversion_wrapToPi = _CoreRobotics.CRConversion_wrapToPi

class CRIntegration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRIntegration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRIntegration, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CoreRobotics.new_CRIntegration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_CRIntegration
    def __del__(self):
        return None
CRIntegration_swigregister = _CoreRobotics.CRIntegration_swigregister
CRIntegration_swigregister(CRIntegration)

class CRMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRMatrix, name)
    __repr__ = _swig_repr
    if _newclass:
        svd = staticmethod(_CoreRobotics.CRMatrix_svd)
    else:
        svd = _CoreRobotics.CRMatrix_svd
    if _newclass:
        svdInverse = staticmethod(_CoreRobotics.CRMatrix_svdInverse)
    else:
        svdInverse = _CoreRobotics.CRMatrix_svdInverse
    if _newclass:
        rotAboutX = staticmethod(_CoreRobotics.CRMatrix_rotAboutX)
    else:
        rotAboutX = _CoreRobotics.CRMatrix_rotAboutX
    if _newclass:
        rotAboutY = staticmethod(_CoreRobotics.CRMatrix_rotAboutY)
    else:
        rotAboutY = _CoreRobotics.CRMatrix_rotAboutY
    if _newclass:
        rotAboutZ = staticmethod(_CoreRobotics.CRMatrix_rotAboutZ)
    else:
        rotAboutZ = _CoreRobotics.CRMatrix_rotAboutZ
    if _newclass:
        normL1 = staticmethod(_CoreRobotics.CRMatrix_normL1)
    else:
        normL1 = _CoreRobotics.CRMatrix_normL1
    if _newclass:
        normL2 = staticmethod(_CoreRobotics.CRMatrix_normL2)
    else:
        normL2 = _CoreRobotics.CRMatrix_normL2
    if _newclass:
        normLinf = staticmethod(_CoreRobotics.CRMatrix_normLinf)
    else:
        normLinf = _CoreRobotics.CRMatrix_normLinf

    def __init__(self):
        this = _CoreRobotics.new_CRMatrix()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_CRMatrix
    def __del__(self):
        return None
CRMatrix_swigregister = _CoreRobotics.CRMatrix_swigregister
CRMatrix_swigregister(CRMatrix)

def CRMatrix_svd(i_A, i_tol, o_U, o_Sigma, o_V):
    return _CoreRobotics.CRMatrix_svd(i_A, i_tol, o_U, o_Sigma, o_V)
CRMatrix_svd = _CoreRobotics.CRMatrix_svd

def CRMatrix_svdInverse(i_A, i_tol, o_Ainv):
    return _CoreRobotics.CRMatrix_svdInverse(i_A, i_tol, o_Ainv)
CRMatrix_svdInverse = _CoreRobotics.CRMatrix_svdInverse

def CRMatrix_rotAboutX(i_ang):
    return _CoreRobotics.CRMatrix_rotAboutX(i_ang)
CRMatrix_rotAboutX = _CoreRobotics.CRMatrix_rotAboutX

def CRMatrix_rotAboutY(i_ang):
    return _CoreRobotics.CRMatrix_rotAboutY(i_ang)
CRMatrix_rotAboutY = _CoreRobotics.CRMatrix_rotAboutY

def CRMatrix_rotAboutZ(i_ang):
    return _CoreRobotics.CRMatrix_rotAboutZ(i_ang)
CRMatrix_rotAboutZ = _CoreRobotics.CRMatrix_rotAboutZ

def CRMatrix_normL1(x):
    return _CoreRobotics.CRMatrix_normL1(x)
CRMatrix_normL1 = _CoreRobotics.CRMatrix_normL1

def CRMatrix_normL2(x):
    return _CoreRobotics.CRMatrix_normL2(x)
CRMatrix_normL2 = _CoreRobotics.CRMatrix_normL2

def CRMatrix_normLinf(x):
    return _CoreRobotics.CRMatrix_normLinf(x)
CRMatrix_normLinf = _CoreRobotics.CRMatrix_normLinf

CR_EULER_MODE_ZXZ = _CoreRobotics.CR_EULER_MODE_ZXZ
CR_EULER_MODE_XYX = _CoreRobotics.CR_EULER_MODE_XYX
CR_EULER_MODE_YZY = _CoreRobotics.CR_EULER_MODE_YZY
CR_EULER_MODE_ZYZ = _CoreRobotics.CR_EULER_MODE_ZYZ
CR_EULER_MODE_XZX = _CoreRobotics.CR_EULER_MODE_XZX
CR_EULER_MODE_YXY = _CoreRobotics.CR_EULER_MODE_YXY
CR_EULER_MODE_XYZ = _CoreRobotics.CR_EULER_MODE_XYZ
CR_EULER_MODE_YZX = _CoreRobotics.CR_EULER_MODE_YZX
CR_EULER_MODE_ZXY = _CoreRobotics.CR_EULER_MODE_ZXY
CR_EULER_MODE_XZY = _CoreRobotics.CR_EULER_MODE_XZY
CR_EULER_MODE_ZYX = _CoreRobotics.CR_EULER_MODE_ZYX
CR_EULER_MODE_YXZ = _CoreRobotics.CR_EULER_MODE_YXZ
class CRFrame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRFrame, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_CRFrame(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setFreeValue(self, i_q):
        return _CoreRobotics.CRFrame_setFreeValue(self, i_q)

    def getFreeValue(self):
        return _CoreRobotics.CRFrame_getFreeValue(self)

    def setRotationAndTranslation(self, i_rot, i_trans):
        return _CoreRobotics.CRFrame_setRotationAndTranslation(self, i_rot, i_trans)

    def getRotationAndTranslation(self, o_rot, o_trans):
        return _CoreRobotics.CRFrame_getRotationAndTranslation(self, o_rot, o_trans)

    def getTransformToParent(self):
        return _CoreRobotics.CRFrame_getTransformToParent(self)

    def getTransformToChild(self):
        return _CoreRobotics.CRFrame_getTransformToChild(self)

    def transformToParent(self, i_point):
        return _CoreRobotics.CRFrame_transformToParent(self, i_point)

    def transformToChild(self, i_point):
        return _CoreRobotics.CRFrame_transformToChild(self, i_point)

    def isDriven(self):
        return _CoreRobotics.CRFrame_isDriven(self)

    def getPosition(self):
        return _CoreRobotics.CRFrame_getPosition(self)

    def getOrientation(self, i_mode):
        return _CoreRobotics.CRFrame_getOrientation(self, i_mode)

    def getPose(self, *args):
        return _CoreRobotics.CRFrame_getPose(self, *args)
    __swig_destroy__ = _CoreRobotics.delete_CRFrame
    def __del__(self):
        return None
CRFrame_swigregister = _CoreRobotics.CRFrame_swigregister
CRFrame_swigregister(CRFrame)

CR_EULER_FREE_NONE = _CoreRobotics.CR_EULER_FREE_NONE
CR_EULER_FREE_POS_X = _CoreRobotics.CR_EULER_FREE_POS_X
CR_EULER_FREE_POS_Y = _CoreRobotics.CR_EULER_FREE_POS_Y
CR_EULER_FREE_POS_Z = _CoreRobotics.CR_EULER_FREE_POS_Z
CR_EULER_FREE_ANG_A = _CoreRobotics.CR_EULER_FREE_ANG_A
CR_EULER_FREE_ANG_B = _CoreRobotics.CR_EULER_FREE_ANG_B
CR_EULER_FREE_ANG_G = _CoreRobotics.CR_EULER_FREE_ANG_G
class CRFrameEuler(CRFrame):
    __swig_setmethods__ = {}
    for _s in [CRFrame]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRFrameEuler, name, value)
    __swig_getmethods__ = {}
    for _s in [CRFrame]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRFrameEuler, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_CRFrameEuler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setFreeValue(self, i_q):
        return _CoreRobotics.CRFrameEuler_setFreeValue(self, i_q)

    def getFreeValue(self):
        return _CoreRobotics.CRFrameEuler_getFreeValue(self)

    def setFreeVariable(self, i_free):
        return _CoreRobotics.CRFrameEuler_setFreeVariable(self, i_free)

    def getFreeVariable(self):
        return _CoreRobotics.CRFrameEuler_getFreeVariable(self)

    def setMode(self, i_mode):
        return _CoreRobotics.CRFrameEuler_setMode(self, i_mode)

    def getMode(self):
        return _CoreRobotics.CRFrameEuler_getMode(self)

    def setPosition(self, i_x, i_y, i_z):
        return _CoreRobotics.CRFrameEuler_setPosition(self, i_x, i_y, i_z)

    def getPosition(self, o_x, o_y, o_z):
        return _CoreRobotics.CRFrameEuler_getPosition(self, o_x, o_y, o_z)

    def setOrientation(self, i_a, i_b, i_g):
        return _CoreRobotics.CRFrameEuler_setOrientation(self, i_a, i_b, i_g)

    def getOrientation(self, o_a, o_b, o_g):
        return _CoreRobotics.CRFrameEuler_getOrientation(self, o_a, o_b, o_g)

    def setPositionAndOrientation(self, i_x, i_y, i_z, i_a, i_b, i_g):
        return _CoreRobotics.CRFrameEuler_setPositionAndOrientation(self, i_x, i_y, i_z, i_a, i_b, i_g)

    def getPositionAndOrientation(self, o_x, o_y, o_z, o_a, o_b, o_g):
        return _CoreRobotics.CRFrameEuler_getPositionAndOrientation(self, o_x, o_y, o_z, o_a, o_b, o_g)

    def isDriven(self):
        return _CoreRobotics.CRFrameEuler_isDriven(self)
    __swig_destroy__ = _CoreRobotics.delete_CRFrameEuler
    def __del__(self):
        return None
CRFrameEuler_swigregister = _CoreRobotics.CRFrameEuler_swigregister
CRFrameEuler_swigregister(CRFrameEuler)

CR_DH_FREE_NONE = _CoreRobotics.CR_DH_FREE_NONE
CR_DH_FREE_R = _CoreRobotics.CR_DH_FREE_R
CR_DH_FREE_ALPHA = _CoreRobotics.CR_DH_FREE_ALPHA
CR_DH_FREE_D = _CoreRobotics.CR_DH_FREE_D
CR_DH_FREE_THETA = _CoreRobotics.CR_DH_FREE_THETA
CR_DH_MODE_CLASSIC = _CoreRobotics.CR_DH_MODE_CLASSIC
CR_DH_MODE_MODIFIED = _CoreRobotics.CR_DH_MODE_MODIFIED
class CRFrameDh(CRFrame):
    __swig_setmethods__ = {}
    for _s in [CRFrame]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRFrameDh, name, value)
    __swig_getmethods__ = {}
    for _s in [CRFrame]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRFrameDh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_CRFrameDh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setFreeValue(self, i_q):
        return _CoreRobotics.CRFrameDh_setFreeValue(self, i_q)

    def getFreeValue(self):
        return _CoreRobotics.CRFrameDh_getFreeValue(self)

    def setFreeVariable(self, i_free):
        return _CoreRobotics.CRFrameDh_setFreeVariable(self, i_free)

    def getFreeVariable(self):
        return _CoreRobotics.CRFrameDh_getFreeVariable(self)

    def setMode(self, i_mode):
        return _CoreRobotics.CRFrameDh_setMode(self, i_mode)

    def getMode(self):
        return _CoreRobotics.CRFrameDh_getMode(self)

    def setParameters(self, i_r, i_alpha, i_d, i_theta):
        return _CoreRobotics.CRFrameDh_setParameters(self, i_r, i_alpha, i_d, i_theta)

    def getParameters(self, o_r, o_alpha, o_d, o_theta):
        return _CoreRobotics.CRFrameDh_getParameters(self, o_r, o_alpha, o_d, o_theta)

    def isDriven(self):
        return _CoreRobotics.CRFrameDh_isDriven(self)
    __swig_destroy__ = _CoreRobotics.delete_CRFrameDh
    def __del__(self):
        return None
CRFrameDh_swigregister = _CoreRobotics.CRFrameDh_swigregister
CRFrameDh_swigregister(CRFrameDh)

class CRRigidBody(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRRigidBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRRigidBody, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_CRRigidBody(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setFrame(self, i_frame):
        return _CoreRobotics.CRRigidBody_setFrame(self, i_frame)
    __swig_setmethods__["m_frame"] = _CoreRobotics.CRRigidBody_m_frame_set
    __swig_getmethods__["m_frame"] = _CoreRobotics.CRRigidBody_m_frame_get
    if _newclass:
        m_frame = _swig_property(_CoreRobotics.CRRigidBody_m_frame_get, _CoreRobotics.CRRigidBody_m_frame_set)
    __swig_destroy__ = _CoreRobotics.delete_CRRigidBody
    def __del__(self):
        return None
CRRigidBody_swigregister = _CoreRobotics.CRRigidBody_swigregister
CRRigidBody_swigregister(CRRigidBody)

CR_MANIPULATOR_MODE_POSITION = _CoreRobotics.CR_MANIPULATOR_MODE_POSITION
class CRManipulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRManipulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRManipulator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_CRManipulator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setConfiguration(self, i_q):
        return _CoreRobotics.CRManipulator_setConfiguration(self, i_q)

    def getConfiguration(self):
        return _CoreRobotics.CRManipulator_getConfiguration(self)

    def getForwardKinematics(self):
        return _CoreRobotics.CRManipulator_getForwardKinematics(self)

    def getNumberOfLinks(self):
        return _CoreRobotics.CRManipulator_getNumberOfLinks(self)

    def getDegreesOfFreedom(self):
        return _CoreRobotics.CRManipulator_getDegreesOfFreedom(self)

    def getToolFrame(self, i_toolIndex, o_tool):
        return _CoreRobotics.CRManipulator_getToolFrame(self, i_toolIndex, o_tool)

    def getLinkFrame(self, i_linkIndex, o_link):
        return _CoreRobotics.CRManipulator_getLinkFrame(self, i_linkIndex, o_link)

    def getToolPose(self, *args):
        return _CoreRobotics.CRManipulator_getToolPose(self, *args)

    def setModelType(self, type):
        return _CoreRobotics.CRManipulator_setModelType(self, type)

    def jacobian(self, *args):
        return _CoreRobotics.CRManipulator_jacobian(self, *args)

    def hessian(self, *args):
        return _CoreRobotics.CRManipulator_hessian(self, *args)

    def addLink(self, i_link):
        return _CoreRobotics.CRManipulator_addLink(self, i_link)

    def addTool(self, i_parentIndex, i_tool):
        return _CoreRobotics.CRManipulator_addTool(self, i_parentIndex, i_tool)
    __swig_destroy__ = _CoreRobotics.delete_CRManipulator
    def __del__(self):
        return None
CRManipulator_swigregister = _CoreRobotics.CRManipulator_swigregister
CRManipulator_swigregister(CRManipulator)

class CRParamNoiseGeneric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRParamNoiseGeneric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRParamNoiseGeneric, name)
    __repr__ = _swig_repr
    __swig_setmethods__["icdFunction"] = _CoreRobotics.CRParamNoiseGeneric_icdFunction_set
    __swig_getmethods__["icdFunction"] = _CoreRobotics.CRParamNoiseGeneric_icdFunction_get
    if _newclass:
        icdFunction = _swig_property(_CoreRobotics.CRParamNoiseGeneric_icdFunction_get, _CoreRobotics.CRParamNoiseGeneric_icdFunction_set)
    __swig_setmethods__["probFunction"] = _CoreRobotics.CRParamNoiseGeneric_probFunction_set
    __swig_getmethods__["probFunction"] = _CoreRobotics.CRParamNoiseGeneric_probFunction_get
    if _newclass:
        probFunction = _swig_property(_CoreRobotics.CRParamNoiseGeneric_probFunction_get, _CoreRobotics.CRParamNoiseGeneric_probFunction_set)

    def __init__(self):
        this = _CoreRobotics.new_CRParamNoiseGeneric()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_CRParamNoiseGeneric
    def __del__(self):
        return None
CRParamNoiseGeneric_swigregister = _CoreRobotics.CRParamNoiseGeneric_swigregister
CRParamNoiseGeneric_swigregister(CRParamNoiseGeneric)

class CRNoiseModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRNoiseModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRNoiseModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_CRNoiseModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setParameters(self, i_icd, i_prob):
        return _CoreRobotics.CRNoiseModel_setParameters(self, i_icd, i_prob)

    def sample(self):
        return _CoreRobotics.CRNoiseModel_sample(self)

    def probability(self, i_x):
        return _CoreRobotics.CRNoiseModel_probability(self, i_x)
    __swig_destroy__ = _CoreRobotics.delete_CRNoiseModel
    def __del__(self):
        return None
CRNoiseModel_swigregister = _CoreRobotics.CRNoiseModel_swigregister
CRNoiseModel_swigregister(CRNoiseModel)

class gaussianParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gaussianParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gaussianParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cov"] = _CoreRobotics.gaussianParam_cov_set
    __swig_getmethods__["cov"] = _CoreRobotics.gaussianParam_cov_get
    if _newclass:
        cov = _swig_property(_CoreRobotics.gaussianParam_cov_get, _CoreRobotics.gaussianParam_cov_set)
    __swig_setmethods__["covInv"] = _CoreRobotics.gaussianParam_covInv_set
    __swig_getmethods__["covInv"] = _CoreRobotics.gaussianParam_covInv_get
    if _newclass:
        covInv = _swig_property(_CoreRobotics.gaussianParam_covInv_get, _CoreRobotics.gaussianParam_covInv_set)
    __swig_setmethods__["mean"] = _CoreRobotics.gaussianParam_mean_set
    __swig_getmethods__["mean"] = _CoreRobotics.gaussianParam_mean_get
    if _newclass:
        mean = _swig_property(_CoreRobotics.gaussianParam_mean_get, _CoreRobotics.gaussianParam_mean_set)

    def __init__(self):
        this = _CoreRobotics.new_gaussianParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_gaussianParam
    def __del__(self):
        return None
gaussianParam_swigregister = _CoreRobotics.gaussianParam_swigregister
gaussianParam_swigregister(gaussianParam)

class CRNoiseGaussian(CRNoiseModel):
    __swig_setmethods__ = {}
    for _s in [CRNoiseModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRNoiseGaussian, name, value)
    __swig_getmethods__ = {}
    for _s in [CRNoiseModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRNoiseGaussian, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_CRNoiseGaussian(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setParameters(self, *args):
        return _CoreRobotics.CRNoiseGaussian_setParameters(self, *args)

    def sample(self):
        return _CoreRobotics.CRNoiseGaussian_sample(self)

    def probability(self, i_x):
        return _CoreRobotics.CRNoiseGaussian_probability(self, i_x)
    __swig_destroy__ = _CoreRobotics.delete_CRNoiseGaussian
    def __del__(self):
        return None
CRNoiseGaussian_swigregister = _CoreRobotics.CRNoiseGaussian_swigregister
CRNoiseGaussian_swigregister(CRNoiseGaussian)

class diracParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, diracParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, diracParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["point"] = _CoreRobotics.diracParam_point_set
    __swig_getmethods__["point"] = _CoreRobotics.diracParam_point_get
    if _newclass:
        point = _swig_property(_CoreRobotics.diracParam_point_get, _CoreRobotics.diracParam_point_set)

    def __init__(self):
        this = _CoreRobotics.new_diracParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_diracParam
    def __del__(self):
        return None
diracParam_swigregister = _CoreRobotics.diracParam_swigregister
diracParam_swigregister(diracParam)

class CRNoiseDirac(CRNoiseModel):
    __swig_setmethods__ = {}
    for _s in [CRNoiseModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRNoiseDirac, name, value)
    __swig_getmethods__ = {}
    for _s in [CRNoiseModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRNoiseDirac, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_CRNoiseDirac(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setParameters(self, *args):
        return _CoreRobotics.CRNoiseDirac_setParameters(self, *args)

    def sample(self):
        return _CoreRobotics.CRNoiseDirac_sample(self)

    def probability(self, i_x):
        return _CoreRobotics.CRNoiseDirac_probability(self, i_x)
    __swig_destroy__ = _CoreRobotics.delete_CRNoiseDirac
    def __del__(self):
        return None
CRNoiseDirac_swigregister = _CoreRobotics.CRNoiseDirac_swigregister
CRNoiseDirac_swigregister(CRNoiseDirac)

class uniformParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uniformParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uniformParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _CoreRobotics.uniformParam_a_set
    __swig_getmethods__["a"] = _CoreRobotics.uniformParam_a_get
    if _newclass:
        a = _swig_property(_CoreRobotics.uniformParam_a_get, _CoreRobotics.uniformParam_a_set)
    __swig_setmethods__["b"] = _CoreRobotics.uniformParam_b_set
    __swig_getmethods__["b"] = _CoreRobotics.uniformParam_b_get
    if _newclass:
        b = _swig_property(_CoreRobotics.uniformParam_b_get, _CoreRobotics.uniformParam_b_set)

    def __init__(self):
        this = _CoreRobotics.new_uniformParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_uniformParam
    def __del__(self):
        return None
uniformParam_swigregister = _CoreRobotics.uniformParam_swigregister
uniformParam_swigregister(uniformParam)

class CRNoiseUniform(CRNoiseModel):
    __swig_setmethods__ = {}
    for _s in [CRNoiseModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRNoiseUniform, name, value)
    __swig_getmethods__ = {}
    for _s in [CRNoiseModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRNoiseUniform, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_CRNoiseUniform(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setParameters(self, *args):
        return _CoreRobotics.CRNoiseUniform_setParameters(self, *args)

    def sample(self):
        return _CoreRobotics.CRNoiseUniform_sample(self)

    def probability(self, i_x):
        return _CoreRobotics.CRNoiseUniform_probability(self, i_x)
    __swig_destroy__ = _CoreRobotics.delete_CRNoiseUniform
    def __del__(self):
        return None
CRNoiseUniform_swigregister = _CoreRobotics.CRNoiseUniform_swigregister
CRNoiseUniform_swigregister(CRNoiseUniform)

class mixtureParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mixtureParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mixtureParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["models"] = _CoreRobotics.mixtureParam_models_set
    __swig_getmethods__["models"] = _CoreRobotics.mixtureParam_models_get
    if _newclass:
        models = _swig_property(_CoreRobotics.mixtureParam_models_get, _CoreRobotics.mixtureParam_models_set)
    __swig_setmethods__["weights"] = _CoreRobotics.mixtureParam_weights_set
    __swig_getmethods__["weights"] = _CoreRobotics.mixtureParam_weights_get
    if _newclass:
        weights = _swig_property(_CoreRobotics.mixtureParam_weights_get, _CoreRobotics.mixtureParam_weights_set)

    def __init__(self):
        this = _CoreRobotics.new_mixtureParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_mixtureParam
    def __del__(self):
        return None
mixtureParam_swigregister = _CoreRobotics.mixtureParam_swigregister
mixtureParam_swigregister(mixtureParam)

class CRNoiseMixture(CRNoiseModel):
    __swig_setmethods__ = {}
    for _s in [CRNoiseModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRNoiseMixture, name, value)
    __swig_getmethods__ = {}
    for _s in [CRNoiseModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRNoiseMixture, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_CRNoiseMixture(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def add(self, i_model, i_weight):
        return _CoreRobotics.CRNoiseMixture_add(self, i_model, i_weight)

    def sample(self):
        return _CoreRobotics.CRNoiseMixture_sample(self)

    def probability(self, i_x):
        return _CoreRobotics.CRNoiseMixture_probability(self, i_x)
    __swig_destroy__ = _CoreRobotics.delete_CRNoiseMixture
    def __del__(self):
        return None
CRNoiseMixture_swigregister = _CoreRobotics.CRNoiseMixture_swigregister
CRNoiseMixture_swigregister(CRNoiseMixture)

class CRSensorLinear(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRSensorLinear, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRSensorLinear, name)
    __repr__ = _swig_repr

    def __init__(self, i_H, i_x0):
        this = _CoreRobotics.new_CRSensorLinear(i_H, i_x0)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setObservation(self, i_H):
        return _CoreRobotics.CRSensorLinear_setObservation(self, i_H)

    def measurement(self):
        return _CoreRobotics.CRSensorLinear_measurement(self)
    __swig_destroy__ = _CoreRobotics.delete_CRSensorLinear
    def __del__(self):
        return None
CRSensorLinear_swigregister = _CoreRobotics.CRSensorLinear_swigregister
CRSensorLinear_swigregister(CRSensorLinear)

class CRInverseKinematics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRInverseKinematics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRInverseKinematics, name)
    __repr__ = _swig_repr

    def __init__(self, i_robot, i_toolIndex, i_eulerMode):
        this = _CoreRobotics.new_CRInverseKinematics(i_robot, i_toolIndex, i_eulerMode)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setRobot(self, i_robot):
        return _CoreRobotics.CRInverseKinematics_setRobot(self, i_robot)

    def setToolIndex(self, i_toolIndex):
        return _CoreRobotics.CRInverseKinematics_setToolIndex(self, i_toolIndex)

    def setEulerMode(self, i_eulerMode):
        return _CoreRobotics.CRInverseKinematics_setEulerMode(self, i_eulerMode)

    def getEulerMode(self):
        return _CoreRobotics.CRInverseKinematics_getEulerMode(self)

    def setTolerance(self, *args):
        return _CoreRobotics.CRInverseKinematics_setTolerance(self, *args)

    def setMaxIter(self, i_maxIter):
        return _CoreRobotics.CRInverseKinematics_setMaxIter(self, i_maxIter)

    def getMaxIter(self):
        return _CoreRobotics.CRInverseKinematics_getMaxIter(self)

    def setStepSize(self, i_stepSize):
        return _CoreRobotics.CRInverseKinematics_setStepSize(self, i_stepSize)

    def getStepSize(self):
        return _CoreRobotics.CRInverseKinematics_getStepSize(self)

    def setDampingFactor(self, i_dampingFactor):
        return _CoreRobotics.CRInverseKinematics_setDampingFactor(self, i_dampingFactor)

    def getDampingFactor(self):
        return _CoreRobotics.CRInverseKinematics_getDampingFactor(self)

    def setSingularThresh(self, i_thresh):
        return _CoreRobotics.CRInverseKinematics_setSingularThresh(self, i_thresh)

    def getSingularThresh(self):
        return _CoreRobotics.CRInverseKinematics_getSingularThresh(self)

    def getJacInv(self, i_jac, o_jacInv):
        return _CoreRobotics.CRInverseKinematics_getJacInv(self, i_jac, o_jacInv)

    def solve(self, *args):
        return _CoreRobotics.CRInverseKinematics_solve(self, *args)
    __swig_destroy__ = _CoreRobotics.delete_CRInverseKinematics
    def __del__(self):
        return None
CRInverseKinematics_swigregister = _CoreRobotics.CRInverseKinematics_swigregister
CRInverseKinematics_swigregister(CRInverseKinematics)

class CRNullSpace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRNullSpace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRNullSpace, name)
    __repr__ = _swig_repr

    def __init__(self, i_robot, i_toolIndex, i_eulerMode):
        this = _CoreRobotics.new_CRNullSpace(i_robot, i_toolIndex, i_eulerMode)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setRobot(self, i_robot):
        return _CoreRobotics.CRNullSpace_setRobot(self, i_robot)

    def setToolIndex(self, i_toolIndex):
        return _CoreRobotics.CRNullSpace_setToolIndex(self, i_toolIndex)

    def setEulerMode(self, i_eulerMode):
        return _CoreRobotics.CRNullSpace_setEulerMode(self, i_eulerMode)

    def getEulerMode(self):
        return _CoreRobotics.CRNullSpace_getEulerMode(self)

    def setSingularThresh(self, i_thresh):
        return _CoreRobotics.CRNullSpace_setSingularThresh(self, i_thresh)

    def getSingularThresh(self):
        return _CoreRobotics.CRNullSpace_getSingularThresh(self)

    def setMinStepSize(self, i_stepSize):
        return _CoreRobotics.CRNullSpace_setMinStepSize(self, i_stepSize)

    def getMinStepSize(self):
        return _CoreRobotics.CRNullSpace_getMinStepSize(self)

    def setMaxIter(self, i_maxIter):
        return _CoreRobotics.CRNullSpace_setMaxIter(self, i_maxIter)

    def getMaxIter(self):
        return _CoreRobotics.CRNullSpace_getMaxIter(self)

    def setTrivialTolerance(self, i_trivialTolerance):
        return _CoreRobotics.CRNullSpace_setTrivialTolerance(self, i_trivialTolerance)

    def getTrivialTolerance(self):
        return _CoreRobotics.CRNullSpace_getTrivialTolerance(self)

    def solve(self, *args):
        return _CoreRobotics.CRNullSpace_solve(self, *args)
    __swig_destroy__ = _CoreRobotics.delete_CRNullSpace
    def __del__(self):
        return None
CRNullSpace_swigregister = _CoreRobotics.CRNullSpace_swigregister
CRNullSpace_swigregister(CRNullSpace)

class CRHardLimits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRHardLimits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRHardLimits, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CoreRobotics.new_CRHardLimits(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getIKSolver(self):
        return _CoreRobotics.CRHardLimits_getIKSolver(self)

    def getNullSpaceSolver(self):
        return _CoreRobotics.CRHardLimits_getNullSpaceSolver(self)

    def useNullSpace(self, i_useNullSpace):
        return _CoreRobotics.CRHardLimits_useNullSpace(self, i_useNullSpace)

    def nullSpaceStatus(self):
        return _CoreRobotics.CRHardLimits_nullSpaceStatus(self)

    def setPoseElements(self, *args):
        return _CoreRobotics.CRHardLimits_setPoseElements(self, *args)

    def getPoseElements(self):
        return _CoreRobotics.CRHardLimits_getPoseElements(self)

    def setJointUpperLimit(self, i_jointIndex, i_upperLimit):
        return _CoreRobotics.CRHardLimits_setJointUpperLimit(self, i_jointIndex, i_upperLimit)

    def setJointLowerLimit(self, i_jointIndex, i_lowerLimit):
        return _CoreRobotics.CRHardLimits_setJointLowerLimit(self, i_jointIndex, i_lowerLimit)

    def getJointUpperLimit(self, i_jointIndex):
        return _CoreRobotics.CRHardLimits_getJointUpperLimit(self, i_jointIndex)

    def getJointLowerLimit(self, i_jointIndex):
        return _CoreRobotics.CRHardLimits_getJointLowerLimit(self, i_jointIndex)

    def setJointLimits(self, *args):
        return _CoreRobotics.CRHardLimits_setJointLimits(self, *args)

    def setJointUpperLimits(self, i_upperLimits):
        return _CoreRobotics.CRHardLimits_setJointUpperLimits(self, i_upperLimits)

    def setJointLowerLimits(self, i_lowerLimits):
        return _CoreRobotics.CRHardLimits_setJointLowerLimits(self, i_lowerLimits)

    def getJointUpperLimits(self):
        return _CoreRobotics.CRHardLimits_getJointUpperLimits(self)

    def getJointLowerLimits(self):
        return _CoreRobotics.CRHardLimits_getJointLowerLimits(self)

    def setQ0(self, i_q0):
        return _CoreRobotics.CRHardLimits_setQ0(self, i_q0)

    def getQ0(self):
        return _CoreRobotics.CRHardLimits_getQ0(self)

    def setToolPose(self, i_setPoint):
        return _CoreRobotics.CRHardLimits_setToolPose(self, i_setPoint)

    def getToolPose(self):
        return _CoreRobotics.CRHardLimits_getToolPose(self)

    def setJointMotion(self, i_jointMotion):
        return _CoreRobotics.CRHardLimits_setJointMotion(self, i_jointMotion)

    def getJointMotion(self):
        return _CoreRobotics.CRHardLimits_getJointMotion(self)

    def solve(self, o_qSolved):
        return _CoreRobotics.CRHardLimits_solve(self, o_qSolved)
    __swig_destroy__ = _CoreRobotics.delete_CRHardLimits
    def __del__(self):
        return None
CRHardLimits_swigregister = _CoreRobotics.CRHardLimits_swigregister
CRHardLimits_swigregister(CRHardLimits)

CR_MANAGER_SERVER = _CoreRobotics.CR_MANAGER_SERVER
CR_MANAGER_CLIENT = _CoreRobotics.CR_MANAGER_CLIENT
class CRSharedMemory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRSharedMemory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRSharedMemory, name)
    __repr__ = _swig_repr

    def __init__(self, i_memoryName, i_role):
        this = _CoreRobotics.new_CRSharedMemory(i_memoryName, i_role)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_CRSharedMemory
    def __del__(self):
        return None

    def addSignal(self, i_signalName, i_data):
        return _CoreRobotics.CRSharedMemory_addSignal(self, i_signalName, i_data)

    def removeSignal(self, i_signalName):
        return _CoreRobotics.CRSharedMemory_removeSignal(self, i_signalName)

    def set(self, i_signalName, i_data):
        return _CoreRobotics.CRSharedMemory_set(self, i_signalName, i_data)

    def get(self, i_signalName):
        return _CoreRobotics.CRSharedMemory_get(self, i_signalName)
CRSharedMemory_swigregister = _CoreRobotics.CRSharedMemory_swigregister
CRSharedMemory_swigregister(CRSharedMemory)

class CRWaypoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRWaypoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRWaypoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _CoreRobotics.CRWaypoint_time_set
    __swig_getmethods__["time"] = _CoreRobotics.CRWaypoint_time_get
    if _newclass:
        time = _swig_property(_CoreRobotics.CRWaypoint_time_get, _CoreRobotics.CRWaypoint_time_set)
    __swig_setmethods__["position"] = _CoreRobotics.CRWaypoint_position_set
    __swig_getmethods__["position"] = _CoreRobotics.CRWaypoint_position_get
    if _newclass:
        position = _swig_property(_CoreRobotics.CRWaypoint_position_get, _CoreRobotics.CRWaypoint_position_set)
    __swig_setmethods__["velocity"] = _CoreRobotics.CRWaypoint_velocity_set
    __swig_getmethods__["velocity"] = _CoreRobotics.CRWaypoint_velocity_get
    if _newclass:
        velocity = _swig_property(_CoreRobotics.CRWaypoint_velocity_get, _CoreRobotics.CRWaypoint_velocity_set)
    __swig_setmethods__["acceleration"] = _CoreRobotics.CRWaypoint_acceleration_set
    __swig_getmethods__["acceleration"] = _CoreRobotics.CRWaypoint_acceleration_get
    if _newclass:
        acceleration = _swig_property(_CoreRobotics.CRWaypoint_acceleration_get, _CoreRobotics.CRWaypoint_acceleration_set)
    __swig_setmethods__["jerk"] = _CoreRobotics.CRWaypoint_jerk_set
    __swig_getmethods__["jerk"] = _CoreRobotics.CRWaypoint_jerk_get
    if _newclass:
        jerk = _swig_property(_CoreRobotics.CRWaypoint_jerk_get, _CoreRobotics.CRWaypoint_jerk_set)

    def __init__(self):
        this = _CoreRobotics.new_CRWaypoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CoreRobotics.delete_CRWaypoint
    def __del__(self):
        return None
CRWaypoint_swigregister = _CoreRobotics.CRWaypoint_swigregister
CRWaypoint_swigregister(CRWaypoint)

class CRTrajectoryGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRTrajectoryGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRTrajectoryGenerator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CoreRobotics.new_CRTrajectoryGenerator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def solve(self, i_x0, i_v0, m_a0, m_xf, m_vf, m_af, i_tf):
        return _CoreRobotics.CRTrajectoryGenerator_solve(self, i_x0, i_v0, m_a0, m_xf, m_vf, m_af, i_tf)

    def step(self, *args):
        return _CoreRobotics.CRTrajectoryGenerator_step(self, *args)
    __swig_destroy__ = _CoreRobotics.delete_CRTrajectoryGenerator
    def __del__(self):
        return None
CRTrajectoryGenerator_swigregister = _CoreRobotics.CRTrajectoryGenerator_swigregister
CRTrajectoryGenerator_swigregister(CRTrajectoryGenerator)

# This file is compatible with both classic and new-style classes.


