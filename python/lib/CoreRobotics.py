# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _CoreRobotics
else:
    import _CoreRobotics

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _CoreRobotics.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CoreRobotics.delete_SwigPyIterator

    def value(self):
        return _CoreRobotics.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CoreRobotics.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CoreRobotics.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CoreRobotics.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CoreRobotics.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CoreRobotics.SwigPyIterator_copy(self)

    def next(self):
        return _CoreRobotics.SwigPyIterator_next(self)

    def __next__(self):
        return _CoreRobotics.SwigPyIterator___next__(self)

    def previous(self):
        return _CoreRobotics.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CoreRobotics.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CoreRobotics.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CoreRobotics.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CoreRobotics.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CoreRobotics.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CoreRobotics.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CoreRobotics.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CoreRobotics:
_CoreRobotics.SwigPyIterator_swigregister(SwigPyIterator)

class IVectorMatrixXd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _CoreRobotics.IVectorMatrixXd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CoreRobotics.IVectorMatrixXd___nonzero__(self)

    def __bool__(self):
        return _CoreRobotics.IVectorMatrixXd___bool__(self)

    def __len__(self):
        return _CoreRobotics.IVectorMatrixXd___len__(self)

    def __getslice__(self, i, j):
        return _CoreRobotics.IVectorMatrixXd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CoreRobotics.IVectorMatrixXd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CoreRobotics.IVectorMatrixXd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CoreRobotics.IVectorMatrixXd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CoreRobotics.IVectorMatrixXd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CoreRobotics.IVectorMatrixXd___setitem__(self, *args)

    def pop(self):
        return _CoreRobotics.IVectorMatrixXd_pop(self)

    def append(self, x):
        return _CoreRobotics.IVectorMatrixXd_append(self, x)

    def empty(self):
        return _CoreRobotics.IVectorMatrixXd_empty(self)

    def size(self):
        return _CoreRobotics.IVectorMatrixXd_size(self)

    def swap(self, v):
        return _CoreRobotics.IVectorMatrixXd_swap(self, v)

    def begin(self):
        return _CoreRobotics.IVectorMatrixXd_begin(self)

    def end(self):
        return _CoreRobotics.IVectorMatrixXd_end(self)

    def rbegin(self):
        return _CoreRobotics.IVectorMatrixXd_rbegin(self)

    def rend(self):
        return _CoreRobotics.IVectorMatrixXd_rend(self)

    def clear(self):
        return _CoreRobotics.IVectorMatrixXd_clear(self)

    def get_allocator(self):
        return _CoreRobotics.IVectorMatrixXd_get_allocator(self)

    def pop_back(self):
        return _CoreRobotics.IVectorMatrixXd_pop_back(self)

    def erase(self, *args):
        return _CoreRobotics.IVectorMatrixXd_erase(self, *args)

    def __init__(self, *args):
        _CoreRobotics.IVectorMatrixXd_swiginit(self, _CoreRobotics.new_IVectorMatrixXd(*args))

    def push_back(self, x):
        return _CoreRobotics.IVectorMatrixXd_push_back(self, x)

    def front(self):
        return _CoreRobotics.IVectorMatrixXd_front(self)

    def back(self):
        return _CoreRobotics.IVectorMatrixXd_back(self)

    def assign(self, n, x):
        return _CoreRobotics.IVectorMatrixXd_assign(self, n, x)

    def resize(self, *args):
        return _CoreRobotics.IVectorMatrixXd_resize(self, *args)

    def insert(self, *args):
        return _CoreRobotics.IVectorMatrixXd_insert(self, *args)

    def reserve(self, n):
        return _CoreRobotics.IVectorMatrixXd_reserve(self, n)

    def capacity(self):
        return _CoreRobotics.IVectorMatrixXd_capacity(self)
    __swig_destroy__ = _CoreRobotics.delete_IVectorMatrixXd

# Register IVectorMatrixXd in _CoreRobotics:
_CoreRobotics.IVectorMatrixXd_swigregister(IVectorMatrixXd)

class IVectorVectorXd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _CoreRobotics.IVectorVectorXd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CoreRobotics.IVectorVectorXd___nonzero__(self)

    def __bool__(self):
        return _CoreRobotics.IVectorVectorXd___bool__(self)

    def __len__(self):
        return _CoreRobotics.IVectorVectorXd___len__(self)

    def __getslice__(self, i, j):
        return _CoreRobotics.IVectorVectorXd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CoreRobotics.IVectorVectorXd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CoreRobotics.IVectorVectorXd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CoreRobotics.IVectorVectorXd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CoreRobotics.IVectorVectorXd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CoreRobotics.IVectorVectorXd___setitem__(self, *args)

    def pop(self):
        return _CoreRobotics.IVectorVectorXd_pop(self)

    def append(self, x):
        return _CoreRobotics.IVectorVectorXd_append(self, x)

    def empty(self):
        return _CoreRobotics.IVectorVectorXd_empty(self)

    def size(self):
        return _CoreRobotics.IVectorVectorXd_size(self)

    def swap(self, v):
        return _CoreRobotics.IVectorVectorXd_swap(self, v)

    def begin(self):
        return _CoreRobotics.IVectorVectorXd_begin(self)

    def end(self):
        return _CoreRobotics.IVectorVectorXd_end(self)

    def rbegin(self):
        return _CoreRobotics.IVectorVectorXd_rbegin(self)

    def rend(self):
        return _CoreRobotics.IVectorVectorXd_rend(self)

    def clear(self):
        return _CoreRobotics.IVectorVectorXd_clear(self)

    def get_allocator(self):
        return _CoreRobotics.IVectorVectorXd_get_allocator(self)

    def pop_back(self):
        return _CoreRobotics.IVectorVectorXd_pop_back(self)

    def erase(self, *args):
        return _CoreRobotics.IVectorVectorXd_erase(self, *args)

    def __init__(self, *args):
        _CoreRobotics.IVectorVectorXd_swiginit(self, _CoreRobotics.new_IVectorVectorXd(*args))

    def push_back(self, x):
        return _CoreRobotics.IVectorVectorXd_push_back(self, x)

    def front(self):
        return _CoreRobotics.IVectorVectorXd_front(self)

    def back(self):
        return _CoreRobotics.IVectorVectorXd_back(self)

    def assign(self, n, x):
        return _CoreRobotics.IVectorVectorXd_assign(self, n, x)

    def resize(self, *args):
        return _CoreRobotics.IVectorVectorXd_resize(self, *args)

    def insert(self, *args):
        return _CoreRobotics.IVectorVectorXd_insert(self, *args)

    def reserve(self, n):
        return _CoreRobotics.IVectorVectorXd_reserve(self, n)

    def capacity(self):
        return _CoreRobotics.IVectorVectorXd_capacity(self)
    __swig_destroy__ = _CoreRobotics.delete_IVectorVectorXd

# Register IVectorVectorXd in _CoreRobotics:
_CoreRobotics.IVectorVectorXd_swigregister(IVectorVectorXd)

class Clock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _CoreRobotics.Clock_swiginit(self, _CoreRobotics.new_Clock())
    __swig_destroy__ = _CoreRobotics.delete_Clock

    def startTimer(self):
        return _CoreRobotics.Clock_startTimer(self)

    def getElapsedTime(self):
        return _CoreRobotics.Clock_getElapsedTime(self)

    def sleep(self, i_time):
        return _CoreRobotics.Clock_sleep(self, i_time)

# Register Clock in _CoreRobotics:
_CoreRobotics.Clock_swigregister(Clock)

class Item(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _CoreRobotics.Item_swiginit(self, _CoreRobotics.new_Item())
    __swig_destroy__ = _CoreRobotics.delete_Item

    def setName(self, i_name):
        return _CoreRobotics.Item_setName(self, i_name)

    def getName(self):
        return _CoreRobotics.Item_getName(self)

    def setIcon(self, i_icon):
        return _CoreRobotics.Item_setIcon(self, i_icon)

    def getIcon(self):
        return _CoreRobotics.Item_getIcon(self)

    def getType(self):
        return _CoreRobotics.Item_getType(self)

# Register Item in _CoreRobotics:
_CoreRobotics.Item_swigregister(Item)

CR_PRIORITY_LOWEST = _CoreRobotics.CR_PRIORITY_LOWEST
CR_PRIORITY_LOW = _CoreRobotics.CR_PRIORITY_LOW
CR_PRIORITY_NORMAL = _CoreRobotics.CR_PRIORITY_NORMAL
CR_PRIORITY_HIGH = _CoreRobotics.CR_PRIORITY_HIGH
CR_PRIORITY_HIGHEST = _CoreRobotics.CR_PRIORITY_HIGHEST
class Loop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CoreRobotics.Loop_swiginit(self, _CoreRobotics.new_Loop(*args))
    __swig_destroy__ = _CoreRobotics.delete_Loop

    @staticmethod
    def create():
        return _CoreRobotics.Loop_create()

    def start(self):
        return _CoreRobotics.Loop_start(self)

    def pause(self):
        return _CoreRobotics.Loop_pause(self)

    def stop(self):
        return _CoreRobotics.Loop_stop(self)

    def callback(self):
        return _CoreRobotics.Loop_callback(self)

    def attach(self, i_element):
        return _CoreRobotics.Loop_attach(self, i_element)

    def setPriority(self, i_priority):
        return _CoreRobotics.Loop_setPriority(self, i_priority)

    def setUpdateRate(self, a_updateRate):
        return _CoreRobotics.Loop_setUpdateRate(self, a_updateRate)

    def getUpdateRate(self):
        return _CoreRobotics.Loop_getUpdateRate(self)

    def getCurrentTime(self):
        return _CoreRobotics.Loop_getCurrentTime(self)

# Register Loop in _CoreRobotics:
_CoreRobotics.Loop_swigregister(Loop)

def Loop_create():
    return _CoreRobotics.Loop_create()

class Step(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _CoreRobotics.Step_swiginit(self, _CoreRobotics.new_Step())
    __swig_destroy__ = _CoreRobotics.delete_Step

    @staticmethod
    def create():
        return _CoreRobotics.Step_create()

    def asStepPtr(self):
        return _CoreRobotics.Step_asStepPtr(self)

    def step(self):
        return _CoreRobotics.Step_step(self)

    def onStart(self):
        return _CoreRobotics.Step_onStart(self)

    def onStop(self):
        return _CoreRobotics.Step_onStop(self)

# Register Step in _CoreRobotics:
_CoreRobotics.Step_swigregister(Step)

def Step_create():
    return _CoreRobotics.Step_create()



